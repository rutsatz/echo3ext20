diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/Tree.java
--- a/src/server-java/app/nextapp/echo/extras/app/Tree.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/Tree.java	Wed Nov 11 11:36:24 2009 +0000
@@ -88,7 +88,7 @@
         private TreeCellRenderer[] columnRenderers;
 
         protected void doRender() {
-            Object root = model.getRoot();
+        	Serializable root = model.getRoot();
             if (isHeaderVisible()) {
                 renderHeader();
             }
@@ -144,7 +144,7 @@
         }
 
         protected void doRenderNode(TreePath treePath) {
-            Object value = treePath.getLastPathComponent();
+        	Serializable value = treePath.getLastPathComponent();
             if (!treePathToComponentCache.containsKey(treePath)) {
                 renderNodeComponents(treePath);
             }
@@ -157,14 +157,14 @@
             if (isExpanded(treePath)) {
                 int childCount = model.getChildCount(value);
                 for (int i = 0; i < childCount; ++i) {
-                    Object childValue = model.getChild(value, i);
+                	Serializable childValue = model.getChild(value, i);
                     doRenderNode(treePath.pathByAddingChild(childValue));
                 }
             }
         }
         
         protected void renderNodeComponents(TreePath treePath) {
-            Object node = treePath.getLastPathComponent();
+        	Serializable node = treePath.getLastPathComponent();
             
             boolean leaf = model.getChildCount(node) == 0;
             for (int i = 0; i < columnCount; ++i) {
@@ -209,7 +209,7 @@
         }
 
         protected void doCollapse(TreePath path) {
-            Object value = path.getLastPathComponent();
+        	Serializable value = path.getLastPathComponent();
 
             if (model.getChildCount(value) == 0) {
                 return;
@@ -235,13 +235,13 @@
             if (parentPath == null) {
                 return null;
             }
-            Object parentValue = parentPath.getLastPathComponent();
+            Serializable parentValue = parentPath.getLastPathComponent();
             int index = model.getIndexOfChild(parentValue, path
                     .getLastPathComponent());
             if (index == model.getChildCount(parentValue) - 1) {
                 return getSiblingPath(parentPath);
             } else {
-                Object siblingValue = model.getChild(parentValue, index + 1);
+            	Serializable siblingValue = model.getChild(parentValue, index + 1);
                 return parentPath.pathByAddingChild(siblingValue);
             }
         }
@@ -317,6 +317,7 @@
          *          nextapp.echo.extras.app.event.TreeModelEvent)
          */
         public void treeStructureChanged(TreeModelEvent e) {
+            firePropertyChange(MODEL_CHANGED_PROPERTY, null, getModel());
             invalidate();
             if (isAutoCreateColumnsFromModel()) {
                 createDefaultColumnsFromModel();
@@ -328,6 +329,7 @@
          *          nextapp.echo.extras.app.event.TreeModelEvent)
          */
         public void treeNodesRemoved(TreeModelEvent e) {
+            firePropertyChange(MODEL_CHANGED_PROPERTY, null, getModel());
             invalidate();
             TreePath removedPath = e.getTreePath();
             TreePath[] selectionPaths = getSelectionModel().getSelectionPaths();
@@ -347,6 +349,7 @@
          *          nextapp.echo.extras.app.event.TreeModelEvent)
          */
         public void treeNodesChanged(TreeModelEvent e) {
+            firePropertyChange(MODEL_CHANGED_PROPERTY, null, getModel());
             invalidate();
             if (isAutoCreateColumnsFromModel()) {
                 createDefaultColumnsFromModel();
@@ -358,6 +361,7 @@
          *          nextapp.echo.extras.app.event.TreeModelEvent)
          */
         public void treeNodesAdded(TreeModelEvent e) {
+            firePropertyChange(MODEL_CHANGED_PROPERTY, null, getModel());
             invalidate();
             if (isAutoCreateColumnsFromModel()) {
                 createDefaultColumnsFromModel();
@@ -443,19 +447,19 @@
         
         this(new AbstractTreeModel() {
         
-            public boolean isLeaf(Object object) {
+            public boolean isLeaf(Serializable object) {
                 return true;
             }
         
-            public Object getValueAt(Object node, int column) {
+            public Serializable getValueAt(Serializable node, int column) {
                 return node;
             }
         
-            public Object getRoot() {
+            public Serializable getRoot() {
                 return "";
             }
         
-            public int getIndexOfChild(Object parent, Object child) {
+            public int getIndexOfChild(Serializable parent, Serializable child) {
                 return 0;
             }
         
@@ -463,11 +467,11 @@
                 return 1;
             }
         
-            public int getChildCount(Object parent) {
+            public int getChildCount(Serializable parent) {
                 return 0;
             }
         
-            public Object getChild(Object parent, int index) {
+            public Serializable getChild(Serializable parent, int index) {
                 return null;
             }
         });
@@ -593,7 +597,7 @@
      * Expand all nodes in the tree.
      */
     public void expandAll() {
-        Object root = model.getRoot();
+    	Serializable root = model.getRoot();
         if (root == null) {
             return;
         }
@@ -608,7 +612,7 @@
      */
     protected void expandAll(TreePath path) {
         setExpandedState(path, true);
-        Object value = path.getLastPathComponent();
+        Serializable value = path.getLastPathComponent();
         int childCount = model.getChildCount(value);
         for (int i = 0; i < childCount; ++i) {
             expandAll(path.pathByAddingChild(model.getChild(value, i)));
diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/tree/AbstractTreeModel.java
--- a/src/server-java/app/nextapp/echo/extras/app/tree/AbstractTreeModel.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/tree/AbstractTreeModel.java	Wed Nov 11 11:36:24 2009 +0000
@@ -29,6 +29,8 @@
 
 package nextapp.echo.extras.app.tree;
 
+import java.io.Serializable;
+
 import nextapp.echo.app.event.EventListenerList;
 import nextapp.echo.extras.app.event.TreeModelEvent;
 import nextapp.echo.extras.app.event.TreeModelListener;
@@ -55,7 +57,7 @@
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel#valueForPathChanged(nextapp.echo.extras.app.tree.TreePath, java.lang.Object)
      */
-    public void valueForPathChanged(TreePath path, Object newValue) {
+    public void valueForPathChanged(TreePath path, Serializable newValue) {
         // is this even needed?
     }
     
diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/tree/TreeModel.java
--- a/src/server-java/app/nextapp/echo/extras/app/tree/TreeModel.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/tree/TreeModel.java	Wed Nov 11 11:36:24 2009 +0000
@@ -37,17 +37,17 @@
 
     public void addTreeModelListener(TreeModelListener l);
     
-    public Object getRoot();
+    public Serializable getRoot();
 
-    public Object getChild(Object parent, int index);
+    public Serializable getChild(Serializable parent, int index);
     
-    public int getChildCount(Object parent);
+    public int getChildCount(Serializable parent);
     
-    public boolean isLeaf(Object object);
+    public boolean isLeaf(Serializable object);
     
-    public void valueForPathChanged(TreePath path, Object newValue);
+    public void valueForPathChanged(TreePath path, Serializable newValue);
 
-    public int getIndexOfChild(Object parent, Object child);
+    public int getIndexOfChild(Serializable parent, Serializable child);
     
     /**
      * Returns the number of available columns.
@@ -68,7 +68,7 @@
      * Returns the value to be displayed for node <code>node</code>, 
      * at column number <code>column</code>.
      */
-    public Object getValueAt(Object node, int column);
+    public Serializable getValueAt(Serializable node, int column);
 
     public void removeTreeModelListener(TreeModelListener l);
 }
diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/tree/TreeNode.java
--- a/src/server-java/app/nextapp/echo/extras/app/tree/TreeNode.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/tree/TreeNode.java	Wed Nov 11 11:36:24 2009 +0000
@@ -1,5 +1,6 @@
 package nextapp.echo.extras.app.tree;
 
+import java.io.Serializable;
 import java.util.Map;
 
 import nextapp.echo.extras.app.event.TreeModelListener;
@@ -10,7 +11,7 @@
  *
  * @author Lloyd Colling
  */
-public interface TreeNode {
+public interface TreeNode extends Serializable {
 
     /**
      * How many children the node has
diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/tree/TreeNodeModel.java
--- a/src/server-java/app/nextapp/echo/extras/app/tree/TreeNodeModel.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/tree/TreeNodeModel.java	Wed Nov 11 11:36:24 2009 +0000
@@ -1,5 +1,6 @@
 package nextapp.echo.extras.app.tree;
 
+import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -113,14 +114,14 @@
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.getChild(Object, int)
      */
-    public Object getChild(Object parent, int index) {
+    public Serializable getChild(Serializable parent, int index) {
         return ((TreeNode)parent).getChild(index);
     }
 
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.getChildCount(Object)
      */
-    public int getChildCount(Object parent) {
+    public int getChildCount(Serializable parent) {
         return ((TreeNode)parent).getChildCount();
     }
 
@@ -134,28 +135,28 @@
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.getIndexOfChild(Object, Object)
      */
-    public int getIndexOfChild(Object parent, Object child) {
+    public int getIndexOfChild(Serializable parent, Serializable child) {
         return ((TreeNode)parent).getIndexOf((TreeNode)child);
     }
 
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.getRoot()
      */
-    public Object getRoot() {
+    public Serializable getRoot() {
         return root;
     }
 
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.getValueAt(Object, int)
      */
-    public Object getValueAt(Object node, int column) {
-        return ((TreeNode)node).getColumnValues().get(columnKeys[column]);
+    public Serializable getValueAt(Serializable node, int column) {
+        return (Serializable)((TreeNode)node).getColumnValues().get(columnKeys[column]);
     }
 
     /**
      * @see nextapp.echo.extras.app.tree.TreeModel.isLeaf(Object)
      */
-    public boolean isLeaf(Object object) {
+    public boolean isLeaf(Serializable object) {
         return ((TreeNode)object).isLeaf();
     }
 
diff -r 6a9bb9e3ec42 src/server-java/app/nextapp/echo/extras/app/tree/TreePath.java
--- a/src/server-java/app/nextapp/echo/extras/app/tree/TreePath.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/app/nextapp/echo/extras/app/tree/TreePath.java	Wed Nov 11 11:36:24 2009 +0000
@@ -46,7 +46,7 @@
     private TreePath parentPath;
 
     /** Last path component. */
-    private Object lastPathComponent;
+    private Serializable lastPathComponent;
 
     /**
      * Constructs a path from an array of Objects, uniquely identifying the path
@@ -61,7 +61,7 @@
      * @param path
      *            an array of Objects representing the path to a node
      */
-    public TreePath(Object[] path) {
+    public TreePath(Serializable[] path) {
         if (path == null || path.length == 0) {
             throw new IllegalArgumentException("path in TreePath must be non null and not empty.");
         }
@@ -80,7 +80,7 @@
      *            an Object representing the path to a node
      * @see #TreePath(Object[])
      */
-    public TreePath(Object singlePath) {
+    public TreePath(Serializable singlePath) {
         if (singlePath == null) {
             throw new IllegalArgumentException("path in TreePath must be non null.");
         }
@@ -92,7 +92,7 @@
      * Constructs a new TreePath, which is the path identified by
      * <code>parent</code> ending in <code>lastElement</code>.
      */
-    protected TreePath(TreePath parent, Object lastElement) {
+    protected TreePath(TreePath parent, Serializable lastElement) {
         if (lastElement == null) {
             throw new IllegalArgumentException("path in TreePath must be non null.");
         }
@@ -104,7 +104,7 @@
      * Constructs a new TreePath with the identified path components of length
      * <code>length</code>.
      */
-    protected TreePath(Object[] path, int length) {
+    protected TreePath(Serializable[] path, int length) {
         lastPathComponent = path[length - 1];
         if (length > 1) {
             parentPath = new TreePath(path, length - 1);
@@ -128,9 +128,9 @@
      * @return an array of Objects representing the TreePath
      * @see #TreePath(Object[])
      */
-    public Object[] getPath() {
+    public Serializable[] getPath() {
         int i = getPathCount();
-        Object[] result = new Object[i--];
+        Serializable[] result = new Serializable[i--];
 
         for (TreePath path = this; path != null; path = path.parentPath) {
             result[i--] = path.lastPathComponent;
@@ -145,7 +145,7 @@
      * @return the Object at the end of the path
      * @see #TreePath(Object[])
      */
-    public Object getLastPathComponent() {
+    public Serializable getLastPathComponent() {
         return lastPathComponent;
     }
 
@@ -173,7 +173,7 @@
      *             if the index is beyond the length of the path
      * @see #TreePath(Object[])
      */
-    public Object getPathComponent(int element) {
+    public Serializable getPathComponent(int element) {
         int pathLength = getPathCount();
 
         if (element < 0 || element >= pathLength) {
@@ -267,7 +267,7 @@
      * the newly created TreePath. This will throw a NullPointerException if
      * child is null.
      */
-    public TreePath pathByAddingChild(Object child) {
+    public TreePath pathByAddingChild(Serializable child) {
         if (child == null) {
             throw new NullPointerException("Null child not allowed");
         }
diff -r 6a9bb9e3ec42 src/server-java/testapp-interactive/lib/nextapp/echo/extras/testapp/testscreen/TreeTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/extras/testapp/testscreen/TreeTest.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/extras/testapp/testscreen/TreeTest.java	Wed Nov 11 11:36:24 2009 +0000
@@ -29,6 +29,7 @@
 
 package nextapp.echo.extras.testapp.testscreen;
 
+import java.io.Serializable;
 import java.util.Iterator;
 
 import nextapp.echo.app.Component;
@@ -92,11 +93,11 @@
     
     static class EndlessOneNodeTreeModel extends AbstractTreeModel {
     
-        public Object getChild(Object parent, int index) {
+        public Serializable getChild(Serializable parent, int index) {
             return new Integer(((Integer)parent).intValue() + 1);
         }
 
-        public int getChildCount(Object parent) {
+        public int getChildCount(Serializable parent) {
             return 1;
         }
 
@@ -104,19 +105,19 @@
             return 1;
         }
 
-        public int getIndexOfChild(Object parent, Object child) {
+        public int getIndexOfChild(Serializable parent, Serializable child) {
             return 0;
         }
 
-        public Object getRoot() {
+        public Serializable getRoot() {
             return new Integer(0);
         }
 
-        public Object getValueAt(Object node, int column) {
+        public Serializable getValueAt(Serializable node, int column) {
             return node;
         }
 
-        public boolean isLeaf(Object object) {
+        public boolean isLeaf(Serializable object) {
             return false;
         }
     }
@@ -124,14 +125,14 @@
     private static TreeModel generateTenLevelsOneNodeTreeModel() {
         return new AbstractTreeModel() {
             
-            public Object getChild(Object parent, int index) {
+            public Serializable getChild(Serializable parent, int index) {
                 if (((Integer)parent).intValue() >= 10) {
                     return null;
                 }
                 return new Integer(((Integer)parent).intValue() + 1);
             }
             
-            public int getChildCount(Object parent) {
+            public int getChildCount(Serializable parent) {
                 if (((Integer)parent).intValue() >= 10) {
                     return 0;
                 }
@@ -142,19 +143,19 @@
                 return 1;
             }
             
-            public int getIndexOfChild(Object parent, Object child) {
+            public int getIndexOfChild(Serializable parent, Serializable child) {
                 return 0;
             }
             
-            public Object getRoot() {
+            public Serializable getRoot() {
                 return new Integer(0);
             }
             
-            public Object getValueAt(Object node, int column) {
+            public Serializable getValueAt(Serializable node, int column) {
                 return node;
             }
             
-            public boolean isLeaf(Object object) {
+            public boolean isLeaf(Serializable object) {
                 return false;
             }
         };
@@ -163,11 +164,11 @@
     private static TreeModel generateSimpleTreeTableModel() {
         return new AbstractTreeModel() {
 
-            public Object getChild(Object parent, int index) {
+            public Serializable getChild(Serializable parent, int index) {
                 return new Integer(index);
             }
 
-            public int getChildCount(Object parent) {
+            public int getChildCount(Serializable parent) {
                 int parentValue = ((Integer) parent).intValue();
                 return parentValue;
             }
@@ -176,23 +177,23 @@
                 return 5;
             }
             
-            public Object getValueAt(Object node, int column) {
+            public Serializable getValueAt(Serializable node, int column) {
                 if (0 == column) {
                     return node;
                 }
                 return ((Integer) node).intValue() + " - " + column;
             }
 
-            public int getIndexOfChild(Object parent, Object child) {
+            public int getIndexOfChild(Serializable parent, Serializable child) {
                 int childValue = ((Integer) child).intValue();
                 return childValue;
             }
 
-            public Object getRoot() {
+            public Serializable getRoot() {
                 return new Integer(4);
             }
 
-            public boolean isLeaf(Object object) {
+            public boolean isLeaf(Serializable object) {
                 int objectValue = ((Integer) object).intValue();
                 return objectValue == 0;
             }
@@ -202,11 +203,11 @@
     private static TreeModel generateSimpleTreeTableModelWithLongNodeValues() {
         return new AbstractTreeModel() {
             
-            public Object getChild(Object parent, int index) {
+            public Serializable getChild(Serializable parent, int index) {
                 return new Integer(index);
             }
             
-            public int getChildCount(Object parent) {
+            public int getChildCount(Serializable parent) {
                 int parentValue = ((Integer) parent).intValue();
                 return parentValue;
             }
@@ -215,23 +216,23 @@
                 return 5;
             }
             
-            public Object getValueAt(Object node, int column) {
+            public Serializable getValueAt(Serializable node, int column) {
                 if (0 == column) {
                     return node + " - Lorem ipsum dolor sit amet, consectetuer adipiscing elit.";
                 }
                 return ((Integer) node).intValue() + " - " + column;
             }
             
-            public int getIndexOfChild(Object parent, Object child) {
+            public int getIndexOfChild(Serializable parent, Serializable child) {
                 int childValue = ((Integer) child).intValue();
                 return childValue;
             }
             
-            public Object getRoot() {
+            public Serializable getRoot() {
                 return new Integer(4);
             }
             
-            public boolean isLeaf(Object object) {
+            public boolean isLeaf(Serializable object) {
                 int objectValue = ((Integer) object).intValue();
                 return objectValue == 0;
             }
diff -r 6a9bb9e3ec42 src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeRenderState.java
--- a/src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeRenderState.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeRenderState.java	Wed Nov 11 11:36:24 2009 +0000
@@ -1,5 +1,6 @@
 package nextapp.echo.extras.webcontainer.sync.component.tree;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -132,7 +133,7 @@
             }
             
             private int compareNodes(int index, TreePath path1, TreePath path2) {
-                Object commonParent = path1.getPathComponent(index - 1);
+            	Serializable commonParent = path1.getPathComponent(index - 1);
                 int index1 = tree.getModel().getIndexOfChild(commonParent, path1.getPathComponent(index));
                 int index2 = tree.getModel().getIndexOfChild(commonParent, path2.getPathComponent(index));
                 if (index1 < index2) {
diff -r 6a9bb9e3ec42 src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeStructureRenderer.java
--- a/src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeStructureRenderer.java	Wed Oct 28 15:29:12 2009 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/extras/webcontainer/sync/component/tree/TreeStructureRenderer.java	Wed Nov 11 11:36:24 2009 +0000
@@ -1,5 +1,6 @@
 package nextapp.echo.extras.webcontainer.sync.component.tree;
 
+import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
@@ -42,7 +43,7 @@
                 // header
                 renderNode(context, null, null, false);
             }
-            Object value = model.getRoot();
+            Serializable value = model.getRoot();
             renderNode(context, value, new TreePath(value), true);
             renderState.setFullRender(false);
             propertyElement.setAttribute("fr", "1");
@@ -55,7 +56,7 @@
         }
     }
     
-    protected void renderNode(Context context, Object value, TreePath path, boolean root) {
+    protected void renderNode(Context context, Serializable value, TreePath path, boolean root) {
         if (renderedPaths.contains(path)) {
             return;
         }
@@ -78,7 +79,7 @@
         if (expanded) {
             int childCount = model.getChildCount(value);
             for (int i = 0; i < childCount; ++i) {
-                Object childValue = model.getChild(value, i);
+            	Serializable childValue = model.getChild(value, i);
                 renderNode(context, childValue, path.pathByAddingChild(childValue), false);
             }
         }
@@ -87,7 +88,7 @@
         }
     }
     
-    protected Element doRenderNode(TreePath path, Component component, Context context, Object value, boolean root) {
+    protected Element doRenderNode(TreePath path, Component component, Context context, Serializable value, boolean root) {
         
         UserInstance userInstance = (UserInstance) context.get(UserInstance.class);
         
