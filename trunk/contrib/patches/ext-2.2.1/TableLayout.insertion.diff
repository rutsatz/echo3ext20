--- ext-all-debug.js	2010-08-02 10:58:30.777542408 +0100
+++ ext-all-debug.js	2010-08-03 08:51:26.646711745 +0100
@@ -16334,9 +16334,10 @@
         // we are laying out
         var tbody = this.table.tBodies[0];
         // make a copy of the rows and loop through them
-        var trows = [];
+        var trows = [], trowlengths = [];
         for (var i = 0; i < tbody.childNodes.length; i++) {
             trows.push(tbody.childNodes[i]);
+            trowlengths.push(0);
         }
         for (var i = 0; i < trows.length; i++) {
             var trow = trows[i];
@@ -16347,6 +16348,7 @@
             }
             for (var j = 0; j < tcells.length; j++) {
                 var tcell = tcells[j];
+                // if the cell content has been removed, remove it from the row
                 if (tcell.childNodes.length == 0) {
                     trow.removeChild(tcell);
                     this.renderedComponentCount--;
@@ -16369,10 +16371,75 @@
                             }
                         }
                     }
+                } else {
+                    // update the row lengths for this row and any following rows if it has rowSpan
+                    if (tcell.colSpan) {
+                    	trowlengths[i] = trowlengths[i] + tcell.colSpan;
+                    } else {
+                    	trowlengths[i] = trowlengths[i] + 1;
+                    }
+                    if (tcell.rowSpan) {
+                    	for (var o = i + 1; o < (i+tcell.rowSpan); o++) {
+                            if (tcell.colSpan) {
+                            	trowlengths[o] = trowlengths[o] + tcell.colSpan;
+                            } else {
+                            	trowlengths[o] = trowlengths[o] + 1;
+                            }
+                    	}
+                    }
                 }
             }
-            if (trow.childNodes.length == 0) {
+            if (trowlengths[i] == 0) {
                 tbody.removeChild(trow);
+            } else {
+            	// if we have less cells than the number of columns, move cells from next row (if there is one)
+            	if (trowlengths[i] < this.columns) {
+            		var rowToTake = i+1;
+            		while (trowlengths[i] < this.columns && trows.length > rowToTake) {
+            			var nextRow = trows[rowToTake];
+            			if (nextRow.childNodes.length > 0) {
+            				var firstChild = nextRow.childNodes[0];
+            				// if the cell content has been removed, remove it from the row
+                            if (firstChild.childNodes.length == 0) {
+	            				nextRow.removeChild(firstChild);
+                                this.renderedComponentCount--;
+                            } else {
+	            				nextRow.removeChild(firstChild);
+	            				trow.appendChild(firstChild);
+	            				// remove the columns from the lengths of the spanned rows
+	            				if (firstChild.rowSpan) {
+	            					for (var o = rowToTake + 1; o < (rowToTake+firstChild.rowSpan); o++) {
+	                                    if (tcell.colSpan) {
+	                                    	trowlengths[o] = trowlengths[o] - firstChild.colSpan;
+	                                    } else {
+	                                    	trowlengths[o] = trowlengths[o] - 1;
+	                                    }
+	                            	}
+	            				}
+	            				// remove the columns from the rowToTake and add to our columns
+	            				if (firstChild.colSpan) {
+	            					trowlengths[rowToTake] = trowlengths[rowToTake] - firstChild.colSpan;
+	            					trowlengths[i] = trowlengths[i] + firstChild.colSpan;
+	            				} else {
+	            					trowlengths[rowToTake] = trowlengths[rowToTake] - 1;
+	            					trowlengths[i] = trowlengths[i] + 1;
+	            				}
+	            				// add the columns to the length of the spanned rows
+	            				if (firstChild.rowSpan) {
+	            					for (var o = i + 1; o < (i+firstChild.rowSpan); o++) {
+	                                    if (tcell.colSpan) {
+	                                    	trowlengths[o] = trowlengths[o] + firstChild.colSpan;
+	                                    } else {
+	                                    	trowlengths[o] = trowlengths[o] + 1;
+	                                    }
+	                            	}
+	            				}
+                            }
+            			} else {
+            				rowToTake++;
+            			}
+            		}
+            	}
             }
         }
 
@@ -16381,31 +16448,36 @@
 
     // private
     getRow : function(index){
-        var row = this.table.tBodies[0].childNodes[index];
-        if(!row){
+        var row = null, tbody = this.table.tBodies[0];
+        while (tbody.childNodes.length <= index) {
             row = document.createElement('tr');
-            this.table.tBodies[0].appendChild(row);
+            tbody.appendChild(row);
         }
+        row = tbody.childNodes[index];
         return row;
     },
 
     // private
     getNextCell : function(c, position){
-    	var trElement;
+    	var trElement,rowNum,positionNonSpan, cellPosition;
     	// detect attempts to insert a row, or column into a previous row
     	if (position < this.renderedComponentCount) {
-    	    var positionNonSpan = this.getPositionNonSpan(position);
-    	    var cellPosition = positionNonSpan % this.columns;
-    	    var rowNum = parseInt(positionNonSpan / this.columns);
+    	    positionNonSpan = this.getPositionNonSpan(position);
+    	    cellPosition = positionNonSpan % this.columns;
+    	    rowNum = parseInt(positionNonSpan / this.columns);
     	    var tbody = this.table.tBodies[0];
     	    if (cellPosition == 0) {
-    	        trElement = this.table.insertRow(rowNum);
-    	        // need to update the internal cells variable
-    	        var newCellsRow = [];
-    	        for (var i = 0; i < this.columns; i++) {
-    	            newCellsRow.push(true);
+    	        trElement = tbody.childNodes[rowNum];
+    	        if (!trElement) {
+    	        	trElement = document.createElement('tr');
+    	        	tbody.appendChild(trElement);
+    	            // need to update the internal cells variable
+    	            var newCellsRow = [];
+    	            for (var i = 0; i < this.columns; i++) {
+    	            	newCellsRow.push(true);
+    	            }
+    	            this.cells.splice(rowNum, 0, newCellsRow);
     	        }
-    	        this.cells.splice(rowNum, 0, newCellsRow);
     	    }
     	    else {
     	        trElement = tbody.childNodes[rowNum];
@@ -16423,6 +16495,7 @@
     	            this.cells[rowIndex][colIndex] = true;
     	        }
     	    }
+    	    rowNum = curRow;
     	    trElement = this.getRow(curRow);
     	}
 		var td = document.createElement('td');
@@ -16449,7 +16522,40 @@
         if (c.cellVAlign) {
             td.vAlign = c.cellVAlign;
         }
-		trElement.appendChild(td);
+        if (typeof cellPosition == 'undefined' || cellPosition >= trElement.childNodes.length) {
+        	trElement.appendChild(td);
+        } else {
+        	var existingElement = trElement.childNodes[cellPosition];
+        	trElement.insertBefore(td, existingElement);
+        	// check if we've overflowed the columns and so need to re-arrange the rest of the table
+        	while (trElement.childNodes.length > this.columns) {
+        		var overflowed = [];
+        		for (var o = this.columns; o < trElement.childNodes.length; o++) {
+        			overflowed.push(trElement.childNodes[o]);
+        		}
+        		for (var o = 0; o < overflowed.length; o++) {
+        			trElement.removeChild(overflowed[o]);
+        		}
+        		
+        		if (trElement.nextSibling && trElement.nextSibling.nodeName && trElement.nextSibling.nodeName == "TR") {
+        			trElement = trElement.nextSibling;
+        		} else {
+        			var nextTr = document.createElement('tr');
+        			trElement.parentNode.appendChild(nextTr);
+        			trElement = nextTr;
+        		}
+        		if (trElement.childNodes.length == 0) {
+	        		for (var o = 0; o < overflowed.length; o++) {
+	        			trElement.appendChild(overflowed[o]);
+	        		}
+        		} else {
+        			var firstChild = trElement.childNodes[0];
+	        		for (var o = (overflowed.length - 1); o >= 0; o--) {
+	        			trElement.insertBefore(overflowed[o], firstChild);
+	        		}
+        		}
+        	}
+        }
 		return td;
 	},
     
