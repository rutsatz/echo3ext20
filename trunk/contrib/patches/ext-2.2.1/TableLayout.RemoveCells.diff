--- ext-all-debug.js	2009-05-26 09:30:33.000000000 +0100
+++ ext-all-debug.js	2009-05-26 09:40:06.000000000 +0100
@@ -16179,6 +16179,7 @@
         this.currentRow = 0;
         this.currentColumn = 0;
         this.cells = [];
+        this.renderedComponentCount = 0;
     },
 
     // private
@@ -16211,40 +16212,48 @@
                 this.table.cellSpacing = this.cellSpacing;
             }
         }
-        /*
-         * If the total number of children is less than our current
-         * total tds, then remove that number of tds from the end.
-         * N.B. - that means that this container does NOT support
-         * arbitrary removal of components, but only those
-         * from the end.
-         */
-        while (len < this.childCount && this.table.tBodies.length > 0) {
-            /*
-             * Remove the last td of the last row,
-             * removing the tr if it becomes empty.
-             */
-            var trows = this.table.tBodies[0].childNodes;
-            var trow = trows[trows.length -1];
-            var tcells = trow.childNodes;
-            trow.removeChild(tcells[tcells.length - 1]);
-
-            this.childCount--;
-            this.currentColumn--;
-
-            if (trow.childNodes.length ==0) {
-                this.table.tBodies[0].removeChild(trow);
-                this.currentRow--;
-                this.currentColumn = this.columns - 1;
-            }
-
-            /*
-             * Remove the last cell of the last row
-             * of the internal cells variable, removing
-             * the row if it becomes empty.
-             */
-            this.cells[this.cells.length-1].pop();
-            if (this.cells[this.cells.length-1].length == 0) {
-                this.cells.pop();
+        // remove any empty tds, and trs if they have no tds
+        // these have been caused by removes from the container
+        // we are laying out
+        var tbody = this.table.tBodies[0];
+        // make a copy of the rows and loop through them
+        var trows = [];
+        for (var i = 0; i < tbody.childNodes.length; i++) {
+            trows.push(tbody.childNodes[i]);
+        }
+        for (var i = 0; i < trows.length; i++) {
+            var trow = trows[i];
+            // make a copy of the cells and loop through them
+            var tcells = [];
+            for (var j = 0; j < trow.childNodes.length; j++) {
+                tcells.push(trow.childNodes[j]);
+            }
+            for (var j = 0; j < tcells.length; j++) {
+                var tcell = tcells[j];
+                if (tcell.childNodes.length == 0) {
+                    trow.removeChild(tcell);
+                    this.renderedComponentCount--;
+                    this.currentColumn = trow.childNodes.length - 1;
+                    if (this.currentColumn < 0) {
+                        this.currentColumn = 0;
+                    }
+                    /*
+                     * Remove the last cell of the last row
+                     * of the internal cells variable, removing
+                     * the row if it becomes empty.
+                     * FIXME - does not work for colspan / rowspan
+                     */
+                    this.cells[this.cells.length-1].pop();
+                    if (this.cells[this.cells.length-1].length == 0) {
+                        this.cells.pop();
+                        if (this.currentRow > 0) {
+                        	this.currentRow--;
+                        }
+                    }
+                }
+            }
+            if (trow.childNodes.length == 0) {
+                tbody.removeChild(trow);
             }
         }
 
@@ -16262,17 +16271,41 @@
     },
 
     // private
-	getNextCell : function(c){
-		var cell = this.getNextNonSpan(this.currentColumn, this.currentRow);
-		var curCol = this.currentColumn = cell[0], curRow = this.currentRow = cell[1];
-		for(var rowIndex = curRow; rowIndex < curRow + (c.rowspan || 1); rowIndex++){
-			if(!this.cells[rowIndex]){
-				this.cells[rowIndex] = [];
-			}
-			for(var colIndex = curCol; colIndex < curCol + (c.colspan || 1); colIndex++){
-				this.cells[rowIndex][colIndex] = true;
-			}
-		}
+    getNextCell : function(c, position){
+    	var trElement;
+    	// detect attempts to insert a row, or column into a previous row
+    	if (position < this.renderedComponentCount) {
+    	    var positionNonSpan = this.getPositionNonSpan(position);
+    	    var cellPosition = positionNonSpan % this.columns;
+    	    var rowNum = parseInt(positionNonSpan / this.columns);
+    	    var tbody = this.table.tBodies[0];
+    	    if (cellPosition == 0) {
+    	        trElement = this.table.insertRow(rowNum);
+    	        // need to update the internal cells variable
+    	        var newCellsRow = [];
+    	        for (var i = 0; i < this.columns; i++) {
+    	            newCellsRow.push(true);
+    	        }
+    	        this.cells.splice(rowNum, 0, newCellsRow);
+    	    }
+    	    else {
+    	        trElement = tbody.childNodes[rowNum];
+    	    }
+    	}
+    	else {
+    	    // not inserting in the middle, regular 'append to end' processing
+    	    var cell = this.getNextNonSpan(this.currentColumn, this.currentRow);
+    	    var curCol = this.currentColumn = cell[0], curRow = this.currentRow = cell[1];
+    	    for(var rowIndex = curRow; rowIndex < curRow + (c.rowspan || 1); rowIndex++){
+    	        if(!this.cells[rowIndex]){
+    	            this.cells[rowIndex] = [];
+    	        }
+    	        for(var colIndex = curCol; colIndex < curCol + (c.colspan || 1); colIndex++){
+    	            this.cells[rowIndex][colIndex] = true;
+    	        }
+    	    }
+    	    trElement = this.getRow(curRow);
+    	}
 		var td = document.createElement('td');
 		if(c.cellId){
 			td.id = c.cellId;
@@ -16297,7 +16330,7 @@
         if (c.cellVAlign) {
             td.vAlign = c.cellVAlign;
         }
-		this.getRow(curRow).appendChild(td);
+		trElement.appendChild(td);
 		return td;
 	},
     
@@ -16314,11 +16347,28 @@
 		}
 		return [colIndex, rowIndex];
 	},
+	
+	// private
+	getPositionNonSpan: function(position) {
+	    var ret = 0;
+	    var count = this.container.items.getCount();
+	    for (var i = 0; i < count && i < position; i++) {
+	        var child = this.container.items.get(i);
+	        if (child.colspan) {
+	            ret += child.colspan;
+	        }
+	        else {
+	            ret += 1;
+	        }
+	    }
+	    return ret;
+	},
 
     // private
     renderItem : function(c, position, target){
         if(c && !c.rendered){
-            c.render(this.getNextCell(c));
+            c.render(this.getNextCell(c, position));
+            this.renderedComponentCount++;
             if(this.extraCls){
                 var t = c.getPositionEl ? c.getPositionEl() : c;
                 t.addClass(this.extraCls);
