--- ext-2.2.1-orig/ext-all-debug.js	2010-09-19 20:32:33.000000000 +0100
+++ ext-2.2.1/ext-all-debug.js	2010-09-28 22:02:40.000000000 +0100
@@ -2,7 +2,7 @@
  * Ext JS Library 2.2.1
  * Copyright(c) 2006-2009, Ext JS, LLC.
  * licensing@extjs.com
- * 
+ *
  * http://extjs.com/license
  */
 
@@ -72,7 +72,7 @@
     };
 
     // build as dom
-    
+
     var createDom = function(o, parentNode){
         var el;
         if (Ext.isArray(o)) {                       // Allow Arrays of siblings to be inserted
@@ -125,7 +125,7 @@
         trs = tbs + '<tr>',
         tre = '</tr>'+tbe;
 
-    
+
     var insertIntoTable = function(tag, where, el, html){
         if(!tempTableEl){
             tempTableEl = document.createElement('div');
@@ -190,15 +190,15 @@
 
 
     return {
-    
+
     useDom : false,
 
-    
+
     markup : function(o){
         return createHtml(o);
     },
 
-    
+
     applyStyles : function(el, styles){
         if(styles){
            el = Ext.fly(el);
@@ -218,7 +218,7 @@
         }
     },
 
-    
+
     insertHtml : function(where, el, html){
         where = where.toLowerCase();
         if(el.insertAdjacentHTML){
@@ -281,17 +281,17 @@
             throw 'Illegal insertion point -> "' + where + '"';
     },
 
-    
+
     insertBefore : function(el, o, returnElement){
         return this.doInsert(el, o, returnElement, "beforeBegin");
     },
 
-    
+
     insertAfter : function(el, o, returnElement){
         return this.doInsert(el, o, returnElement, "afterEnd", "nextSibling");
     },
 
-    
+
     insertFirst : function(el, o, returnElement){
         return this.doInsert(el, o, returnElement, "afterBegin", "firstChild");
     },
@@ -310,7 +310,7 @@
         return returnElement ? Ext.get(newNode, true) : newNode;
     },
 
-    
+
     append : function(el, o, returnElement){
         el = Ext.getDom(el);
         var newNode;
@@ -324,14 +324,14 @@
         return returnElement ? Ext.get(newNode, true) : newNode;
     },
 
-    
+
     overwrite : function(el, o, returnElement){
         el = Ext.getDom(el);
         el.innerHTML = createHtml(o);
         return returnElement ? Ext.get(el.firstChild, true) : el.firstChild;
     },
 
-    
+
     createTemplate : function(o){
         var html = createHtml(o);
         return new Ext.Template(html);
@@ -355,14 +355,14 @@
         }
         html = buf.join('');
     }
-    
+
     this.html = html;
     if(this.compiled){
         this.compile();
     }
 };
 Ext.Template.prototype = {
-    
+
     applyTemplate : function(values){
         if(this.compiled){
             return this.compiled(values);
@@ -396,7 +396,7 @@
         return this.html.replace(this.re, fn);
     },
 
-    
+
     set : function(html, compile){
         this.html = html;
         this.compiled = null;
@@ -406,13 +406,13 @@
         return this;
     },
 
-    
+
     disableFormats : false,
 
-    
+
     re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,
 
-    
+
     compile : function(){
         var fm = Ext.util.Format;
         var useF = this.disableFormats !== true;
@@ -452,22 +452,22 @@
         return this[fnName](value, allValues);
     },
 
-    
+
     insertFirst: function(el, values, returnElement){
         return this.doInsert('afterBegin', el, values, returnElement);
     },
 
-    
+
     insertBefore: function(el, values, returnElement){
         return this.doInsert('beforeBegin', el, values, returnElement);
     },
 
-    
+
     insertAfter : function(el, values, returnElement){
         return this.doInsert('afterEnd', el, values, returnElement);
     },
 
-    
+
     append : function(el, values, returnElement){
         return this.doInsert('beforeEnd', el, values, returnElement);
     },
@@ -478,7 +478,7 @@
         return returnEl ? Ext.get(newNode, true) : newNode;
     },
 
-    
+
     overwrite : function(el, values, returnElement){
         el = Ext.getDom(el);
         el.innerHTML = this.applyTemplate(values);
@@ -533,17 +533,17 @@
 
     function children(d){
         var n = d.firstChild, ni = -1;
- 	    while(n){
- 	        var nx = n.nextSibling;
- 	        if(n.nodeType == 3 && !nonSpace.test(n.nodeValue)){
- 	            d.removeChild(n);
- 	        }else{
- 	            n.nodeIndex = ++ni;
- 	        }
- 	        n = nx;
- 	    }
- 	    return this;
- 	};
+       while(n){
+           var nx = n.nextSibling;
+           if(n.nodeType == 3 && !nonSpace.test(n.nodeValue)){
+               d.removeChild(n);
+           }else{
+               n.nodeIndex = ++ni;
+           }
+           n = nx;
+       }
+       return this;
+   };
 
     function byClassName(c, a, v){
         if(!v){
@@ -804,7 +804,7 @@
         getStyle : function(el, name){
             return Ext.fly(el).getStyle(name);
         },
-        
+
         compile : function(path, type){
             type = type || "select";
 
@@ -878,7 +878,7 @@
             return f;
         },
 
-        
+
         select : function(path, root, type){
             if(!root || root == document){
                 root = document;
@@ -907,12 +907,12 @@
             return results;
         },
 
-        
+
         selectNode : function(path, root){
             return Ext.DomQuery.select(path, root)[0];
         },
 
-        
+
         selectValue : function(path, root, defaultValue){
             path = path.replace(trimRe, "");
             if(!valueCache[path]){
@@ -924,13 +924,13 @@
             return ((v === null||v === undefined||v==='') ? defaultValue : v);
         },
 
-        
+
         selectNumber : function(path, root, defaultValue){
             var v = Ext.DomQuery.selectValue(path, root, defaultValue || 0);
             return parseFloat(v);
         },
 
-        
+
         is : function(el, ss){
             if(typeof el == "string"){
                 el = document.getElementById(el);
@@ -940,7 +940,7 @@
             return isArray ? (result.length == el.length) : (result.length > 0);
         },
 
-        
+
         filter : function(els, ss, nonMatches){
             ss = ss.replace(trimRe, "");
             if(!simpleCache[ss]){
@@ -950,7 +950,7 @@
             return nonMatches ? quickDiff(result, els) : result;
         },
 
-        
+
         matchers : [{
                 re: /^\.([\w-]+)/,
                 select: 'n = byClassName(n, null, " {1} ");'
@@ -969,7 +969,7 @@
             }
         ],
 
-        
+
         operators : {
             "=" : function(a, v){
                 return a == v;
@@ -997,7 +997,7 @@
             }
         },
 
-        
+
         pseudos : {
             "first-child" : function(c){
                 var r = [], ri = -1, n;
@@ -1187,14 +1187,14 @@
 
 
 Ext.util.Observable = function(){
-    
+
     if(this.listeners){
         this.on(this.listeners);
         delete this.listeners;
     }
 };
 Ext.util.Observable.prototype = {
-    
+
     fireEvent : function(){
         if(this.eventsSuspended !== true){
             var ce = this.events[arguments[0].toLowerCase()];
@@ -1208,7 +1208,7 @@
     // private
     filterOptRe : /^(?:scope|delay|buffer|single)$/,
 
-    
+
     addListener : function(eventName, fn, scope, o){
         if(typeof eventName == "object"){
             o = eventName;
@@ -1236,7 +1236,7 @@
         ce.addListener(fn, scope, o);
     },
 
-    
+
     removeListener : function(eventName, fn, scope){
         var ce = this.events[eventName.toLowerCase()];
         if(typeof ce == "object"){
@@ -1244,7 +1244,7 @@
         }
     },
 
-    
+
     purgeListeners : function(){
         for(var evt in this.events){
             if(typeof this.events[evt] == "object"){
@@ -1253,7 +1253,7 @@
         }
     },
 
-    
+
     relayEvents : function(o, events){
         var createHandler = function(ename){
             return function(){
@@ -1267,7 +1267,7 @@
         }
     },
 
-    
+
     addEvents : function(o){
         if(!this.events){
             this.events = {};
@@ -1283,18 +1283,18 @@
         }
     },
 
-    
+
     hasListener : function(eventName){
         var e = this.events[eventName];
         return typeof e == "object" && e.listeners.length > 0;
     },
 
-    
+
     suspendEvents : function(){
         this.eventsSuspended = true;
     },
 
-    
+
     resumeEvents : function(){
         this.eventsSuspended = false;
     },
@@ -1739,7 +1739,7 @@
     var propRe = /^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|normalized|args|delegate)$/;
     var pub = {
 
-    
+
         addListener : function(element, eventName, fn, scope, options){
             if(typeof eventName == "object"){
                 var o = eventName;
@@ -1760,17 +1760,17 @@
             return listen(element, eventName, options, fn, scope);
         },
 
-        
+
         removeListener : function(element, eventName, fn, scope){
             return removeListener(element, eventName, fn, scope);
         },
 
-        
+
         removeAll : function(element){
             return removeAll(element);
         },
 
-        
+
         onDocumentReady : function(fn, scope, options){
             if(docReadyState){ // if it already fired
                 docReadyEvent.addListener(fn, scope, options);
@@ -1787,13 +1787,13 @@
             }
             docReadyEvent.addListener(fn, scope, options);
         },
-        
+
         // private
         doResizeEvent: function(){
             resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
         },
 
-        
+
         onWindowResize : function(fn, scope, options){
             if(!resizeEvent){
                 resizeEvent = new Ext.util.Event();
@@ -1814,7 +1814,7 @@
             }
         },
 
-        
+
         onTextResize : function(fn, scope, options){
             if(!textEvent){
                 textEvent = new Ext.util.Event();
@@ -1832,7 +1832,7 @@
             textEvent.addListener(fn, scope, options);
         },
 
-        
+
         removeResizeListener : function(fn, scope){
             if(resizeEvent){
                 resizeEvent.removeListener(fn, scope);
@@ -1845,14 +1845,14 @@
                 resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
             }
         },
-        
+
         ieDeferSrc : false,
-        
+
         textResizeInterval : 50
     };
-     
+
     pub.on = pub.addListener;
-    
+
     pub.un = pub.removeListener;
 
     pub.stoppedMouseDownEvent = new Ext.util.Event();
@@ -1929,196 +1929,196 @@
     };
 
     Ext.EventObjectImpl.prototype = {
-        
+
         browserEvent : null,
-        
+
         button : -1,
-        
+
         shiftKey : false,
-        
+
         ctrlKey : false,
-        
+
         altKey : false,
 
-        
+
         BACKSPACE: 8,
-        
+
         TAB: 9,
-        
+
         NUM_CENTER: 12,
-        
+
         ENTER: 13,
-        
+
         RETURN: 13,
-        
+
         SHIFT: 16,
-        
+
         CTRL: 17,
         CONTROL : 17, // legacy
-        
+
         ALT: 18,
-        
+
         PAUSE: 19,
-        
+
         CAPS_LOCK: 20,
-        
+
         ESC: 27,
-        
+
         SPACE: 32,
-        
+
         PAGE_UP: 33,
         PAGEUP : 33, // legacy
-        
+
         PAGE_DOWN: 34,
         PAGEDOWN : 34, // legacy
-        
+
         END: 35,
-        
+
         HOME: 36,
-        
+
         LEFT: 37,
-        
+
         UP: 38,
-        
+
         RIGHT: 39,
-        
+
         DOWN: 40,
-        
+
         PRINT_SCREEN: 44,
-        
+
         INSERT: 45,
-        
+
         DELETE: 46,
-        
+
         ZERO: 48,
-        
+
         ONE: 49,
-        
+
         TWO: 50,
-        
+
         THREE: 51,
-        
+
         FOUR: 52,
-        
+
         FIVE: 53,
-        
+
         SIX: 54,
-        
+
         SEVEN: 55,
-        
+
         EIGHT: 56,
-        
+
         NINE: 57,
-        
+
         A: 65,
-        
+
         B: 66,
-        
+
         C: 67,
-        
+
         D: 68,
-        
+
         E: 69,
-        
+
         F: 70,
-        
+
         G: 71,
-        
+
         H: 72,
-        
+
         I: 73,
-        
+
         J: 74,
-        
+
         K: 75,
-        
+
         L: 76,
-        
+
         M: 77,
-        
+
         N: 78,
-        
+
         O: 79,
-        
+
         P: 80,
-        
+
         Q: 81,
-        
+
         R: 82,
-        
+
         S: 83,
-        
+
         T: 84,
-        
+
         U: 85,
-        
+
         V: 86,
-        
+
         W: 87,
-        
+
         X: 88,
-        
+
         Y: 89,
-        
+
         Z: 90,
-        
+
         CONTEXT_MENU: 93,
-        
+
         NUM_ZERO: 96,
-        
+
         NUM_ONE: 97,
-        
+
         NUM_TWO: 98,
-        
+
         NUM_THREE: 99,
-        
+
         NUM_FOUR: 100,
-        
+
         NUM_FIVE: 101,
-        
+
         NUM_SIX: 102,
-        
+
         NUM_SEVEN: 103,
-        
+
         NUM_EIGHT: 104,
-        
+
         NUM_NINE: 105,
-        
+
         NUM_MULTIPLY: 106,
-        
+
         NUM_PLUS: 107,
-        
+
         NUM_MINUS: 109,
-        
+
         NUM_PERIOD: 110,
-        
+
         NUM_DIVISION: 111,
-        
+
         F1: 112,
-        
+
         F2: 113,
-        
+
         F3: 114,
-        
+
         F4: 115,
-        
+
         F5: 116,
-        
+
         F6: 117,
-        
+
         F7: 118,
-        
+
         F8: 119,
-        
+
         F9: 120,
-        
+
         F10: 121,
-        
+
         F11: 122,
-        
+
         F12: 123,
 
-           
+
         setEvent : function(e){
             if(e == this || (e && e.browserEvent)){ // already wrapped
                 return e;
@@ -2155,7 +2155,7 @@
             return this;
         },
 
-        
+
         stopEvent : function(){
             if(this.browserEvent){
                 if(this.browserEvent.type == 'mousedown'){
@@ -2165,14 +2165,14 @@
             }
         },
 
-        
+
         preventDefault : function(){
             if(this.browserEvent){
                 E.preventDefault(this.browserEvent);
             }
         },
 
-        
+
         isNavKeyPress : function(){
             var k = this.keyCode;
             k = Ext.isSafari ? (safariKeys[k] || k) : k;
@@ -2189,7 +2189,7 @@
             (k >= 44 && k <= 45);
         },
 
-        
+
         stopPropagation : function(){
             if(this.browserEvent){
                 if(this.browserEvent.type == 'mousedown'){
@@ -2199,28 +2199,28 @@
             }
         },
 
-        
+
         getCharCode : function(){
             return this.charCode || this.keyCode;
         },
 
-        
+
         getKey : function(){
             var k = this.keyCode || this.charCode;
             return Ext.isSafari ? (safariKeys[k] || k) : k;
         },
 
-        
+
         getPageX : function(){
             return this.xy[0];
         },
 
-        
+
         getPageY : function(){
             return this.xy[1];
         },
 
-        
+
         getTime : function(){
             if(this.browserEvent){
                 return E.getTime(this.browserEvent);
@@ -2228,17 +2228,17 @@
             return null;
         },
 
-        
+
         getXY : function(){
             return this.xy;
         },
 
-        
+
         getTarget : function(selector, maxDepth, returnEl){
             return selector ? Ext.fly(this.target).findParent(selector, maxDepth, returnEl) : (returnEl ? Ext.get(this.target) : this.target);
         },
 
-        
+
         getRelatedTarget : function(){
             if(this.browserEvent){
                 return E.getRelatedTarget(this.browserEvent);
@@ -2246,24 +2246,24 @@
             return null;
         },
 
-        
+
         getWheelDelta : function(){
             var e = this.browserEvent;
             var delta = 0;
-            if(e.wheelDelta){ 
+            if(e.wheelDelta){
                 delta = e.wheelDelta/120;
-            }else if(e.detail){ 
+            }else if(e.detail){
                 delta = -e.detail/3;
             }
             return delta;
         },
 
-        
+
         hasModifier : function(){
             return ((this.ctrlKey || this.altKey) || this.shiftKey) ? true : false;
         },
 
-        
+
         within : function(el, related, allowEl){
             var t = this[related ? "getRelatedTarget" : "getTarget"]();
             return t && ((allowEl ? (t === Ext.getDom(el)) : false) || Ext.fly(el).contains(t));
@@ -2299,35 +2299,35 @@
         return Ext.Element.cache[id];
     }
 
-    
+
     this.dom = dom;
 
-    
+
     this.id = id || Ext.id(dom);
 };
 
 var El = Ext.Element;
 
 El.prototype = {
-    
+
     originalDisplay : "",
 
     visibilityMode : 1,
-    
+
     defaultUnit : "px",
-    
+
     setVisibilityMode : function(visMode){
         this.visibilityMode = visMode;
         return this;
     },
-    
+
     enableDisplayMode : function(display){
         this.setVisibilityMode(El.DISPLAY);
         if(typeof display != "undefined") this.originalDisplay = display;
         return this;
     },
 
-    
+
     findParent : function(simpleSelector, maxDepth, returnEl){
         var p = this.dom, b = document.body, depth = 0, dq = Ext.DomQuery, stopEl;
         maxDepth = maxDepth || 50;
@@ -2346,31 +2346,31 @@
     },
 
 
-    
+
     findParentNode : function(simpleSelector, maxDepth, returnEl){
         var p = Ext.fly(this.dom.parentNode, '_internal');
         return p ? p.findParent(simpleSelector, maxDepth, returnEl) : null;
     },
 
-    
+
     up : function(simpleSelector, maxDepth){
         return this.findParentNode(simpleSelector, maxDepth, true);
     },
 
 
 
-    
+
     is : function(simpleSelector){
         return Ext.DomQuery.is(this.dom, simpleSelector);
     },
 
-    
+
     animate : function(args, duration, onComplete, easing, animType){
         this.anim(args, {duration: duration, callback: onComplete, easing: easing}, animType);
         return this;
     },
 
-    
+
     anim : function(args, opt, animType, defaultDur, defaultEase, cb){
         animType = animType || 'run';
         opt = opt || {};
@@ -2393,27 +2393,27 @@
         return !a[i] ? false : (typeof a[i] == "object" ? a[i]: {duration: a[i+1], callback: a[i+2], easing: a[i+3]});
     },
 
-    
+
     clean : function(forceReclean){
         if(this.isCleaned && forceReclean !== true){
             return this;
         }
         var ns = /\S/;
         var d = this.dom, n = d.firstChild, ni = -1;
- 	    while(n){
- 	        var nx = n.nextSibling;
- 	        if(n.nodeType == 3 && !ns.test(n.nodeValue)){
- 	            d.removeChild(n);
- 	        }else{
- 	            n.nodeIndex = ++ni;
- 	        }
- 	        n = nx;
- 	    }
- 	    this.isCleaned = true;
- 	    return this;
- 	},
+       while(n){
+           var nx = n.nextSibling;
+           if(n.nodeType == 3 && !ns.test(n.nodeValue)){
+               d.removeChild(n);
+           }else{
+               n.nodeIndex = ++ni;
+           }
+           n = nx;
+       }
+       this.isCleaned = true;
+       return this;
+   },
+
 
-    
     scrollIntoView : function(container, hscroll){
         var c = Ext.getDom(container) || Ext.getBody().dom;
         var el = this.dom;
@@ -2431,14 +2431,14 @@
         var cr = cl + c.clientWidth;
 
         if(el.offsetHeight > ch || t < ct){
-        	c.scrollTop = t;
+          c.scrollTop = t;
         }else if(b > cb){
             c.scrollTop = b-ch;
         }
         c.scrollTop = c.scrollTop; // corrects IE, other browsers will ignore
 
         if(hscroll !== false){
-			if(el.offsetWidth > c.clientWidth || l < cl){
+      if(el.offsetWidth > c.clientWidth || l < cl){
                 c.scrollLeft = l;
             }else if(r > cr){
                 c.scrollLeft = r-c.clientWidth;
@@ -2453,7 +2453,7 @@
         Ext.fly(child, '_scrollChildIntoView').scrollIntoView(this, hscroll);
     },
 
-    
+
     autoHeight : function(animate, duration, onComplete, easing){
         var oldHeight = this.getHeight();
         this.clip();
@@ -2477,13 +2477,13 @@
         return this;
     },
 
-    
+
     contains : function(el){
         if(!el){return false;}
         return D.isAncestor(this.dom, el.dom ? el.dom : el);
     },
 
-    
+
     isVisible : function(deep) {
         var vis = !(this.getStyle("visibility") == "hidden" || this.getStyle("display") == "none");
         if(deep !== true || !vis){
@@ -2499,47 +2499,47 @@
         return true;
     },
 
-    
+
     select : function(selector, unique){
         return El.select(selector, unique, this.dom);
     },
 
-    
+
     query : function(selector){
         return Ext.DomQuery.select(selector, this.dom);
     },
 
-    
+
     child : function(selector, returnDom){
         var n = Ext.DomQuery.selectNode(selector, this.dom);
         return returnDom ? n : Ext.get(n);
     },
 
-    
+
     down : function(selector, returnDom){
         var n = Ext.DomQuery.selectNode(" > " + selector, this.dom);
         return returnDom ? n : Ext.get(n);
     },
 
-    
+
     initDD : function(group, config, overrides){
         var dd = new Ext.dd.DD(Ext.id(this.dom), group, config);
         return Ext.apply(dd, overrides);
     },
 
-    
+
     initDDProxy : function(group, config, overrides){
         var dd = new Ext.dd.DDProxy(Ext.id(this.dom), group, config);
         return Ext.apply(dd, overrides);
     },
 
-    
+
     initDDTarget : function(group, config, overrides){
         var dd = new Ext.dd.DDTarget(Ext.id(this.dom), group, config);
         return Ext.apply(dd, overrides);
     },
 
-    
+
      setVisible : function(visible, animate){
         if(!animate || !A){
             if(this.visibilityMode == El.DISPLAY){
@@ -2572,18 +2572,18 @@
         return this;
     },
 
-    
+
     isDisplayed : function() {
         return this.getStyle("display") != "none";
     },
 
-    
+
     toggle : function(animate){
         this.setVisible(!this.isVisible(), this.preanim(arguments, 0));
         return this;
     },
 
-    
+
     setDisplayed : function(value) {
         if(typeof value == "boolean"){
            value = value ? this.originalDisplay : "none";
@@ -2592,7 +2592,7 @@
         return this;
     },
 
-    
+
     focus : function() {
         try{
             this.dom.focus();
@@ -2600,7 +2600,7 @@
         return this;
     },
 
-    
+
     blur : function() {
         try{
             this.dom.blur();
@@ -2608,7 +2608,7 @@
         return this;
     },
 
-    
+
     addClass : function(className){
         var originalClassName = this.dom.className;
         var start = new Date().getTime();
@@ -2617,7 +2617,7 @@
         if(Ext.isArray(className)){
             isArray = true;
             for(var i = 0, len = className.length; i < len; i++) {
-            	this.addClass(className[i]);
+              this.addClass(className[i]);
             }
         }else{
             if(className && !this.hasClass(className)){
@@ -2628,27 +2628,27 @@
         return this;
     },
 
-    
+
     radioClass : function(className){
         var siblings = this.dom.parentNode.childNodes;
         for(var i = 0; i < siblings.length; i++) {
-        	var s = siblings[i];
-        	if(s.nodeType == 1){
-        	    Ext.get(s).removeClass(className);
-        	}
+          var s = siblings[i];
+          if(s.nodeType == 1){
+              Ext.get(s).removeClass(className);
+          }
         }
         this.addClass(className);
         return this;
     },
 
-    
+
     removeClass : function(className){
         if(!className || !this.dom.className){
             return this;
         }
         if(Ext.isArray(className)){
             for(var i = 0, len = className.length; i < len; i++) {
-            	this.removeClass(className[i]);
+              this.removeClass(className[i]);
             }
         }else{
             if(this.hasClass(className)){
@@ -2667,7 +2667,7 @@
     // private
     classReCache: {},
 
-    
+
     toggleClass : function(className){
         if(this.hasClass(className)){
             this.removeClass(className);
@@ -2677,19 +2677,19 @@
         return this;
     },
 
-    
+
     hasClass : function(className){
         return className && (' '+this.dom.className+' ').indexOf(' '+className+' ') != -1;
     },
 
-    
+
     replaceClass : function(oldClassName, newClassName){
         this.removeClass(oldClassName);
         this.addClass(newClassName);
         return this;
     },
 
-    
+
     getStyles : function(){
         var a = arguments, len = a.length, r = {};
         for(var i = 0; i < len; i++){
@@ -2698,7 +2698,7 @@
         return r;
     },
 
-    
+
     getStyle : function(){
         return view && view.getComputedStyle ?
             function(prop){
@@ -2746,7 +2746,7 @@
             };
     }(),
 
-    
+
     setStyle : function(prop, value){
         if(typeof prop == "string"){
             var camel;
@@ -2768,35 +2768,35 @@
         return this;
     },
 
-    
+
     applyStyles : function(style){
         Ext.DomHelper.applyStyles(this.dom, style);
         return this;
     },
 
-    
+
     getX : function(){
         return D.getX(this.dom);
     },
 
-    
+
     getY : function(){
         return D.getY(this.dom);
     },
 
-    
+
     getXY : function(){
         return D.getXY(this.dom);
     },
 
-    
+
     getOffsetsTo : function(el){
         var o = this.getXY();
         var e = Ext.fly(el, '_internal').getXY();
         return [o[0]-e[0],o[1]-e[1]];
     },
 
-    
+
     setX : function(x, animate){
         if(!animate || !A){
             D.setX(this.dom, x);
@@ -2806,7 +2806,7 @@
         return this;
     },
 
-    
+
     setY : function(y, animate){
         if(!animate || !A){
             D.setY(this.dom, y);
@@ -2816,31 +2816,31 @@
         return this;
     },
 
-    
+
     setLeft : function(left){
         this.setStyle("left", this.addUnits(left));
         return this;
     },
 
-    
+
     setTop : function(top){
         this.setStyle("top", this.addUnits(top));
         return this;
     },
 
-    
+
     setRight : function(right){
         this.setStyle("right", this.addUnits(right));
         return this;
     },
 
-    
+
     setBottom : function(bottom){
         this.setStyle("bottom", this.addUnits(bottom));
         return this;
     },
 
-    
+
     setXY : function(pos, animate){
         if(!animate || !A){
             D.setXY(this.dom, pos);
@@ -2850,38 +2850,38 @@
         return this;
     },
 
-    
+
     setLocation : function(x, y, animate){
         this.setXY([x, y], this.preanim(arguments, 2));
         return this;
     },
 
-    
+
     moveTo : function(x, y, animate){
         this.setXY([x, y], this.preanim(arguments, 2));
         return this;
     },
 
-    
+
     getRegion : function(){
         return D.getRegion(this.dom);
     },
 
-    
+
     getHeight : function(contentHeight){
         var h = this.dom.offsetHeight || 0;
         h = contentHeight !== true ? h : h-this.getBorderWidth("tb")-this.getPadding("tb");
         return h < 0 ? 0 : h;
     },
 
-    
+
     getWidth : function(contentWidth){
         var w = this.dom.offsetWidth || 0;
         w = contentWidth !== true ? w : w-this.getBorderWidth("lr")-this.getPadding("lr");
         return w < 0 ? 0 : w;
     },
 
-    
+
     getComputedHeight : function(){
         var h = Math.max(this.dom.offsetHeight, this.dom.clientHeight);
         if(!h){
@@ -2893,7 +2893,7 @@
         return h;
     },
 
-    
+
     getComputedWidth : function(){
         var w = Math.max(this.dom.offsetWidth, this.dom.clientWidth);
         if(!w){
@@ -2905,7 +2905,7 @@
         return w;
     },
 
-    
+
     getSize : function(contentSize){
         return {width: this.getWidth(contentSize), height: this.getHeight(contentSize)};
     },
@@ -2928,7 +2928,7 @@
 
     },
 
-    
+
     getViewSize : function(){
         var d = this.dom, doc = document, aw = 0, ah = 0;
         if(d == doc || d == doc.body){
@@ -2941,7 +2941,7 @@
         }
     },
 
-    
+
     getValue : function(asNumber){
         return asNumber ? parseInt(this.dom.value, 10) : this.dom.value;
     },
@@ -2972,7 +2972,7 @@
         return height;
     },
 
-    
+
     setWidth : function(width, animate){
         width = this.adjustWidth(width);
         if(!animate || !A){
@@ -2983,7 +2983,7 @@
         return this;
     },
 
-    
+
      setHeight : function(height, animate){
         height = this.adjustHeight(height);
         if(!animate || !A){
@@ -2994,7 +2994,7 @@
         return this;
     },
 
-    
+
      setSize : function(width, height, animate){
         if(typeof width == "object"){ // in case of object from getSize()
             height = width.height; width = width.width;
@@ -3009,7 +3009,7 @@
         return this;
     },
 
-    
+
     setBounds : function(x, y, width, height, animate){
         if(!animate || !A){
             this.setSize(width, height);
@@ -3022,37 +3022,37 @@
         return this;
     },
 
-    
+
     setRegion : function(region, animate){
         this.setBounds(region.left, region.top, region.right-region.left, region.bottom-region.top, this.preanim(arguments, 1));
         return this;
     },
 
-    
+
     addListener : function(eventName, fn, scope, options){
         Ext.EventManager.on(this.dom,  eventName, fn, scope || this, options);
     },
 
-    
+
     removeListener : function(eventName, fn, scope){
         Ext.EventManager.removeListener(this.dom,  eventName, fn, scope || this);
         return this;
     },
 
-    
+
     removeAllListeners : function(){
         Ext.EventManager.removeAll(this.dom);
         return this;
     },
 
-    
+
     relayEvent : function(eventName, observable){
         this.on(eventName, function(e){
             observable.fireEvent(eventName, e);
         });
     },
 
-    
+
      setOpacity : function(opacity, animate){
         if(!animate || !A){
             var s = this.dom.style;
@@ -3069,7 +3069,7 @@
         return this;
     },
 
-    
+
     getLeft : function(local){
         if(!local){
             return this.getX();
@@ -3078,7 +3078,7 @@
         }
     },
 
-    
+
     getRight : function(local){
         if(!local){
             return this.getX() + this.getWidth();
@@ -3087,7 +3087,7 @@
         }
     },
 
-    
+
     getTop : function(local) {
         if(!local){
             return this.getY();
@@ -3096,7 +3096,7 @@
         }
     },
 
-    
+
     getBottom : function(local){
         if(!local){
             return this.getY() + this.getHeight();
@@ -3105,7 +3105,7 @@
         }
     },
 
-    
+
     position : function(pos, zIndex, x, y){
         if(!pos){
            if(this.getStyle('position') == 'static'){
@@ -3126,7 +3126,7 @@
         }
     },
 
-    
+
     clearPositioning : function(value){
         value = value ||'';
         this.setStyle({
@@ -3140,7 +3140,7 @@
         return this;
     },
 
-    
+
     getPositioning : function(){
         var l = this.getStyle("left");
         var t = this.getStyle("top");
@@ -3154,17 +3154,17 @@
         };
     },
 
-    
+
     getBorderWidth : function(side){
         return this.addStyles(side, El.borders);
     },
 
-    
+
     getPadding : function(side){
         return this.addStyles(side, El.paddings);
     },
 
-    
+
     setPositioning : function(pc){
         this.applyStyles(pc);
         if(pc.right == "auto"){
@@ -3188,23 +3188,23 @@
     },
 
     // private
-	setOverflow : function(v){
-    	if(v=='auto' && Ext.isMac && Ext.isGecko2){ // work around stupid FF 2.0/Mac scroll bar bug
-    		this.dom.style.overflow = 'hidden';
-        	(function(){this.dom.style.overflow = 'auto';}).defer(1, this);
-    	}else{
-    		this.dom.style.overflow = v;
-    	}
-	},
+  setOverflow : function(v){
+      if(v=='auto' && Ext.isMac && Ext.isGecko2){ // work around stupid FF 2.0/Mac scroll bar bug
+        this.dom.style.overflow = 'hidden';
+          (function(){this.dom.style.overflow = 'auto';}).defer(1, this);
+      }else{
+        this.dom.style.overflow = v;
+      }
+  },
+
 
-    
      setLeftTop : function(left, top){
         this.dom.style.left = this.addUnits(left);
         this.dom.style.top = this.addUnits(top);
         return this;
     },
 
-    
+
      move : function(direction, distance, animate){
         var xy = this.getXY();
         direction = direction.toLowerCase();
@@ -3231,7 +3231,7 @@
         return this;
     },
 
-    
+
     clip : function(){
         if(!this.isClipped){
            this.isClipped = true;
@@ -3247,7 +3247,7 @@
         return this;
     },
 
-    
+
     unclip : function(){
         if(this.isClipped){
             this.isClipped = false;
@@ -3260,7 +3260,7 @@
     },
 
 
-    
+
     getAnchorXY : function(anchor, local, s){
         //Passing a different size is useful for pre-calculating anchors,
         //especially for anchored animations that change the el size.
@@ -3328,7 +3328,7 @@
         return [x+o[0], y+o[1]];
     },
 
-    
+
     getAlignToXY : function(el, p, o){
         el = Ext.get(el);
         if(!el || !el.dom){
@@ -3462,14 +3462,14 @@
         return this.getConstrainToXY(parent || document, false, offsets, xy) ||  xy;
     },
 
-    
+
     alignTo : function(element, position, offsets, animate){
         var xy = this.getAlignToXY(element, position, offsets);
         this.setXY(xy, this.preanim(arguments, 3));
         return this;
     },
 
-    
+
     anchorTo : function(el, alignment, offsets, animate, monitorScroll, callback){
         var action = function(){
             this.alignTo(el, alignment, offsets, animate);
@@ -3484,7 +3484,7 @@
         action.call(this); // align immediately
         return this;
     },
-    
+
     clearOpacity : function(){
         if (window.ActiveXObject) {
             if(typeof this.dom.style.filter == 'string' && (/alpha/i).test(this.dom.style.filter)){
@@ -3498,24 +3498,24 @@
         return this;
     },
 
-    
+
     hide : function(animate){
         this.setVisible(false, this.preanim(arguments, 0));
         return this;
     },
 
-    
+
     show : function(animate){
         this.setVisible(true, this.preanim(arguments, 0));
         return this;
     },
 
-    
+
     addUnits : function(size){
         return Ext.Element.addUnits(size, this.defaultUnit);
     },
 
-    
+
     update : function(html, loadScripts, callback){
         if(typeof html == "undefined"){
             html = "";
@@ -3568,14 +3568,14 @@
         return this;
     },
 
-    
+
     load : function(){
         var um = this.getUpdater();
         um.update.apply(um, arguments);
         return this;
     },
 
-    
+
     getUpdater : function(){
         if(!this.updateManager){
             this.updateManager = new Ext.Updater(this);
@@ -3583,7 +3583,7 @@
         return this.updateManager;
     },
 
-    
+
     unselectable : function(){
         this.dom.unselectable = "on";
         this.swallowEvent("selectstart", true);
@@ -3592,23 +3592,23 @@
         return this;
     },
 
-    
+
     getCenterXY : function(){
         return this.getAlignToXY(document, 'c-c');
     },
 
-    
+
     center : function(centerIn){
         this.alignTo(centerIn || document, 'c-c');
         return this;
     },
 
-    
+
     isBorderBox : function(){
         return noBoxAdjust[this.dom.tagName.toLowerCase()] || Ext.isBorderBox;
     },
 
-    
+
     getBox : function(contentBox, local){
         var xy;
         if(!local){
@@ -3633,12 +3633,12 @@
         return bx;
     },
 
-    
+
     getFrameWidth : function(sides, onlyContentBox){
         return onlyContentBox && Ext.isBorderBox ? 0 : (this.getPadding(sides) + this.getBorderWidth(sides));
     },
 
-    
+
     setBox : function(box, adjust, animate){
         var w = box.width, h = box.height;
         if((adjust && !this.autoBoxAdjust) && !this.isBorderBox()){
@@ -3649,7 +3649,7 @@
         return this;
     },
 
-    
+
      repaint : function(){
         var dom = this.dom;
         this.addClass("x-repaint");
@@ -3659,7 +3659,7 @@
         return this;
     },
 
-    
+
     getMargins : function(side){
         if(!side){
             return {
@@ -3686,7 +3686,7 @@
         return val;
     },
 
-    
+
     createProxy : function(config, renderTo, matchBox){
         config = typeof config == "object" ?
             config : {tag : "div", cls: config};
@@ -3703,7 +3703,7 @@
         return proxy;
     },
 
-    
+
     mask : function(msg, msgCls){
         if(this.getStyle("position") == "static"){
             this.addClass("x-masked-relative");
@@ -3733,7 +3733,7 @@
         return this._mask;
     },
 
-    
+
     unmask : function(){
         if(this._mask){
             if(this._maskMsg){
@@ -3746,12 +3746,12 @@
         this.removeClass(["x-masked", "x-masked-relative"]);
     },
 
-    
+
     isMasked : function(){
         return this._mask && this._mask.isVisible();
     },
 
-    
+
     createShim : function(){
         var el = document.createElement('iframe');
         el.frameBorder = '0';
@@ -3764,13 +3764,13 @@
         return shim;
     },
 
-    
+
     remove : function(){
         Ext.removeNode(this.dom);
         delete El.cache[this.dom.id];
     },
 
-    
+
     hover : function(overFn, outFn, scope){
         var preOverFn = function(e){
             if(!e.within(this, true)){
@@ -3787,7 +3787,7 @@
         return this;
     },
 
-    
+
     addClassOnOver : function(className){
         this.hover(
             function(){
@@ -3800,7 +3800,7 @@
         return this;
     },
 
-    
+
     addClassOnFocus : function(className){
         this.on("focus", function(){
             Ext.fly(this, '_internal').addClass(className);
@@ -3810,7 +3810,7 @@
         }, this.dom);
         return this;
     },
-    
+
     addClassOnClick : function(className){
         var dom = this.dom;
         this.on("mousedown", function(){
@@ -3825,7 +3825,7 @@
         return this;
     },
 
-    
+
     swallowEvent : function(eventName, preventDefault){
         var fn = function(e){
             e.stopPropagation();
@@ -3843,28 +3843,28 @@
         return this;
     },
 
-    
+
     parent : function(selector, returnDom){
         return this.matchNode('parentNode', 'parentNode', selector, returnDom);
     },
 
-     
+
     next : function(selector, returnDom){
         return this.matchNode('nextSibling', 'nextSibling', selector, returnDom);
     },
 
-    
+
     prev : function(selector, returnDom){
         return this.matchNode('previousSibling', 'previousSibling', selector, returnDom);
     },
 
 
-    
+
     first : function(selector, returnDom){
         return this.matchNode('nextSibling', 'firstChild', selector, returnDom);
     },
 
-    
+
     last : function(selector, returnDom){
         return this.matchNode('previousSibling', 'lastChild', selector, returnDom);
     },
@@ -3880,14 +3880,14 @@
         return null;
     },
 
-    
+
     appendChild: function(el){
         el = Ext.get(el);
         el.appendTo(this);
         return this;
     },
 
-    
+
     createChild: function(config, insertBefore, returnDom){
         config = config || {tag:'div'};
         if(insertBefore){
@@ -3896,28 +3896,28 @@
         return Ext.DomHelper[!this.dom.firstChild ? 'overwrite' : 'append'](this.dom, config,  returnDom !== true);
     },
 
-    
+
     appendTo: function(el){
         el = Ext.getDom(el);
         el.appendChild(this.dom);
         return this;
     },
 
-    
+
     insertBefore: function(el){
         el = Ext.getDom(el);
         el.parentNode.insertBefore(this.dom, el);
         return this;
     },
 
-    
+
     insertAfter: function(el){
         el = Ext.getDom(el);
         el.parentNode.insertBefore(this.dom, el.nextSibling);
         return this;
     },
 
-    
+
     insertFirst: function(el, returnDom){
         el = el || {};
         if(typeof el == 'object' && !el.nodeType && !el.dom){ // dh config
@@ -3929,7 +3929,7 @@
         }
     },
 
-    
+
     insertSibling: function(el, where, returnDom){
         var rt;
         if(Ext.isArray(el)){
@@ -3958,7 +3958,7 @@
         return rt;
     },
 
-    
+
     wrap: function(config, returnDom){
         if(!config){
             config = {tag: "div"};
@@ -3968,7 +3968,7 @@
         return newEl;
     },
 
-    
+
     replace: function(el){
         el = Ext.get(el);
         this.insertBefore(el);
@@ -3976,7 +3976,7 @@
         return this;
     },
 
-    
+
     replaceWith: function(el){
         if(typeof el == 'object' && !el.nodeType && !el.dom){ // dh config
             el = this.insertSibling(el, 'before');
@@ -3992,13 +3992,13 @@
         return this;
     },
 
-    
+
     insertHtml : function(where, html, returnEl){
         var el = Ext.DomHelper.insertHtml(where, this.dom, html);
         return returnEl ? Ext.get(el) : el;
     },
 
-    
+
     set : function(o, useSet){
         var el = this.dom;
         useSet = typeof useSet == 'undefined' ? (el.setAttribute ? true : false) : useSet;
@@ -4017,7 +4017,7 @@
         return this;
     },
 
-    
+
     addKeyListener : function(key, fn, scope){
         var config;
         if(typeof key != "object" || Ext.isArray(key)){
@@ -4039,18 +4039,18 @@
         return new Ext.KeyMap(this, config);
     },
 
-    
+
     addKeyMap : function(config){
         return new Ext.KeyMap(this, config);
     },
 
-    
+
      isScrollable : function(){
         var dom = this.dom;
         return dom.scrollHeight > dom.clientHeight || dom.scrollWidth > dom.clientWidth;
     },
 
-    
+
     scrollTo : function(side, value, animate){
         var prop = side.toLowerCase() == "left" ? "scrollLeft" : "scrollTop";
         if(!animate || !A){
@@ -4062,7 +4062,7 @@
         return this;
     },
 
-    
+
      scroll : function(direction, distance, animate){
          if(!this.isScrollable()){
              return;
@@ -4113,7 +4113,7 @@
          return scrolled;
     },
 
-    
+
     translatePoints : function(x, y){
         if(typeof x == 'object' || Ext.isArray(x)){
             y = x[1]; x = x[0];
@@ -4134,7 +4134,7 @@
         return {left: (x - o[0] + l), top: (y - o[1] + t)};
     },
 
-    
+
     getScroll : function(){
         var d = this.dom, doc = document;
         if(d == doc || d == doc.body){
@@ -4152,7 +4152,7 @@
         }
     },
 
-    
+
     getColor : function(attr, defaultValue, prefix){
         var v = this.getStyle(attr);
         if(!v || v == "transparent" || v == "inherit") {
@@ -4184,7 +4184,7 @@
         return(color.length > 5 ? color.toLowerCase() : defaultValue);
     },
 
-    
+
     boxWrap : function(cls){
         cls = cls || 'x-box';
         var el = Ext.get(this.insertHtml('beforeBegin', String.format('<div class="{0}">'+El.boxMarkup+'</div>', cls)));
@@ -4192,7 +4192,7 @@
         return el;
     },
 
-    
+
     getAttributeNS : Ext.isIE ? function(ns, name){
         var d = this.dom;
         var type = typeof d[ns+":"+name];
@@ -4205,7 +4205,7 @@
         return d.getAttributeNS(ns, name) || d.getAttribute(ns+":"+name) || d.getAttribute(name) || d[name];
     },
 
-    
+
     getTextWidth : function(text, min, max){
         return (Ext.util.TextMetrics.measure(this.dom, Ext.value(text, this.dom.innerHTML, true)).width).constrain(min || 0, max || 1000000);
     }
@@ -4409,7 +4409,7 @@
 
 
 Ext.Fx = {
-	
+
     slideIn : function(anchor, o){
         var el = this.getFxEl();
         o = o || {};
@@ -4502,8 +4502,8 @@
         });
         return this;
     },
-    
-	
+
+
     slideOut : function(anchor, o){
         var el = this.getFxEl();
         o = o || {};
@@ -4514,7 +4514,7 @@
 
             // restore values after effect
             var r = this.getFxRestore();
-            
+
             var b = this.getBox();
             // fixed size for slide
             this.setSize(b);
@@ -4588,7 +4588,7 @@
         return this;
     },
 
-	
+
     puff : function(o){
         var el = this.getFxEl();
         o = o || {};
@@ -4635,7 +4635,7 @@
         return this;
     },
 
-	
+
     switchOff : function(o){
         var el = this.getFxEl();
         o = o || {};
@@ -4676,7 +4676,7 @@
         return this;
     },
 
-    	
+
     highlight : function(color, o){
         var el = this.getFxEl();
         o = o || {};
@@ -4708,7 +4708,7 @@
         return this;
     },
 
-   
+
     frame : function(color, count, o){
         var el = this.getFxEl();
         o = o || {};
@@ -4754,7 +4754,7 @@
         return this;
     },
 
-   
+
     pause : function(seconds){
         var el = this.getFxEl();
         var o = {};
@@ -4767,7 +4767,7 @@
         return this;
     },
 
-   
+
     fadeIn : function(o){
         var el = this.getFxEl();
         o = o || {};
@@ -4787,7 +4787,7 @@
         return this;
     },
 
-   
+
     fadeOut : function(o){
         var el = this.getFxEl();
         o = o || {};
@@ -4809,7 +4809,7 @@
         return this;
     },
 
-   
+
     scale : function(w, h, o){
         this.shift(Ext.apply({}, o, {
             width: w,
@@ -4818,7 +4818,7 @@
         return this;
     },
 
-   
+
     shift : function(o){
         var el = this.getFxEl();
         o = o || {};
@@ -4862,7 +4862,7 @@
         return this;
     },
 
-	
+
     ghost : function(anchor, o){
         var el = this.getFxEl();
         o = o || {};
@@ -4929,7 +4929,7 @@
         return this;
     },
 
-	
+
     syncFx : function(){
         this.fxDefaults = Ext.apply(this.fxDefaults || {}, {
             block : false,
@@ -4939,7 +4939,7 @@
         return this;
     },
 
-	
+
     sequenceFx : function(){
         this.fxDefaults = Ext.apply(this.fxDefaults || {}, {
             block : false,
@@ -4949,7 +4949,7 @@
         return this;
     },
 
-	
+
     nextFx : function(){
         var ef = this.fxQueue[0];
         if(ef){
@@ -4957,12 +4957,12 @@
         }
     },
 
-	
+
     hasActiveFx : function(){
         return this.fxQueue && this.fxQueue[0];
     },
 
-	
+
     stopFx : function(){
         if(this.hasActiveFx()){
             var cur = this.fxQueue[0];
@@ -4974,7 +4974,7 @@
         return this;
     },
 
-	
+
     beforeFx : function(o){
         if(this.hasActiveFx() && !o.concurrent){
            if(o.stopFx){
@@ -4986,13 +4986,13 @@
         return true;
     },
 
-	
+
     hasFxBlock : function(){
         var q = this.fxQueue;
         return q && q[0] && q[0].block;
     },
 
-	
+
     queueFx : function(o, fn){
         if(!this.fxQueue){
             this.fxQueue = [];
@@ -5013,7 +5013,7 @@
         return this;
     },
 
-	
+
     fxWrap : function(pos, o, vis){
         var wrap;
         if(!o.wrap || !(wrap = Ext.get(o.wrap))){
@@ -5038,7 +5038,7 @@
         return wrap;
     },
 
-	
+
     fxUnwrap : function(wrap, pos, o){
         this.clearPositioning();
         this.setPositioning(pos);
@@ -5048,13 +5048,13 @@
         }
     },
 
-	
+
     getFxRestore : function(){
         var st = this.dom.style;
         return {pos: this.getPositioning(), width: st.width, height : st.height};
     },
 
-	
+
     afterFx : function(o){
         if(o.afterStyle){
             this.applyStyles(o.afterStyle);
@@ -5072,12 +5072,12 @@
         }
     },
 
-	
+
     getFxEl : function(){ // support for composite element fx
         return Ext.get(this.dom);
     },
 
-	
+
     fxanim : function(args, opt, animType, defaultDur, defaultEase, cb){
         animType = animType || 'run';
         opt = opt || {};
@@ -5117,19 +5117,19 @@
         var yels = this.elements;
         var index = yels.length-1;
         for(var i = 0, len = els.length; i < len; i++) {
-        	yels[++index] = Ext.get(els[i]);
+          yels[++index] = Ext.get(els[i]);
         }
         return this;
     },
 
-    
+
     fill : function(els){
         this.elements = [];
         this.add(els);
         return this;
     },
 
-    
+
     filter : function(selector){
         var els = [];
         this.each(function(el){
@@ -5144,11 +5144,11 @@
     invoke : function(fn, args){
         var els = this.elements;
         for(var i = 0, len = els.length; i < len; i++) {
-        	Ext.Element.prototype[fn].apply(els[i], args);
+          Ext.Element.prototype[fn].apply(els[i], args);
         }
         return this;
     },
-    
+
     add : function(els){
         if(typeof els == "string"){
             this.addElements(Ext.Element.selectorFunction(els));
@@ -5159,7 +5159,7 @@
         }
         return this;
     },
-    
+
     each : function(fn, scope){
         var els = this.elements;
         for(var i = 0, len = els.length; i < len; i++){
@@ -5170,38 +5170,38 @@
         return this;
     },
 
-    
+
     item : function(index){
         return this.elements[index] || null;
     },
 
-    
+
     first : function(){
         return this.item(0);
     },
 
-    
+
     last : function(){
         return this.item(this.elements.length-1);
     },
 
-    
+
     getCount : function(){
         return this.elements.length;
     },
 
-    
+
     contains : function(el){
         return this.indexOf(el) !== -1;
     },
 
-    
+
     indexOf : function(el){
         return this.elements.indexOf(Ext.get(el));
     },
 
 
-    
+
     removeElement : function(el, removeDom){
         if(Ext.isArray(el)){
             for(var i = 0, len = el.length; i < len; i++){
@@ -5224,7 +5224,7 @@
         return this;
     },
 
-    
+
     replaceElement : function(el, replacement, domReplace){
         var index = typeof el == 'number' ? el : this.indexOf(el);
         if(index !== -1){
@@ -5237,7 +5237,7 @@
         return this;
     },
 
-    
+
     clear : function(){
         this.elements = [];
     }
@@ -5282,11 +5282,11 @@
         var el = this.el;
         for(var i = 0, len = els.length; i < len; i++) {
             el.dom = els[i];
-        	Ext.Element.prototype[fn].apply(el, args);
+          Ext.Element.prototype[fn].apply(el, args);
         }
         return this;
     },
-    
+
     item : function(index){
         if(!this.elements[index]){
             return null;
@@ -5304,13 +5304,13 @@
         return this;
     },
 
-    
+
     each : function(fn, scope){
         var els = this.elements;
         var el = this.el;
         for(var i = 0, len = els.length; i < len; i++){
             el.dom = els[i];
-        	if(fn.call(scope || el, el, this, i) === false){
+          if(fn.call(scope || el, el, this, i) === false){
                 break;
             }
         }
@@ -5361,34 +5361,34 @@
 Ext.data.Connection = function(config){
     Ext.apply(this, config);
     this.addEvents(
-        
+
         "beforerequest",
-        
+
         "requestcomplete",
-        
+
         "requestexception"
     );
     Ext.data.Connection.superclass.constructor.call(this);
 };
 
 Ext.extend(Ext.data.Connection, Ext.util.Observable, {
-    
-    
-    
-    
-    
+
+
+
+
+
     timeout : 30000,
-    
+
     autoAbort:false,
 
-    
+
     disableCaching: true,
-    
-    
+
+
     disableCachingParam: '_dc',
-    
 
-    
+
+
     request : function(o){
         if(this.fireEvent("beforerequest", this, o) !== false){
             var p = o.params;
@@ -5463,7 +5463,7 @@
         }
     },
 
-    
+
     isLoading : function(transId){
         if(transId){
             return Ext.lib.Ajax.isCallInProgress(transId);
@@ -5472,7 +5472,7 @@
         }
     },
 
-    
+
     abort : function(transId){
         if(transId || this.isLoading()){
             Ext.lib.Ajax.abort(transId || this.transId);
@@ -5590,26 +5590,26 @@
 
 
 Ext.Ajax = new Ext.data.Connection({
-    
-    
-    
-    
-    
-    
-
-    
-
-    
-    
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
     autoAbort : false,
 
-    
+
     serializeForm : function(form){
         return Ext.lib.Ajax.serializeForm(form);
     }
@@ -5621,57 +5621,57 @@
         if(!forceNew && el.updateManager){
             return el.updateManager;
         }
-        
+
         this.el = el;
-        
+
         this.defaultUrl = null;
 
         this.addEvents(
-            
+
             "beforeupdate",
-            
+
             "update",
-            
+
             "failure"
         );
         var d = Ext.Updater.defaults;
-        
+
         this.sslBlankUrl = d.sslBlankUrl;
-        
+
         this.disableCaching = d.disableCaching;
-        
+
         this.indicatorText = d.indicatorText;
-        
+
         this.showLoadIndicator = d.showLoadIndicator;
-        
+
         this.timeout = d.timeout;
-        
+
         this.loadScripts = d.loadScripts;
-        
+
         this.transaction = null;
-        
+
         this.refreshDelegate = this.refresh.createDelegate(this);
-        
+
         this.updateDelegate = this.update.createDelegate(this);
-        
+
         this.formUpdateDelegate = this.formUpdate.createDelegate(this);
 
         if(!this.renderer){
-         
+
         this.renderer = this.getDefaultRenderer();
         }
         Ext.Updater.superclass.constructor.call(this);
     },
-    
+
     getDefaultRenderer: function() {
         return new Ext.Updater.BasicRenderer();
     },
-    
+
     getEl : function(){
         return this.el;
     },
 
-    
+
     update : function(url, params, callback, discardUrl){
         if(this.fireEvent("beforeupdate", this.el, url, params) !== false){
             var cfg, callerScope;
@@ -5719,7 +5719,7 @@
         }
     },
 
-    
+
     formUpdate : function(form, url, reset, callback){
         if(this.fireEvent("beforeupdate", this.el, form, url) !== false){
             if(typeof url == "function"){
@@ -5744,7 +5744,7 @@
         }
     },
 
-    
+
     refresh : function(callback){
         if(this.defaultUrl == null){
             return;
@@ -5752,7 +5752,7 @@
         this.update(this.defaultUrl, null, callback, true);
     },
 
-    
+
     startAutoRefresh : function(interval, url, params, callback, refreshNow){
         if(refreshNow){
             this.update(url || this.defaultUrl, params, callback, true);
@@ -5763,7 +5763,7 @@
         this.autoRefreshProcId = setInterval(this.update.createDelegate(this, [url || this.defaultUrl, params, callback, true]), interval*1000);
     },
 
-    
+
      stopAutoRefresh : function(){
         if(this.autoRefreshProcId){
             clearInterval(this.autoRefreshProcId);
@@ -5771,12 +5771,12 @@
         }
     },
 
-    
+
     isAutoRefreshing : function(){
        return this.autoRefreshProcId ? true : false;
     },
 
-    
+
     showLoading : function(){
         if(this.showLoadIndicator){
             this.el.update(this.indicatorText);
@@ -5817,29 +5817,29 @@
         }
     },
 
-    
+
     setRenderer : function(renderer){
         this.renderer = renderer;
     },
 
-    
+
     getRenderer : function(){
        return this.renderer;
     },
 
-    
+
     setDefaultUrl : function(defaultUrl){
         this.defaultUrl = defaultUrl;
     },
 
-    
+
     abort : function(){
         if(this.transaction){
             Ext.Ajax.abort(this.transaction);
         }
     },
 
-    
+
     isUpdating : function(){
         if(this.transaction){
             return Ext.Ajax.isLoading(this.transaction);
@@ -5850,17 +5850,17 @@
 
 
    Ext.Updater.defaults = {
-       
+
          timeout : 30,
-         
+
         loadScripts : false,
-        
+
         sslBlankUrl : (Ext.SSL_SECURE_URL || "javascript:false"),
-        
+
         disableCaching : false,
-        
+
         showLoadIndicator : true,
-        
+
         indicatorText : '<div class="loading-indicator">Loading...</div>'
    };
 
@@ -5874,7 +5874,7 @@
 Ext.Updater.BasicRenderer = function(){};
 
 Ext.Updater.BasicRenderer.prototype = {
-    
+
      render : function(el, response, updateManager, callback){
         el.update(response.responseText, updateManager.loadScripts, callback);
     }
@@ -5888,16 +5888,16 @@
 
 (function() {
 
-	/**
-	 * Global flag which determines if strict date parsing should be used.
-	 * Strict date parsing will not roll-over invalid dates, which is the
-	 * default behaviour of javascript Date objects.
-	 * (see {@link #parseDate} for more information)
-	 * Defaults to <tt>false</tt>.
-	 * @static
-	 * @type Boolean
-	*/
-	Date.useStrict = true;
+  /**
+   * Global flag which determines if strict date parsing should be used.
+   * Strict date parsing will not roll-over invalid dates, which is the
+   * default behaviour of javascript Date objects.
+   * (see {@link #parseDate} for more information)
+   * Defaults to <tt>false</tt>.
+   * @static
+   * @type Boolean
+  */
+  Date.useStrict = true;
 
 // create private copy of Ext's String.format() method
 // - to remove unnecessary dependency
@@ -5935,49 +5935,49 @@
 Ext.apply(Date, {
     // private
     parseFunctions: {
-		"M$": function(input, strict) {
-		    // note: the timezone offset is ignored since the M$ Ajax server sends
-		    // a UTC milliseconds-since-Unix-epoch value (negative values are allowed)
-		    var re = new RegExp('\\/Date\\(([-+])?(\\d+)(?:[+-]\\d{4})?\\)\\/');
-		    var r = (input || '').match(re);
-		    return r? new Date(((r[1] || '') + r[2]) * 1) : null;
-		},
-		count:1
-	},
+    "M$": function(input, strict) {
+        // note: the timezone offset is ignored since the M$ Ajax server sends
+        // a UTC milliseconds-since-Unix-epoch value (negative values are allowed)
+        var re = new RegExp('\\/Date\\(([-+])?(\\d+)(?:[+-]\\d{4})?\\)\\/');
+        var r = (input || '').match(re);
+        return r? new Date(((r[1] || '') + r[2]) * 1) : null;
+    },
+    count:1
+  },
     parseRegexes: [],
     formatFunctions: {
         "M$": function() {
-        	// UTC milliseconds since Unix epoch (M$-AJAX serialized date format (MRSF))
-        	return '\\/Date(' + this.getTime() + ')\\/';
-    	},
-    	count:1
+          // UTC milliseconds since Unix epoch (M$-AJAX serialized date format (MRSF))
+          return '\\/Date(' + this.getTime() + ')\\/';
+      },
+      count:1
     },
     daysInMonth : [31,28,31,30,31,30,31,31,30,31,30,31],
     y2kYear : 50,
 
-    
+
     MILLI : "ms",
 
-    
+
     SECOND : "s",
 
-    
+
     MINUTE : "mi",
 
-    
+
     HOUR : "h",
 
-    
+
     DAY : "d",
 
-    
+
     MONTH : "mo",
 
-    
+
     YEAR : "y",
 
     defaults: {},
-    
+
     dayNames : [
         "Sunday",
         "Monday",
@@ -5988,7 +5988,7 @@
         "Saturday"
     ],
 
-    
+
     monthNames : [
         "January",
         "February",
@@ -6004,7 +6004,7 @@
         "December"
     ],
 
-    
+
     monthNumbers : {
         Jan:0,
         Feb:1,
@@ -6020,23 +6020,23 @@
         Dec:11
     },
 
-    
+
     getShortMonthName : function(month) {
         return Date.monthNames[month].substring(0, 3);
     },
 
-    
+
     getShortDayName : function(day) {
         return Date.dayNames[day].substring(0, 3);
     },
 
-    
+
     getMonthNumber : function(name) {
         // handle camel casing for english month names (since the keys for the Date.monthNumbers hash are case sensitive)
         return Date.monthNumbers[name.substring(0, 1).toUpperCase() + name.substring(1, 3).toLowerCase()];
     },
 
-    
+
     formatCodes : {
         d: "String.leftPad(this.getDate(), 2, '0')",
         D: "Date.getShortDayName(this.getDay())", // get localised short day name
@@ -6076,7 +6076,7 @@
             }
             return code.join(" + ");
         },
-        
+
         U: "Math.round(this.getTime() / 1000)"
     },
 
@@ -6110,7 +6110,7 @@
             ms == dt.getMilliseconds();
     },
 
-    
+
     parseDate : function(input, format, strict) {
         var p = Date.parseFunctions;
         if (p[format] == null) {
@@ -6250,7 +6250,7 @@
 
     // private
     parseCodes : {
-        
+
         d: {
             g:1,
             c:"d = parseInt(results[{0}], 10);\n",
@@ -6476,7 +6476,7 @@
         return Date.formatFunctions[format].call(this);
     },
 
-    
+
     getTimezone : function() {
         // the following list shows the differences between date strings from different browsers on a WinXP SP2 machine from an Asian locale:
         //
@@ -6493,7 +6493,7 @@
         return this.toString().replace(/^.* (?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2").replace(/[^A-Z]/g, "");
     },
 
-    
+
     getGMTOffset : function(colon) {
         return (this.getTimezoneOffset() > 0 ? "-" : "+")
             + String.leftPad(Math.floor(Math.abs(this.getTimezoneOffset()) / 60), 2, "0")
@@ -6501,7 +6501,7 @@
             + String.leftPad(Math.abs(this.getTimezoneOffset() % 60), 2, "0");
     },
 
-    
+
     getDayOfYear : function() {
         var num = 0;
         Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
@@ -6511,7 +6511,7 @@
         return num + this.getDate() - 1;
     },
 
-    
+
     getWeekOfYear : function() {
         // adapted from http://www.merlyn.demon.co.uk/weekcalc.htm
         var ms1d = 864e5, // milliseconds in a day
@@ -6526,42 +6526,42 @@
         }
     }(),
 
-    
+
     isLeapYear : function() {
         var year = this.getFullYear();
         return !!((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)));
     },
 
-    
+
     getFirstDayOfMonth : function() {
         var day = (this.getDay() - (this.getDate() - 1)) % 7;
         return (day < 0) ? (day + 7) : day;
     },
 
-    
+
     getLastDayOfMonth : function() {
         var day = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
         return (day < 0) ? (day + 7) : day;
     },
 
 
-    
+
     getFirstDateOfMonth : function() {
         return new Date(this.getFullYear(), this.getMonth(), 1);
     },
 
-    
+
     getLastDateOfMonth : function() {
         return new Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth());
     },
 
-    
+
     getDaysInMonth : function() {
         Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
         return Date.daysInMonth[this.getMonth()];
     },
 
-    
+
     getSuffix : function() {
         switch (this.getDate()) {
             case 1:
@@ -6579,12 +6579,12 @@
         }
     },
 
-    
+
     clone : function() {
         return new Date(this.getTime());
     },
 
-    
+
     clearTime : function(clone){
         if(clone){
             return this.clone().clearTime();
@@ -6596,7 +6596,7 @@
         return this;
     },
 
-    
+
     add : function(interval, value){
         var d = this.clone();
         if (!interval || value === 0) return d;
@@ -6632,7 +6632,7 @@
         return d;
     },
 
-    
+
     between : function(start, end){
         var t = this.getTime();
         return start.getTime() <= t && t <= end.getTime();
@@ -6689,7 +6689,7 @@
             fn.apply(scope, args || []);
         }
     };
-    
+
     this.delay = function(delay, newFn, newScope, newArgs){
         if(id && delay != d){
             this.cancel();
@@ -6704,7 +6704,7 @@
         }
     };
 
-    
+
     this.cancel = function(){
         if(id){
             clearInterval(id);
@@ -6772,7 +6772,7 @@
         }
     };
 
-    
+
     this.start = function(task){
         tasks.push(task);
         task.taskStartTime = new Date().getTime();
@@ -6782,13 +6782,13 @@
         return task;
     };
 
-    
+
     this.stop = function(task){
         removeTask(task);
         return task;
     };
 
-    
+
     this.stopAll = function(){
         stopThread();
         for(var i = 0, len = tasks.length; i < len; i++){
@@ -6810,13 +6810,13 @@
     this.keys = [];
     this.length = 0;
     this.addEvents(
-        
+
         "clear",
-        
+
         "add",
-        
+
         "replace",
-        
+
         "remove",
         "sort"
     );
@@ -6909,7 +6909,7 @@
         }
     },
 
-    
+
     find : function(fn, scope){
         for(var i = 0, len = this.items.length; i < len; i++){
             if(fn.call(scope || window, this.items[i], this.keys[i])){
@@ -7049,12 +7049,12 @@
         this.fireEvent("sort", this);
     },
 
-    
+
     sort : function(dir, fn){
         this._sort("value", dir, fn);
     },
 
-    
+
     keySort : function(dir, fn){
         this._sort("key", dir, fn || function(a, b){
             var v1 = String(a).toUpperCase(), v2 = String(b).toUpperCase();
@@ -7062,7 +7062,7 @@
         });
     },
 
-    
+
     getRange : function(start, end){
         var items = this.items;
         if(items.length < 1){
@@ -7073,17 +7073,17 @@
         var r = [];
         if(start <= end){
             for(var i = start; i <= end; i++) {
-        	    r[r.length] = items[i];
+              r[r.length] = items[i];
             }
         }else{
             for(var i = start; i >= end; i--) {
-        	    r[r.length] = items[i];
+              r[r.length] = items[i];
             }
         }
         return r;
     },
 
-    
+
     filter : function(property, value, anyMatch, caseSensitive){
         if(Ext.isEmpty(value, false)){
             return this.clone();
@@ -7092,22 +7092,22 @@
         return this.filterBy(function(o){
             return o && value.test(o[property]);
         });
-	},
+  },
+
 
-    
     filterBy : function(fn, scope){
         var r = new Ext.util.MixedCollection();
         r.getKey = this.getKey;
         var k = this.keys, it = this.items;
         for(var i = 0, len = it.length; i < len; i++){
             if(fn.call(scope||this, it[i], k[i])){
-				r.add(k[i], it[i]);
-			}
+        r.add(k[i], it[i]);
+      }
         }
         return r;
     },
 
-    
+
     findIndex : function(property, value, start, anyMatch, caseSensitive){
         if(Ext.isEmpty(value, false)){
             return -1;
@@ -7116,14 +7116,14 @@
         return this.findIndexBy(function(o){
             return o && value.test(o[property]);
         }, null, start);
-	},
+  },
+
 
-    
     findIndexBy : function(fn, scope, start){
         var k = this.keys, it = this.items;
         for(var i = (start||0), len = it.length; i < len; i++){
             if(fn.call(scope||this, it[i], k[i])){
-				return i;
+        return i;
             }
         }
         if(typeof start == 'number' && start > 0){
@@ -7145,7 +7145,7 @@
         return value;
     },
 
-    
+
     clone : function(){
         var r = new Ext.util.MixedCollection();
         var k = this.keys, it = this.items;
@@ -7225,7 +7225,7 @@
                 pad(o.getSeconds()) + '"';
     };
 
-    
+
     this.encode = function(o){
         if(typeof o == "undefined" || o === null){
             return "null";
@@ -7264,7 +7264,7 @@
         }
     };
 
-    
+
     this.decode = function(json){
         return eval("(" + json + ')');
     };
@@ -7278,7 +7278,7 @@
 Ext.util.Format = function(){
     var trimRe = /^\s+|\s+$/g;
     return {
-        
+
         ellipsis : function(value, len){
             if(value && value.length > len){
                 return value.substr(0, len-3)+"...";
@@ -7286,47 +7286,47 @@
             return value;
         },
 
-        
+
         undef : function(value){
             return value !== undefined ? value : "";
         },
 
-        
+
         defaultValue : function(value, defaultValue){
             return value !== undefined && value !== '' ? value : defaultValue;
         },
 
-        
+
         htmlEncode : function(value){
             return !value ? value : String(value).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
         },
 
-        
+
         htmlDecode : function(value){
             return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
         },
 
-        
+
         trim : function(value){
             return String(value).replace(trimRe, "");
         },
 
-        
+
         substr : function(value, start, length){
             return String(value).substr(start, length);
         },
 
-        
+
         lowercase : function(value){
             return String(value).toLowerCase();
         },
 
-        
+
         uppercase : function(value){
             return String(value).toUpperCase();
         },
 
-        
+
         capitalize : function(value){
             return !value ? value : value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();
         },
@@ -7342,7 +7342,7 @@
             }
         },
 
-        
+
         usMoney : function(v){
             v = (Math.round((v-0)*100))/100;
             v = (v == Math.floor(v)) ? v + ".00" : ((v*10 == Math.floor(v*10)) ? v + "0" : v);
@@ -7361,7 +7361,7 @@
             return "$" +  v;
         },
 
-        
+
         date : function(v, format){
             if(!v){
                 return "";
@@ -7372,7 +7372,7 @@
             return v.dateFormat(format || "m/d/Y");
         },
 
-        
+
         dateRenderer : function(format){
             return function(v){
                 return Ext.util.Format.date(v, format);
@@ -7381,8 +7381,8 @@
 
         // private
         stripTagsRE : /<\/?[^>]+>/gi,
-        
-        
+
+
         stripTags : function(v){
             return !v ? v : String(v).replace(this.stripTagsRE, "");
         },
@@ -7390,12 +7390,12 @@
         // private
         stripScriptsRe : /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig,
 
-        
+
         stripScripts : function(v){
             return !v ? v : String(v).replace(this.stripScriptsRe, "");
         },
 
-        
+
         fileSize : function(size){
             if(size < 1024) {
                 return size + " bytes";
@@ -7416,7 +7416,7 @@
             }
         }(),
 
-		
+
         nl2br : function(v){
             return v === undefined || v === null ? '' : v.replace(/\n/g, '<br/>');
         }
@@ -7560,17 +7560,17 @@
         return this;
     },
 
-    
+
     applyTemplate : function(values){
         return this.master.compiled.call(this, values, {}, 1, 1);
     },
 
-    
+
     compile : function(){return this;}
 
-    
-    
-    
+
+
+
 
 });
 
@@ -7583,14 +7583,14 @@
 };
 
 Ext.util.CSS = function(){
-	var rules = null;
-   	var doc = document;
+  var rules = null;
+     var doc = document;
 
     var camelRe = /(-[a-z])/gi;
     var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };
 
    return {
-   
+
    createStyleSheet : function(cssText, id){
        var ss;
        var head = doc.getElementsByTagName("head")[0];
@@ -7616,7 +7616,7 @@
        return ss;
    },
 
-   
+
    removeStyleSheet : function(id){
        var existing = doc.getElementById(id);
        if(existing){
@@ -7624,7 +7624,7 @@
        }
    },
 
-   
+
    swapStyleSheet : function(id, url){
        this.removeStyleSheet(id);
        var ss = doc.createElement("link");
@@ -7634,8 +7634,8 @@
        ss.setAttribute("href", url);
        doc.getElementsByTagName("head")[0].appendChild(ss);
    },
-   
-   
+
+
    refreshCache : function(){
        return this.getRules(true);
    },
@@ -7652,54 +7652,54 @@
            }
        }catch(e){}
    },
-   
-   
+
+
    getRules : function(refreshCache){
-   		if(rules == null || refreshCache){
-   			rules = {};
-   			var ds = doc.styleSheets;
-   			for(var i =0, len = ds.length; i < len; i++){
-   			    try{
-    		        this.cacheStyleSheet(ds[i]);
-    		    }catch(e){} 
-	        }
-   		}
-   		return rules;
-   	},
-   	
-   	
-   getRule : function(selector, refreshCache){
-   		var rs = this.getRules(refreshCache);
-   		if(!Ext.isArray(selector)){
-   		    return rs[selector];
-   		}
-   		for(var i = 0; i < selector.length; i++){
-			if(rs[selector[i]]){
-				return rs[selector[i]];
-			}
-		}
-		return null;
-   	},
-   	
-   	
-   	
+       if(rules == null || refreshCache){
+         rules = {};
+         var ds = doc.styleSheets;
+         for(var i =0, len = ds.length; i < len; i++){
+             try{
+                this.cacheStyleSheet(ds[i]);
+            }catch(e){}
+          }
+       }
+       return rules;
+     },
+
+
+   getRule : function(selector, refreshCache){
+       var rs = this.getRules(refreshCache);
+       if(!Ext.isArray(selector)){
+           return rs[selector];
+       }
+       for(var i = 0; i < selector.length; i++){
+      if(rs[selector[i]]){
+        return rs[selector[i]];
+      }
+    }
+    return null;
+     },
+
+
+
    updateRule : function(selector, property, value){
-   		if(!Ext.isArray(selector)){
-   			var rule = this.getRule(selector);
-   			if(rule){
-   				rule.style[property.replace(camelRe, camelFn)] = value;
-   				return true;
-   			}
-   		}else{
-   			for(var i = 0; i < selector.length; i++){
-   				if(this.updateRule(selector[i], property, value)){
-   					return true;
-   				}
-   			}
-   		}
-   		return false;
-   	}
-   };	
+       if(!Ext.isArray(selector)){
+         var rule = this.getRule(selector);
+         if(rule){
+           rule.style[property.replace(camelRe, camelFn)] = value;
+           return true;
+         }
+       }else{
+         for(var i = 0; i < selector.length; i++){
+           if(this.updateRule(selector[i], property, value)){
+             return true;
+           }
+         }
+       }
+       return false;
+     }
+   };
 }();
 
 Ext.util.ClickRepeater = function(el, config)
@@ -7710,11 +7710,11 @@
     Ext.apply(this, config);
 
     this.addEvents(
-    
+
         "mousedown",
-    
+
         "click",
-    
+
         "mouseup"
     );
 
@@ -7750,7 +7750,7 @@
         Ext.destroy(this.el);
         this.purgeListeners();
     },
-    
+
     // private
     handleMouseDown : function(){
         clearTimeout(this.timer);
@@ -7769,7 +7769,7 @@
 //      Do not honor delay or interval if acceleration wanted.
         if (this.accelerate) {
             this.delay = 400;
-	    }
+      }
         this.timer = this.click.defer(this.delay || this.interval, this);
     },
 
@@ -7827,11 +7827,11 @@
 };
 
 Ext.KeyNav.prototype = {
-    
+
     disabled : false,
-    
+
     defaultEventAction: "stopEvent",
-    
+
     forceKeyDown : false,
 
     // private
@@ -7892,31 +7892,31 @@
         9  : "tab"
     },
 
-	
-	enable: function(){
-		if(this.disabled){
+
+  enable: function(){
+    if(this.disabled){
             if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){
                 this.el.on("keydown", this.relay,  this);
             }else{
                 this.el.on("keydown", this.prepareEvent,  this);
                 this.el.on("keypress", this.relay,  this);
             }
-		    this.disabled = false;
-		}
-	},
-
-	
-	disable: function(){
-		if(!this.disabled){
-		    if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){
+        this.disabled = false;
+    }
+  },
+
+
+  disable: function(){
+    if(!this.disabled){
+        if(this.forceKeyDown || Ext.isIE || Ext.isSafari3 || Ext.isAir){
                 this.el.un("keydown", this.relay, this);
             }else{
                 this.el.un("keydown", this.prepareEvent, this);
                 this.el.un("keypress", this.relay, this);
             }
-		    this.disabled = true;
-		}
-	}
+        this.disabled = true;
+    }
+  }
 };
 
 Ext.KeyMap = function(el, config, eventName){
@@ -7930,11 +7930,11 @@
 };
 
 Ext.KeyMap.prototype = {
-    
+
     stopEvent : false,
 
-    
-	addBinding : function(config){
+
+  addBinding : function(config){
         if(Ext.isArray(config)){
             for(var i = 0, len = config.length; i < len; i++){
                 this.addBinding(config[i]);
@@ -7947,10 +7947,10 @@
             alt = config.alt,
             fn = config.fn || config.handler,
             scope = config.scope;
-	
-	if (config.stopEvent) {
-	    this.stopEvent = config.stopEvent;    
-	}	
+
+  if (config.stopEvent) {
+      this.stopEvent = config.stopEvent;
+  }
 
         if(typeof keyCode == "string"){
             var ks = [];
@@ -7961,7 +7961,7 @@
             keyCode = ks;
         }
         var keyArray = Ext.isArray(keyCode);
-        
+
         var handler = function(e){
             if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){
                 var k = e.getKey();
@@ -7986,9 +7986,9 @@
             }
         };
         this.bindings.push(handler);
-	},
+  },
+
 
-    
     on : function(key, fn, scope){
         var keyCode, shift, ctrl, alt;
         if(typeof key == "object" && !Ext.isArray(key)){
@@ -8011,40 +8011,40 @@
 
     // private
     handleKeyDown : function(e){
-	    if(this.enabled){ //just in case
-    	    var b = this.bindings;
-    	    for(var i = 0, len = b.length; i < len; i++){
-    	        b[i].call(this, e);
-    	    }
-	    }
-	},
-
-	
-	isEnabled : function(){
-	    return this.enabled;
-	},
-
-	
-	enable: function(){
-		if(!this.enabled){
-		    this.el.on(this.eventName, this.handleKeyDown, this);
-		    this.enabled = true;
-		}
-	},
-
-	
-	disable: function(){
-		if(this.enabled){
-		    this.el.removeListener(this.eventName, this.handleKeyDown, this);
-		    this.enabled = false;
-		}
-	}
+      if(this.enabled){ //just in case
+          var b = this.bindings;
+          for(var i = 0, len = b.length; i < len; i++){
+              b[i].call(this, e);
+          }
+      }
+  },
+
+
+  isEnabled : function(){
+      return this.enabled;
+  },
+
+
+  enable: function(){
+    if(!this.enabled){
+        this.el.on(this.eventName, this.handleKeyDown, this);
+        this.enabled = true;
+    }
+  },
+
+
+  disable: function(){
+    if(this.enabled){
+        this.el.removeListener(this.eventName, this.handleKeyDown, this);
+        this.enabled = false;
+    }
+  }
 };
 
 Ext.util.TextMetrics = function(){
     var shared;
     return {
-        
+
         measure : function(el, text, fixedWidth){
             if(!shared){
                 shared = Ext.util.TextMetrics.Instance(el, fixedWidth);
@@ -8054,7 +8054,7 @@
             return shared.getSize(text);
         },
 
-        
+
         createInstance : function(el, fixedWidth){
             return Ext.util.TextMetrics.Instance(el, fixedWidth);
         }
@@ -8073,7 +8073,7 @@
     }
 
     var instance = {
-        
+
         getSize : function(text){
             ml.update(text);
             var s = ml.getSize();
@@ -8081,25 +8081,25 @@
             return s;
         },
 
-        
+
         bind : function(el){
             ml.setStyle(
                 Ext.fly(el).getStyles('font-size','font-style', 'font-weight', 'font-family','line-height', 'text-transform', 'letter-spacing')
             );
         },
 
-        
+
         setFixedWidth : function(width){
             ml.setWidth(width);
         },
 
-        
+
         getWidth : function(text){
             ml.dom.style.width = 'auto';
             return this.getSize(text).width;
         },
 
-        
+
         getHeight : function(text){
             return this.getSize(text).height;
         }
@@ -8128,155 +8128,155 @@
 
 Ext.dd.DragDrop.prototype = {
 
-    
+
     id: null,
 
-    
+
     config: null,
 
-    
+
     dragElId: null,
 
-    
+
     handleElId: null,
 
-    
+
     invalidHandleTypes: null,
 
-    
+
     invalidHandleIds: null,
 
-    
+
     invalidHandleClasses: null,
 
-    
+
     startPageX: 0,
 
-    
+
     startPageY: 0,
 
-    
+
     groups: null,
 
-    
+
     locked: false,
 
-    
+
     lock: function() { this.locked = true; },
 
-    
+
     moveOnly: false,
 
-    
+
     unlock: function() { this.locked = false; },
 
-    
+
     isTarget: true,
 
-    
+
     padding: null,
 
-    
+
     _domRef: null,
 
-    
+
     __ygDragDrop: true,
 
-    
+
     constrainX: false,
 
-    
+
     constrainY: false,
 
-    
+
     minX: 0,
 
-    
+
     maxX: 0,
 
-    
+
     minY: 0,
 
-    
+
     maxY: 0,
 
-    
+
     maintainOffset: false,
 
-    
+
     xTicks: null,
 
-    
+
     yTicks: null,
 
-    
+
     primaryButtonOnly: true,
 
-    
+
     available: false,
 
-    
+
     hasOuterHandles: false,
 
-    
+
     b4StartDrag: function(x, y) { },
 
-    
+
     startDrag: function(x, y) {  },
 
-    
+
     b4Drag: function(e) { },
 
-    
+
     onDrag: function(e) {  },
 
-    
+
     onDragEnter: function(e, id) {  },
 
-    
+
     b4DragOver: function(e) { },
 
-    
+
     onDragOver: function(e, id) {  },
 
-    
+
     b4DragOut: function(e) { },
 
-    
+
     onDragOut: function(e, id) {  },
 
-    
+
     b4DragDrop: function(e) { },
 
-    
+
     onDragDrop: function(e, id) {  },
 
-    
+
     onInvalidDrop: function(e) {  },
 
-    
+
     b4EndDrag: function(e) { },
 
-    
+
     endDrag: function(e) {  },
 
-    
+
     b4MouseDown: function(e) {  },
 
-    
+
     onMouseDown: function(e) {  },
 
-    
+
     onMouseUp: function(e) {  },
 
-    
+
     onAvailable: function () {
     },
 
-    
+
     defaultPadding : {left:0, right:0, top:0, bottom:0},
 
-    
+
     constrainTo : function(constrainTo, pad, inContent){
         if(typeof pad == "number"){
             pad = {left: pad, right:pad, top:pad, bottom:pad};
@@ -8300,15 +8300,15 @@
         this.resetConstraints();
         this.setXConstraint(leftSpace - (pad.left||0), // left
                 c.width - leftSpace - b.width - (pad.right||0), //right
-				this.xTickSize
+        this.xTickSize
         );
         this.setYConstraint(topSpace - (pad.top||0), //top
                 c.height - topSpace - b.height - (pad.bottom||0), //bottom
-				this.yTickSize
+        this.yTickSize
         );
     },
 
-    
+
     getEl: function() {
         if (!this._domRef) {
             this._domRef = Ext.getDom(this.id);
@@ -8317,19 +8317,19 @@
         return this._domRef;
     },
 
-    
+
     getDragEl: function() {
         return Ext.getDom(this.dragElId);
     },
 
-    
+
     init: function(id, sGroup, config) {
         this.initTarget(id, sGroup, config);
         Event.on(this.id, "mousedown", this.handleMouseDown, this);
         // Event.on(this.id, "selectstart", Event.preventDefault);
     },
 
-    
+
     initTarget: function(id, sGroup, config) {
 
         // configuration attributes
@@ -8369,7 +8369,7 @@
         this.handleOnAvailable();
     },
 
-    
+
     applyConfig: function() {
 
         // configurable properties:
@@ -8381,14 +8381,14 @@
 
     },
 
-    
+
     handleOnAvailable: function() {
         this.available = true;
         this.resetConstraints();
         this.onAvailable();
     },
 
-     
+
     setPadding: function(iTop, iRight, iBot, iLeft) {
         // this.padding = [iLeft, iRight, iTop, iBot];
         if (!iRight && 0 !== iRight) {
@@ -8400,7 +8400,7 @@
         }
     },
 
-    
+
     setInitPosition: function(diffX, diffY) {
         var el = this.getEl();
 
@@ -8423,7 +8423,7 @@
         this.setStartPosition(p);
     },
 
-    
+
     setStartPosition: function(pos) {
         var p = pos || Dom.getXY( this.getEl() );
         this.deltaSetXY = null;
@@ -8432,13 +8432,13 @@
         this.startPageY = p[1];
     },
 
-    
+
     addToGroup: function(sGroup) {
         this.groups[sGroup] = true;
         this.DDM.regDragDrop(this, sGroup);
     },
 
-    
+
     removeFromGroup: function(sGroup) {
         if (this.groups[sGroup]) {
             delete this.groups[sGroup];
@@ -8447,12 +8447,12 @@
         this.DDM.removeDDFromGroup(this, sGroup);
     },
 
-    
+
     setDragElId: function(id) {
         this.dragElId = id;
     },
 
-    
+
     setHandleElId: function(id) {
         if (typeof id !== "string") {
             id = Ext.id(id);
@@ -8461,7 +8461,7 @@
         this.DDM.regHandle(this.id, id);
     },
 
-    
+
     setOuterHandleElId: function(id) {
         if (typeof id !== "string") {
             id = Ext.id(id);
@@ -8473,7 +8473,7 @@
         this.hasOuterHandles = true;
     },
 
-    
+
     unreg: function() {
         Event.un(this.id, "mousedown",
                 this.handleMouseDown);
@@ -8485,12 +8485,12 @@
         this.unreg();
     },
 
-    
+
     isLocked: function() {
         return (this.DDM.isLocked() || this.locked);
     },
 
-    
+
     handleMouseDown: function(e, oDD){
         if (this.primaryButtonOnly && e.button != 0) {
             return;
@@ -8531,13 +8531,13 @@
                         this.DDM.handleWasClicked(target, this.id)) );
     },
 
-    
+
     addInvalidHandleType: function(tagName) {
         var type = tagName.toUpperCase();
         this.invalidHandleTypes[type] = type;
     },
 
-    
+
     addInvalidHandleId: function(id) {
         if (typeof id !== "string") {
             id = Ext.id(id);
@@ -8545,19 +8545,19 @@
         this.invalidHandleIds[id] = id;
     },
 
-    
+
     addInvalidHandleClass: function(cssClass) {
         this.invalidHandleClasses.push(cssClass);
     },
 
-    
+
     removeInvalidHandleType: function(tagName) {
         var type = tagName.toUpperCase();
         // this.invalidHandleTypes[type] = null;
         delete this.invalidHandleTypes[type];
     },
 
-    
+
     removeInvalidHandleId: function(id) {
         if (typeof id !== "string") {
             id = Ext.id(id);
@@ -8565,7 +8565,7 @@
         delete this.invalidHandleIds[id];
     },
 
-    
+
     removeInvalidHandleClass: function(cssClass) {
         for (var i=0, len=this.invalidHandleClasses.length; i<len; ++i) {
             if (this.invalidHandleClasses[i] == cssClass) {
@@ -8574,7 +8574,7 @@
         }
     },
 
-    
+
     isValidHandleChild: function(node) {
 
         var valid = true;
@@ -8597,7 +8597,7 @@
 
     },
 
-    
+
     setXTicks: function(iStartX, iTickSize) {
         this.xTicks = [];
         this.xTickSize = iTickSize;
@@ -8621,7 +8621,7 @@
         this.xTicks.sort(this.DDM.numericSort) ;
     },
 
-    
+
     setYTicks: function(iStartY, iTickSize) {
         this.yTicks = [];
         this.yTickSize = iTickSize;
@@ -8645,7 +8645,7 @@
         this.yTicks.sort(this.DDM.numericSort) ;
     },
 
-    
+
     setXConstraint: function(iLeft, iRight, iTickSize) {
         this.leftConstraint = iLeft;
         this.rightConstraint = iRight;
@@ -8657,14 +8657,14 @@
         this.constrainX = true;
     },
 
-    
+
     clearConstraints: function() {
         this.constrainX = false;
         this.constrainY = false;
         this.clearTicks();
     },
 
-    
+
     clearTicks: function() {
         this.xTicks = null;
         this.yTicks = null;
@@ -8672,7 +8672,7 @@
         this.yTickSize = 0;
     },
 
-    
+
     setYConstraint: function(iUp, iDown, iTickSize) {
         this.topConstraint = iUp;
         this.bottomConstraint = iDown;
@@ -8685,7 +8685,7 @@
 
     },
 
-    
+
     resetConstraints: function() {
 
 
@@ -8715,7 +8715,7 @@
         }
     },
 
-    
+
     getTick: function(val, tickArray) {
 
         if (!tickArray) {
@@ -8742,7 +8742,7 @@
         }
     },
 
-    
+
     toString: function() {
         return ("DragDrop " + this.id);
     }
@@ -8763,51 +8763,51 @@
 
     return {
 
-        
+
         ids: {},
 
-        
+
         handleIds: {},
 
-        
+
         dragCurrent: null,
 
-        
+
         dragOvers: {},
 
-        
+
         deltaX: 0,
 
-        
+
         deltaY: 0,
 
-        
+
         preventDefault: true,
 
-        
+
         stopPropagation: true,
 
-        
+
         initialized: false,
 
-        
+
         locked: false,
 
-        
+
         init: function() {
             this.initialized = true;
         },
 
-        
+
         POINT: 0,
 
-        
+
         INTERSECT: 1,
 
-        
+
         mode: 0,
 
-        
+
         _execOnAll: function(sMethod, args) {
             for (var i in this.ids) {
                 for (var j in this.ids[i]) {
@@ -8820,7 +8820,7 @@
             }
         },
 
-        
+
         _onLoad: function() {
 
             this.init();
@@ -8834,45 +8834,45 @@
 
         },
 
-        
+
         _onResize: function(e) {
             this._execOnAll("resetConstraints", []);
         },
 
-        
+
         lock: function() { this.locked = true; },
 
-        
+
         unlock: function() { this.locked = false; },
 
-        
+
         isLocked: function() { return this.locked; },
 
-        
+
         locationCache: {},
 
-        
+
         useCache: true,
 
-        
+
         clickPixelThresh: 3,
 
-        
+
         clickTimeThresh: 350,
 
-        
+
         dragThreshMet: false,
 
-        
+
         clickTimeout: null,
 
-        
+
         startX: 0,
 
-        
+
         startY: 0,
 
-        
+
         regDragDrop: function(oDD, sGroup) {
             if (!this.initialized) { this.init(); }
 
@@ -8882,7 +8882,7 @@
             this.ids[sGroup][oDD.id] = oDD;
         },
 
-        
+
         removeDDFromGroup: function(oDD, sGroup) {
             if (!this.ids[sGroup]) {
                 this.ids[sGroup] = {};
@@ -8894,7 +8894,7 @@
             }
         },
 
-        
+
         _remove: function(oDD) {
             for (var g in oDD.groups) {
                 if (g && this.ids[g] && this.ids[g][oDD.id]) {
@@ -8904,7 +8904,7 @@
             delete this.handleIds[oDD.id];
         },
 
-        
+
         regHandle: function(sDDId, sHandleId) {
             if (!this.handleIds[sDDId]) {
                 this.handleIds[sDDId] = {};
@@ -8912,12 +8912,12 @@
             this.handleIds[sDDId][sHandleId] = sHandleId;
         },
 
-        
+
         isDragDrop: function(id) {
             return ( this.getDDById(id) ) ? true : false;
         },
 
-        
+
         getRelated: function(p_oDD, bTargetsOnly) {
             var oDDs = [];
             for (var i in p_oDD.groups) {
@@ -8935,7 +8935,7 @@
             return oDDs;
         },
 
-        
+
         isLegalTarget: function (oDD, oTargetDD) {
             var targets = this.getRelated(oDD, true);
             for (var i=0, len=targets.length;i<len;++i) {
@@ -8947,18 +8947,18 @@
             return false;
         },
 
-        
+
         isTypeOfDD: function (oDD) {
             return (oDD && oDD.__ygDragDrop);
         },
 
-        
+
         isHandle: function(sDDId, sHandleId) {
             return ( this.handleIds[sDDId] &&
                             this.handleIds[sDDId][sHandleId] );
         },
 
-        
+
         getDDById: function(id) {
             for (var i in this.ids) {
                 if (this.ids[i][id]) {
@@ -8968,7 +8968,7 @@
             return null;
         },
 
-        
+
         handleMouseDown: function(e, oDD) {
             if(Ext.QuickTips){
                 Ext.QuickTips.disable();
@@ -8978,7 +8978,7 @@
                 // so clean up first to avoid breaking the next drag
                 this.handleMouseUp(e);
             }
-            
+
             this.currentTarget = e.getTarget();
             this.dragCurrent = oDD;
 
@@ -9001,7 +9001,7 @@
                     this.clickTimeThresh );
         },
 
-        
+
         startDrag: function(x, y) {
             clearTimeout(this.clickTimeout);
             if (this.dragCurrent) {
@@ -9011,7 +9011,7 @@
             this.dragThreshMet = true;
         },
 
-        
+
         handleMouseUp: function(e) {
 
             if(Ext.QuickTips){
@@ -9033,7 +9033,7 @@
             this.stopEvent(e);
         },
 
-        
+
         stopEvent: function(e){
             if(this.stopPropagation) {
                 e.stopPropagation();
@@ -9044,7 +9044,7 @@
             }
         },
 
-        
+
         stopDrag: function(e) {
             // Fire the drag end event for the item that was dragged
             if (this.dragCurrent) {
@@ -9060,7 +9060,7 @@
             this.dragOvers = {};
         },
 
-        
+
         handleMouseMove: function(e) {
             if (! this.dragCurrent) {
                 return true;
@@ -9096,7 +9096,7 @@
             return true;
         },
 
-        
+
         fireEvents: function(e, isDrop) {
             var dc = this.dragCurrent;
 
@@ -9224,7 +9224,7 @@
 
         },
 
-        
+
         getBestMatch: function(dds) {
             var winner = null;
             // Return null if the input is not what we expect
@@ -9260,7 +9260,7 @@
             return winner;
         },
 
-        
+
         refreshCache: function(groups) {
             for (var sGroup in groups) {
                 if ("string" != typeof sGroup) {
@@ -9285,7 +9285,7 @@
             }
         },
 
-        
+
         verifyEl: function(el) {
             if (el) {
                 var parent;
@@ -9304,7 +9304,7 @@
             return false;
         },
 
-        
+
         getLocation: function(oDD) {
             if (! this.isTypeOfDD(oDD)) {
                 return null;
@@ -9333,7 +9333,7 @@
             return new Ext.lib.Region( t, r, b, l );
         },
 
-        
+
         isOverTarget: function(pt, oTarget, intersect) {
             // use cache if available
             var loc = this.locationCache[oTarget.id];
@@ -9384,12 +9384,12 @@
             }
         },
 
-        
+
         _onUnload: function(e, me) {
             Ext.dd.DragDropMgr.unregAll();
         },
 
-        
+
         unregAll: function() {
 
             if (this.dragCurrent) {
@@ -9407,10 +9407,10 @@
             this.ids = {};
         },
 
-        
+
         elementCache: {},
 
-        
+
         getElWrapper: function(id) {
             var oWrapper = this.elementCache[id];
             if (!oWrapper || !oWrapper.el) {
@@ -9420,38 +9420,38 @@
             return oWrapper;
         },
 
-        
+
         getElement: function(id) {
             return Ext.getDom(id);
         },
 
-        
+
         getCss: function(id) {
             var el = Ext.getDom(id);
             return (el) ? el.style : null;
         },
 
-        
+
         ElementWrapper: function(el) {
-                
+
                 this.el = el || null;
-                
+
                 this.id = this.el && el.id;
-                
+
                 this.css = this.el && el.style;
             },
 
-        
+
         getPosX: function(el) {
             return Ext.lib.Dom.getX(el);
         },
 
-        
+
         getPosY: function(el) {
             return Ext.lib.Dom.getY(el);
         },
 
-        
+
         swapNode: function(n1, n2) {
             if (n1.swapNode) {
                 n1.swapNode(n2);
@@ -9470,7 +9470,7 @@
             }
         },
 
-        
+
         getScroll: function () {
             var t, l, dde=document.documentElement, db=document.body;
             if (dde && (dde.scrollTop || dde.scrollLeft)) {
@@ -9485,30 +9485,30 @@
             return { top: t, left: l };
         },
 
-        
+
         getStyle: function(el, styleProp) {
             return Ext.fly(el).getStyle(styleProp);
         },
 
-        
+
         getScrollTop: function () { return this.getScroll().top; },
 
-        
+
         getScrollLeft: function () { return this.getScroll().left; },
 
-        
+
         moveToEl: function (moveEl, targetEl) {
             var aCoord = Ext.lib.Dom.getXY(targetEl);
             Ext.lib.Dom.setXY(moveEl, aCoord);
         },
 
-        
+
         numericSort: function(a, b) { return (a - b); },
 
-        
+
         _timeoutCount: 0,
 
-        
+
         _addListeners: function() {
             var DDM = Ext.dd.DDM;
             if ( Ext.lib.Event && document ) {
@@ -9524,7 +9524,7 @@
             }
         },
 
-        
+
         handleWasClicked: function(node, id) {
             if (this.isHandle(id, node.id)) {
                 return true;
@@ -9563,23 +9563,23 @@
 
 Ext.extend(Ext.dd.DD, Ext.dd.DragDrop, {
 
-    
+
     scroll: true,
 
-    
+
     autoOffset: function(iPageX, iPageY) {
         var x = iPageX - this.startPageX;
         var y = iPageY - this.startPageY;
         this.setDelta(x, y);
     },
 
-    
+
     setDelta: function(iDeltaX, iDeltaY) {
         this.deltaX = iDeltaX;
         this.deltaY = iDeltaY;
     },
 
-    
+
     setDragElPos: function(iPageX, iPageY) {
         // the first time we do this, we are going to check to make sure
         // the element has css positioning
@@ -9588,7 +9588,7 @@
         this.alignElWithMouse(el, iPageX, iPageY);
     },
 
-    
+
     alignElWithMouse: function(el, iPageX, iPageY) {
         var oCoord = this.getTargetCoord(iPageX, iPageY);
         var fly = el.dom ? el : Ext.fly(el, '_dd');
@@ -9607,7 +9607,7 @@
         return oCoord;
     },
 
-    
+
     cachePosition: function(iPageX, iPageY) {
         if (iPageX) {
             this.lastPageX = iPageX;
@@ -9619,7 +9619,7 @@
         }
     },
 
-    
+
     autoScroll: function(x, y, h, w) {
 
         if (this.scroll) {
@@ -9685,7 +9685,7 @@
         }
     },
 
-    
+
     getTargetCoord: function(iPageX, iPageY) {
 
 
@@ -9709,20 +9709,20 @@
         return {x:x, y:y};
     },
 
-    
+
     applyConfig: function() {
         Ext.dd.DD.superclass.applyConfig.call(this);
         this.scroll = (this.config.scroll !== false);
     },
 
-    
+
     b4MouseDown: function(e) {
         // this.resetConstraints();
         this.autoOffset(e.getPageX(),
                             e.getPageY());
     },
 
-    
+
     b4Drag: function(e) {
         this.setDragElPos(e.getPageX(),
                             e.getPageY());
@@ -9735,7 +9735,7 @@
     //////////////////////////////////////////////////////////////////////////
     // Debugging ygDragDrop events that can be overridden
     //////////////////////////////////////////////////////////////////////////
-    
+
 
 });
 
@@ -9751,13 +9751,13 @@
 
 Ext.extend(Ext.dd.DDProxy, Ext.dd.DD, {
 
-    
+
     resizeFrame: true,
 
-    
+
     centerFrame: false,
 
-    
+
     createFrame: function() {
         var self = this;
         var body = document.body;
@@ -9787,7 +9787,7 @@
         }
     },
 
-    
+
     initFrame: function() {
         this.createFrame();
     },
@@ -9800,7 +9800,7 @@
         this.setDragElId(this.config.dragElId || Ext.dd.DDProxy.dragElId);
     },
 
-    
+
     showFrame: function(iPageX, iPageY) {
         var el = this.getEl();
         var dragEl = this.getDragEl();
@@ -9818,7 +9818,7 @@
         Ext.fly(dragEl).show();
     },
 
-    
+
     _resizeProxy: function() {
         if (this.resizeFrame) {
             var el = this.getEl();
@@ -10052,18 +10052,18 @@
     var els = {};
     var dragEl = null;
     var proc = {};
-    
+
     var onStop = function(e){
         dragEl = null;
         clearProc();
     };
-    
+
     var triggerRefresh = function(){
         if(ddm.dragCurrent){
              ddm.refreshCache(ddm.dragCurrent.groups);
         }
     };
-    
+
     var doScroll = function(){
         if(ddm.dragCurrent){
             var dds = Ext.dd.ScrollManager;
@@ -10078,7 +10078,7 @@
             }
         }
     };
-    
+
     var clearProc = function(){
         if(proc.id){
             clearInterval(proc.id);
@@ -10087,16 +10087,16 @@
         proc.el = null;
         proc.dir = "";
     };
-    
+
     var startProc = function(el, dir){
         clearProc();
         proc.el = el;
         proc.dir = dir;
-        var freq = (el.ddScrollConfig && el.ddScrollConfig.frequency) ? 
+        var freq = (el.ddScrollConfig && el.ddScrollConfig.frequency) ?
                 el.ddScrollConfig.frequency : Ext.dd.ScrollManager.frequency;
         proc.id = setInterval(doScroll, freq);
     };
-    
+
     var onFire = function(e, isDrop){
         if(isDrop || !ddm.dragCurrent){ return; }
         var dds = Ext.dd.ScrollManager;
@@ -10105,7 +10105,7 @@
             // refresh regions on drag start
             dds.refreshCache();
         }
-        
+
         var xy = Ext.lib.Event.getXY(e);
         var pt = new Ext.lib.Point(xy[0], xy[1]);
         for(var id in els){
@@ -10137,53 +10137,53 @@
         }
         clearProc();
     };
-    
+
     ddm.fireEvents = ddm.fireEvents.createSequence(onFire, ddm);
     ddm.stopDrag = ddm.stopDrag.createSequence(onStop, ddm);
-    
+
     return {
-        
+
         register : function(el){
             if(Ext.isArray(el)){
                 for(var i = 0, len = el.length; i < len; i++) {
-                	this.register(el[i]);
+                  this.register(el[i]);
                 }
             }else{
                 el = Ext.get(el);
                 els[el.id] = el;
             }
         },
-        
-        
+
+
         unregister : function(el){
             if(Ext.isArray(el)){
                 for(var i = 0, len = el.length; i < len; i++) {
-                	this.unregister(el[i]);
+                  this.unregister(el[i]);
                 }
             }else{
                 el = Ext.get(el);
                 delete els[el.id];
             }
         },
-        
-        
+
+
         vthresh : 25,
-        
+
         hthresh : 25,
 
-        
+
         increment : 100,
-        
-        
+
+
         frequency : 500,
-        
-        
+
+
         animate: true,
-        
-        
+
+
         animDuration: .4,
-        
-        
+
+
         refreshCache : function(){
             for(var id in els){
                 if(typeof els[id] == 'object'){ // for people extending the object prototype
@@ -10195,8 +10195,8 @@
 }();
 
 Ext.dd.Registry = function(){
-    var elements = {}; 
-    var handles = {}; 
+    var elements = {};
+    var handles = {};
     var autoIdSeed = 0;
 
     var getId = function(el, autogen){
@@ -10210,9 +10210,9 @@
         }
         return id;
     };
-    
+
     return {
-    
+
         register : function(el, data){
             data = data || {};
             if(typeof el == "string"){
@@ -10226,12 +10226,12 @@
             if(data.handles){
                 var hs = data.handles;
                 for(var i = 0, len = hs.length; i < len; i++){
-                	handles[getId(hs[i])] = data;
+                  handles[getId(hs[i])] = data;
                 }
             }
         },
 
-    
+
         unregister : function(el){
             var id = getId(el, false);
             var data = elements[id];
@@ -10240,13 +10240,13 @@
                 if(data.handles){
                     var hs = data.handles;
                     for(var i = 0, len = hs.length; i < len; i++){
-                    	delete handles[getId(hs[i], false)];
+                      delete handles[getId(hs[i], false)];
                     }
                 }
             }
         },
 
-    
+
         getHandle : function(id){
             if(typeof id != "string"){ // must be element?
                 id = id.id;
@@ -10254,13 +10254,13 @@
             return handles[id];
         },
 
-    
+
         getHandleFromEvent : function(e){
             var t = Ext.lib.Event.getTarget(e);
             return t ? handles[t.id] : null;
         },
 
-    
+
         getTarget : function(id){
             if(typeof id != "string"){ // must be element?
                 id = id.id;
@@ -10268,7 +10268,7 @@
             return elements[id];
         },
 
-    
+
         getTargetFromEvent : function(e){
             var t = Ext.lib.Event.getTarget(e);
             return t ? elements[t.id] || handles[t.id] : null;
@@ -10285,7 +10285,7 @@
                 {tag: "div", cls: "x-dd-drop-icon"},
                 {tag: "div", cls: "x-dd-drag-ghost"}
             ]
-        }, 
+        },
         shadow: !config || config.shadow !== false
     });
     this.ghost = Ext.get(this.el.dom.childNodes[1]);
@@ -10293,12 +10293,12 @@
 };
 
 Ext.dd.StatusProxy.prototype = {
-    
+
     dropAllowed : "x-dd-drop-ok",
-    
+
     dropNotAllowed : "x-dd-drop-nodrop",
 
-    
+
     setStatus : function(cssClass){
         cssClass = cssClass || this.dropNotAllowed;
         if(this.dropStatus != cssClass){
@@ -10307,7 +10307,7 @@
         }
     },
 
-    
+
     reset : function(clearGhost){
         this.el.dom.className = "x-dd-drag-proxy " + this.dropNotAllowed;
         this.dropStatus = this.dropNotAllowed;
@@ -10316,7 +10316,7 @@
         }
     },
 
-    
+
     update : function(html){
         if(typeof html == "string"){
             this.ghost.update(html);
@@ -10325,23 +10325,23 @@
             html.style.margin = "0";
             this.ghost.dom.appendChild(html);
         }
-        var el = this.ghost.dom.firstChild; 
+        var el = this.ghost.dom.firstChild;
         if(el){
             Ext.fly(el).setStyle(Ext.isIE ? 'styleFloat' : 'cssFloat', 'none');
         }
     },
 
-    
+
     getEl : function(){
         return this.el;
     },
 
-    
+
     getGhost : function(){
         return this.ghost;
     },
 
-    
+
     hide : function(clear){
         this.el.hide();
         if(clear){
@@ -10349,24 +10349,24 @@
         }
     },
 
-    
+
     stop : function(){
         if(this.anim && this.anim.isAnimated && this.anim.isAnimated()){
             this.anim.stop();
         }
     },
 
-    
+
     show : function(){
         this.el.show();
     },
 
-    
+
     sync : function(){
         this.el.sync();
     },
 
-    
+
     repair : function(xy, callback, scope){
         this.callback = callback;
         this.scope = scope;
@@ -10402,26 +10402,26 @@
     if(!this.dragData){
         this.dragData = {};
     }
-    
+
     Ext.apply(this, config);
-    
+
     if(!this.proxy){
         this.proxy = new Ext.dd.StatusProxy();
     }
-    Ext.dd.DragSource.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group, 
+    Ext.dd.DragSource.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group,
           {dragElId : this.proxy.id, resizeFrame: false, isTarget: false, scroll: this.scroll === true});
-    
+
     this.dragging = false;
 };
 
 Ext.extend(Ext.dd.DragSource, Ext.dd.DDProxy, {
-    
-    
+
+
     dropAllowed : "x-dd-drop-ok",
-    
+
     dropNotAllowed : "x-dd-drop-nodrop",
 
-    
+
     getDragData : function(e){
         return this.dragData;
     },
@@ -10437,15 +10437,15 @@
             }else{
                 this.proxy.setStatus(this.dropAllowed);
             }
-            
+
             if(this.afterDragEnter){
-                
+
                 this.afterDragEnter(target, e, id);
             }
         }
     },
 
-    
+
     beforeDragEnter : function(target, e, id){
         return true;
     },
@@ -10466,13 +10466,13 @@
             }
 
             if(this.afterDragOver){
-                
+
                 this.afterDragOver(target, e, id);
             }
         }
     },
 
-    
+
     beforeDragOver : function(target, e, id){
         return true;
     },
@@ -10486,18 +10486,18 @@
             }
             this.proxy.reset();
             if(this.afterDragOut){
-                
+
                 this.afterDragOut(target, e, id);
             }
         }
         this.cachedTarget = null;
     },
 
-    
+
     beforeDragOut : function(target, e, id){
         return true;
     },
-    
+
     // private
     onDragDrop : function(e, id){
         var target = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(id);
@@ -10511,16 +10511,16 @@
             }else{
                 this.onValidDrop(target, e, id);
             }
-            
+
             if(this.afterDragDrop){
-                
+
                 this.afterDragDrop(target, e, id);
             }
         }
         delete this.cachedTarget;
     },
 
-    
+
     beforeDragDrop : function(target, e, id){
         return true;
     },
@@ -10529,14 +10529,14 @@
     onValidDrop : function(target, e, id){
         this.hideProxy();
         if(this.afterValidDrop){
-            
+
             this.afterValidDrop(target, e, id);
         }
     },
 
     // private
     getRepairXY : function(e, data){
-        return this.el.getXY();  
+        return this.el.getXY();
     },
 
     // private
@@ -10551,7 +10551,7 @@
         this.proxy.repair(this.getRepairXY(e, this.dragData), this.afterRepair, this);
 
         if(this.afterInvalidDrop){
-            
+
             this.afterInvalidDrop(e, id);
         }
     },
@@ -10564,7 +10564,7 @@
         this.dragging = false;
     },
 
-    
+
     beforeInvalidDrop : function(target, e, id){
         return true;
     },
@@ -10579,15 +10579,15 @@
             this.dragData = data;
             this.proxy.stop();
             Ext.dd.DragSource.superclass.handleMouseDown.apply(this, arguments);
-        } 
+        }
     },
 
-    
+
     onBeforeDrag : function(data, e){
         return true;
     },
 
-    
+
     onStartDrag : Ext.emptyFn,
 
     // private override
@@ -10608,14 +10608,14 @@
         return true;
     },
 
-    
+
     getProxy : function(){
-        return this.proxy;  
+        return this.proxy;
     },
 
-    
+
     hideProxy : function(){
-        this.proxy.hide();  
+        this.proxy.hide();
         this.proxy.reset(true);
         this.dragging = false;
     },
@@ -10637,33 +10637,33 @@
     // private
     onEndDrag : function(data, e){
     },
-    
+
     // private - pin to cursor
     autoOffset : function(x, y) {
         this.setDelta(-12, -20);
-    }    
+    }
 });
 
 Ext.dd.DropTarget = function(el, config){
     this.el = Ext.get(el);
-    
+
     Ext.apply(this, config);
-    
+
     if(this.containerScroll){
         Ext.dd.ScrollManager.register(this.el);
     }
-    
-    Ext.dd.DropTarget.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group, 
+
+    Ext.dd.DropTarget.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group,
           {isTarget: true});
 
 };
 
 Ext.extend(Ext.dd.DropTarget, Ext.dd.DDTarget, {
-    
-    
-    
+
+
+
     dropAllowed : "x-dd-drop-ok",
-    
+
     dropNotAllowed : "x-dd-drop-nodrop",
 
     // private
@@ -10672,7 +10672,7 @@
     // private
     isNotifyTarget : true,
 
-    
+
     notifyEnter : function(dd, e, data){
         if(this.overClass){
             this.el.addClass(this.overClass);
@@ -10680,19 +10680,19 @@
         return this.dropAllowed;
     },
 
-    
+
     notifyOver : function(dd, e, data){
         return this.dropAllowed;
     },
 
-    
+
     notifyOut : function(dd, e, data){
         if(this.overClass){
             this.el.removeClass(this.overClass);
         }
     },
 
-    
+
     notifyDrop : function(dd, e, data){
         return false;
     }
@@ -10706,22 +10706,22 @@
 };
 
 Ext.extend(Ext.dd.DragZone, Ext.dd.DragSource, {
-    
-    
 
-    
+
+
+
     getDragData : function(e){
         return Ext.dd.Registry.getHandleFromEvent(e);
     },
-    
-    
+
+
     onInitDrag : function(x, y){
         this.proxy.update(this.dragData.ddel.cloneNode(true));
         this.onStartDrag(x, y);
         return true;
     },
-    
-    
+
+
     afterRepair : function(){
         if(Ext.enableFx){
             Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9");
@@ -10729,9 +10729,9 @@
         this.dragging = false;
     },
 
-    
+
     getRepairXY : function(e){
-        return Ext.Element.fly(this.dragData.ddel).getXY();  
+        return Ext.Element.fly(this.dragData.ddel).getXY();
     }
 });
 
@@ -10740,47 +10740,47 @@
 };
 
 Ext.extend(Ext.dd.DropZone, Ext.dd.DropTarget, {
-    
+
     getTargetFromEvent : function(e){
         return Ext.dd.Registry.getTargetFromEvent(e);
     },
 
-    
+
     onNodeEnter : function(n, dd, e, data){
-        
+
     },
 
-    
+
     onNodeOver : function(n, dd, e, data){
         return this.dropAllowed;
     },
 
-    
+
     onNodeOut : function(n, dd, e, data){
-        
+
     },
 
-    
+
     onNodeDrop : function(n, dd, e, data){
         return false;
     },
 
-    
+
     onContainerOver : function(dd, e, data){
         return this.dropNotAllowed;
     },
 
-    
+
     onContainerDrop : function(dd, e, data){
         return false;
     },
 
-    
+
     notifyEnter : function(dd, e, data){
         return this.dropNotAllowed;
     },
 
-    
+
     notifyOver : function(dd, e, data){
         var n = this.getTargetFromEvent(e);
         if(!n){ // not over valid drop target
@@ -10800,7 +10800,7 @@
         return this.onNodeOver(n, dd, e, data);
     },
 
-    
+
     notifyOut : function(dd, e, data){
         if(this.lastOverNode){
             this.onNodeOut(this.lastOverNode, dd, e, data);
@@ -10808,7 +10808,7 @@
         }
     },
 
-    
+
     notifyDrop : function(dd, e, data){
         if(this.lastOverNode){
             this.onNodeOut(this.lastOverNode, dd, e, data);
@@ -10823,35 +10823,35 @@
     // private
     triggerCacheRefresh : function(){
         Ext.dd.DDM.refreshCache(this.groups);
-    }  
+    }
 });
 
 
 Ext.data.SortTypes = {
-    
+
     none : function(s){
         return s;
     },
-    
-    
+
+
     stripTagsRE : /<\/?[^>]+>/gi,
-    
-    
+
+
     asText : function(s){
         return String(s).replace(this.stripTagsRE, "");
     },
-    
-    
+
+
     asUCText : function(s){
         return String(s).toUpperCase().replace(this.stripTagsRE, "");
     },
-    
-    
+
+
     asUCString : function(s) {
-    	return String(s).toUpperCase();
+      return String(s).toUpperCase();
     },
-    
-    
+
+
     asDate : function(s) {
         if(!s){
             return 0;
@@ -10859,21 +10859,21 @@
         if(Ext.isDate(s)){
             return s.getTime();
         }
-    	return Date.parse(String(s));
+      return Date.parse(String(s));
     },
-    
-    
+
+
     asFloat : function(s) {
-    	var val = parseFloat(String(s).replace(/,/g, ""));
+      var val = parseFloat(String(s).replace(/,/g, ""));
         if(isNaN(val)) val = 0;
-    	return val;
+      return val;
     },
-    
-    
+
+
     asInt : function(s) {
         var val = parseInt(String(s).replace(/,/g, ""));
         if(isNaN(val)) val = 0;
-    	return val;
+      return val;
     }
 };
 
@@ -10904,14 +10904,14 @@
 Ext.data.Record.COMMIT = 'commit';
 
 Ext.data.Record.prototype = {
-    
-    
-    
-    
+
+
+
+
     dirty : false,
     editing : false,
     error: null,
-    
+
     modified: null,
 
     // private
@@ -10919,7 +10919,7 @@
         this.store = store;
     },
 
-    
+
     set : function(name, value){
         if(String(this.data[name]) == String(value)){
             return;
@@ -10937,24 +10937,24 @@
         }
     },
 
-    
+
     get : function(name){
         return this.data[name];
     },
 
-    
+
     beginEdit : function(){
         this.editing = true;
         this.modified = {};
     },
 
-    
+
     cancelEdit : function(){
         this.editing = false;
         delete this.modified;
     },
 
-    
+
     endEdit : function(){
         this.editing = false;
         if(this.dirty && this.store){
@@ -10962,7 +10962,7 @@
         }
     },
 
-    
+
     reject : function(silent){
         var m = this.modified;
         for(var n in m){
@@ -10978,7 +10978,7 @@
         }
     },
 
-    
+
     commit : function(silent){
         this.dirty = false;
         delete this.modified;
@@ -10988,7 +10988,7 @@
         }
     },
 
-    
+
     getChanges : function(){
         var m = this.modified, cs = {};
         for(var n in m){
@@ -11009,35 +11009,35 @@
         this.error = null;
     },
 
-    
+
     copy : function(newId) {
         return new this.constructor(Ext.apply({}, this.data), newId || this.id);
     },
 
-    
+
     isModified : function(fieldName){
         return !!(this.modified && this.modified.hasOwnProperty(fieldName));
     }
 };
 
 Ext.StoreMgr = Ext.apply(new Ext.util.MixedCollection(), {
-    
 
-    
+
+
     register : function(){
         for(var i = 0, s; s = arguments[i]; i++){
             this.add(s);
         }
     },
 
-    
+
     unregister : function(){
         for(var i = 0, s; s = arguments[i]; i++){
             this.remove(this.lookup(s));
         }
     },
 
-    
+
     lookup : function(id){
         return typeof id == "object" ? id : this.get(id);
     },
@@ -11053,9 +11053,9 @@
     this.data.getKey = function(o){
         return o.id;
     };
-    
+
     this.baseParams = {};
-    
+
     this.paramNames = {
         "start" : "start",
         "limit" : "limit",
@@ -11083,31 +11083,31 @@
         }
     }
 
-    
+
     if(this.recordType){
-        
+
         this.fields = this.recordType.prototype.fields;
     }
     this.modified = [];
 
     this.addEvents(
-        
+
         'datachanged',
-        
+
         'metachange',
-        
+
         'add',
-        
+
         'remove',
-        
+
         'update',
-        
+
         'clear',
-        
+
         'beforeload',
-        
+
         'load',
-        
+
         'loadexception'
     );
 
@@ -11135,21 +11135,21 @@
     }
 };
 Ext.extend(Ext.data.Store, Ext.util.Observable, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
     remoteSort : false,
 
-    
+
     pruneModifiedRecords : false,
 
-    
+
    lastOptions : null,
 
     destroy : function(){
@@ -11160,7 +11160,7 @@
         this.purgeListeners();
     },
 
-    
+
     add : function(records){
         records = [].concat(records);
         if(records.length < 1){
@@ -11177,13 +11177,13 @@
         this.fireEvent("add", this, records, index);
     },
 
-    
+
     addSorted : function(record){
         var index = this.findInsertIndex(record);
         this.insert(index, record);
     },
 
-    
+
     remove : function(record){
         var index = this.data.indexOf(record);
         this.data.removeAt(index);
@@ -11195,13 +11195,13 @@
         }
         this.fireEvent("remove", this, record, index);
     },
-    
-    
+
+
     removeAt : function(index){
-        this.remove(this.getAt(index));    
+        this.remove(this.getAt(index));
     },
 
-    
+
     removeAll : function(){
         this.data.clear();
         if(this.snapshot){
@@ -11213,7 +11213,7 @@
         this.fireEvent("clear", this);
     },
 
-    
+
     insert : function(index, records){
         records = [].concat(records);
         for(var i = 0, len = records.length; i < len; i++){
@@ -11223,27 +11223,27 @@
         this.fireEvent("add", this, records, index);
     },
 
-    
+
     indexOf : function(record){
         return this.data.indexOf(record);
     },
 
-    
+
     indexOfId : function(id){
         return this.data.indexOfKey(id);
     },
 
-    
+
     getById : function(id){
         return this.data.key(id);
     },
 
-    
+
     getAt : function(index){
         return this.data.itemAt(index);
     },
 
-    
+
     getRange : function(start, end){
         return this.data.getRange(start, end);
     },
@@ -11256,7 +11256,7 @@
         this.lastOptions = o;
     },
 
-    
+
     load : function(options){
         options = options || {};
         if(this.fireEvent("beforeload", this, options) !== false){
@@ -11274,7 +11274,7 @@
         }
     },
 
-    
+
     reload : function(options){
         this.load(Ext.applyIf(options||{}, this.lastOptions));
     },
@@ -11318,23 +11318,23 @@
         }
     },
 
-    
+
     loadData : function(o, append){
         var r = this.reader.readRecords(o);
         this.loadRecords(r, {add: append}, true);
     },
 
-    
+
     getCount : function(){
         return this.data.length || 0;
     },
 
-    
+
     getTotalCount : function(){
         return this.totalLength || 0;
     },
 
-    
+
     getSortState : function(){
         return this.sortInfo;
     },
@@ -11361,14 +11361,14 @@
         }
     },
 
-    
+
     setDefaultSort : function(field, dir){
         dir = dir ? dir.toUpperCase() : "ASC";
         this.sortInfo = {field: field, direction: dir};
         this.sortToggle[field] = dir;
     },
 
-    
+
     sort : function(fieldName, dir){
         var f = this.fields.get(fieldName);
         if(!f){
@@ -11401,12 +11401,12 @@
         }
     },
 
-    
+
     each : function(fn, scope){
         this.data.each(fn, scope);
     },
 
-    
+
     getModifiedRecords : function(){
         return this.modified;
     },
@@ -11422,7 +11422,7 @@
         };
     },
 
-    
+
     sum : function(property, start, end){
         var rs = this.data.items, v = 0;
         start = start || 0;
@@ -11434,43 +11434,43 @@
         return v;
     },
 
-    
+
     filter : function(property, value, anyMatch, caseSensitive){
         var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
         return fn ? this.filterBy(fn) : this.clearFilter();
     },
 
-    
+
     filterBy : function(fn, scope){
         this.snapshot = this.snapshot || this.data;
         this.data = this.queryBy(fn, scope||this);
         this.fireEvent("datachanged", this);
     },
 
-    
+
     query : function(property, value, anyMatch, caseSensitive){
         var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
         return fn ? this.queryBy(fn) : this.data.clone();
     },
 
-    
+
     queryBy : function(fn, scope){
         var data = this.snapshot || this.data;
         return data.filterBy(fn, scope||this);
     },
 
-    
+
     find : function(property, value, start, anyMatch, caseSensitive){
         var fn = this.createFilterFn(property, value, anyMatch, caseSensitive);
         return fn ? this.data.findIndexBy(fn, null, start) : -1;
     },
 
-    
+
     findBy : function(fn, scope, start){
         return this.data.findIndexBy(fn, scope, start);
     },
 
-    
+
     collect : function(dataIndex, allowNull, bypassFilter){
         var d = (bypassFilter === true && this.snapshot) ?
                 this.snapshot.items : this.data.items;
@@ -11486,7 +11486,7 @@
         return r;
     },
 
-    
+
     clearFilter : function(suppressEvent){
         if(this.isFiltered()){
             this.data = this.snapshot;
@@ -11497,7 +11497,7 @@
         }
     },
 
-    
+
     isFiltered : function(){
         return this.snapshot && this.snapshot != this.data;
     },
@@ -11522,7 +11522,7 @@
         this.fireEvent("update", this, record, Ext.data.Record.COMMIT);
     },
 
-    
+
     commitChanges : function(){
         var m = this.modified.slice(0);
         this.modified = [];
@@ -11531,7 +11531,7 @@
         }
     },
 
-    
+
     rejectChanges : function(){
         var m = this.modified.slice(0);
         this.modified = [];
@@ -11586,8 +11586,8 @@
 });
 
 Ext.data.JsonStore = function(c){
-    
-    
+
+
     Ext.data.JsonStore.superclass.constructor.call(this, Ext.apply(c, {
         proxy: c.proxy || (!c.data ? new Ext.data.HttpProxy({url: c.url}) : undefined),
         reader: new Ext.data.JsonReader(c, c.fields)
@@ -11600,17 +11600,17 @@
         config = {name: config};
     }
     Ext.apply(this, config);
-    
+
     if(!this.type){
         this.type = "auto";
     }
-    
+
     var st = Ext.data.SortTypes;
     // named sortTypes are supported, here we look them up
     if(typeof this.sortType == "string"){
         this.sortType = st[this.sortType];
     }
-    
+
     // set default sortType for strings and dates
     if(!this.sortType){
         switch(this.type){
@@ -11650,7 +11650,7 @@
             case "float":
                 cv = function(v){
                     return v !== undefined && v !== null && v !== '' ?
-                           parseFloat(String(v).replace(stripRe, ""), 10) : ''; 
+                           parseFloat(String(v).replace(stripRe, ""), 10) : '';
                     };
                 break;
             case "bool":
@@ -11678,44 +11678,44 @@
                     return parsed ? new Date(parsed) : null;
                 };
              break;
-            
+
         }
         this.convert = cv;
     }
 };
 
 Ext.data.Field.prototype = {
-    
-    
-    
-    
+
+
+
+
     dateFormat: null,
-    
+
     defaultValue: "",
-    
+
     mapping: null,
-    
+
     sortType : null,
-    
+
     sortDir : "ASC"
 };
 
 Ext.data.DataReader = function(meta, recordType){
-    
+
     this.meta = meta;
-    this.recordType = Ext.isArray(recordType) ? 
+    this.recordType = Ext.isArray(recordType) ?
         Ext.data.Record.create(recordType) : recordType;
 };
 
 Ext.data.DataReader.prototype = {
-    
+
 };
 
 Ext.data.DataProxy = function(){
     this.addEvents(
-        
+
         'beforeload',
-        
+
         'load'
     );
     Ext.data.DataProxy.superclass.constructor.call(this);
@@ -11729,9 +11729,9 @@
 };
 
 Ext.extend(Ext.data.MemoryProxy, Ext.data.DataProxy, {
-    
-    
-    
+
+
+
     load : function(params, reader, callback, scope, arg){
         params = params || {};
         var result;
@@ -11744,29 +11744,29 @@
         }
         callback.call(scope, result, arg, true);
     },
-    
+
     // private
     update : function(params, records){
-        
+
     }
 });
 
 Ext.data.HttpProxy = function(conn){
     Ext.data.HttpProxy.superclass.constructor.call(this);
-    
+
     this.conn = conn;
     this.useAjax = !conn || !conn.events;
 
-    
+
 };
 
 Ext.extend(Ext.data.HttpProxy, Ext.data.DataProxy, {
-    
+
     getConnection : function(){
         return this.useAjax ? Ext.Ajax : this.conn;
     },
 
-    
+
     load : function(params, reader, callback, scope, arg){
         if(this.fireEvent("beforeload", this, params) !== false){
             var  o = {
@@ -11813,15 +11813,15 @@
         this.fireEvent("load", this, o, o.request.arg);
         o.request.callback.call(o.request.scope, result, o.request.arg, true);
     },
-    
+
     // private
     update : function(dataSet){
-        
+
     },
-    
+
     // private
     updateResponse : function(dataSet){
-        
+
     }
 });
 
@@ -11829,22 +11829,22 @@
     Ext.data.ScriptTagProxy.superclass.constructor.call(this);
     Ext.apply(this, config);
     this.head = document.getElementsByTagName("head")[0];
-    
-    
+
+
 };
 
 Ext.data.ScriptTagProxy.TRANS_ID = 1000;
 
 Ext.extend(Ext.data.ScriptTagProxy, Ext.data.DataProxy, {
-    
-    
+
+
     timeout : 30000,
-    
+
     callbackParam : "callback",
-    
+
     nocache : true,
 
-    
+
     load : function(params, reader, callback, scope, arg){
         if(this.fireEvent("beforeload", this, params) !== false){
 
@@ -11898,7 +11898,7 @@
         return this.trans ? true : false;
     },
 
-    
+
     abort : function(){
         if(this.isLoading()){
             this.destroyTrans(this.trans);
@@ -11955,8 +11955,8 @@
     Ext.data.JsonReader.superclass.constructor.call(this, meta, recordType || meta.fields);
 };
 Ext.extend(Ext.data.JsonReader, Ext.data.DataReader, {
-    
-    
+
+
     read : function(response){
         var json = response.responseText;
         var o = eval("("+json+")");
@@ -11971,12 +11971,12 @@
 
     },
 
-    
+
     simpleAccess: function(obj, subsc) {
-    	return obj[subsc];
+      return obj[subsc];
     },
 
-	
+
     getJsonAccessor: function(){
         var re = /[\[\.]/;
         return function(expr) {
@@ -11991,9 +11991,9 @@
         };
     }(),
 
-    
+
     readRecords : function(o){
-        
+
         this.jsonData = o;
         if(o.metaData){
             delete this.ef;
@@ -12007,21 +12007,21 @@
 //      Generate extraction functions for the totalProperty, the root, the id, and for each field
         if (!this.ef) {
             if(s.totalProperty) {
-	            this.getTotal = this.getJsonAccessor(s.totalProperty);
-	        }
-	        if(s.successProperty) {
-	            this.getSuccess = this.getJsonAccessor(s.successProperty);
-	        }
-	        this.getRoot = s.root ? this.getJsonAccessor(s.root) : function(p){return p;};
-	        if (s.id) {
-	        	var g = this.getJsonAccessor(s.id);
-	        	this.getId = function(rec) {
-	        		var r = g(rec);
-		        	return (r === undefined || r === "") ? null : r;
-	        	};
-	        } else {
-	        	this.getId = function(){return null;};
-	        }
+              this.getTotal = this.getJsonAccessor(s.totalProperty);
+          }
+          if(s.successProperty) {
+              this.getSuccess = this.getJsonAccessor(s.successProperty);
+          }
+          this.getRoot = s.root ? this.getJsonAccessor(s.root) : function(p){return p;};
+          if (s.id) {
+            var g = this.getJsonAccessor(s.id);
+            this.getId = function(rec) {
+              var r = g(rec);
+              return (r === undefined || r === "") ? null : r;
+            };
+          } else {
+            this.getId = function(){return null;};
+          }
             this.ef = [];
             for(var i = 0; i < fl; i++){
                 f = fi[i];
@@ -12030,8 +12030,8 @@
             }
         }
 
-    	var root = this.getRoot(o), c = root.length, totalRecords = c, success = true;
-    	if(s.totalProperty){
+      var root = this.getRoot(o), c = root.length, totalRecords = c, success = true;
+      if(s.totalProperty){
             var v = parseInt(this.getTotal(o), 10);
             if(!isNaN(v)){
                 totalRecords = v;
@@ -12044,24 +12044,24 @@
             }
         }
         var records = [];
-	    for(var i = 0; i < c; i++){
-		    var n = root[i];
-	        var values = {};
-	        var id = this.getId(n);
-	        for(var j = 0; j < fl; j++){
-	            f = fi[j];
+      for(var i = 0; i < c; i++){
+        var n = root[i];
+          var values = {};
+          var id = this.getId(n);
+          for(var j = 0; j < fl; j++){
+              f = fi[j];
                 var v = this.ef[j](n);
                 values[f.name] = f.convert((v !== undefined) ? v : f.defaultValue, n);
-	        }
-	        var record = new Record(values, id);
-	        record.json = n;
-	        records[i] = record;
-	    }
-	    return {
-	        success : success,
-	        records : records,
-	        totalRecords : totalRecords
-	    };
+          }
+          var record = new Record(values, id);
+          record.json = n;
+          records[i] = record;
+      }
+      return {
+          success : success,
+          records : records,
+          totalRecords : totalRecords
+      };
     }
 });
 
@@ -12070,7 +12070,7 @@
     Ext.data.XmlReader.superclass.constructor.call(this, meta, recordType || meta.fields);
 };
 Ext.extend(Ext.data.XmlReader, Ext.data.DataReader, {
-    
+
     read : function(response){
         var doc = response.responseXML;
         if(!doc) {
@@ -12079,100 +12079,100 @@
         return this.readRecords(doc);
     },
 
-    
+
     readRecords : function(doc){
-        
+
         this.xmlData = doc;
         var root = doc.documentElement || doc;
-    	var q = Ext.DomQuery;
-    	var recordType = this.recordType, fields = recordType.prototype.fields;
-    	var sid = this.meta.id;
-    	var totalRecords = 0, success = true;
-    	if(this.meta.totalRecords){
-    	    totalRecords = q.selectNumber(this.meta.totalRecords, root, 0);
-    	}
+      var q = Ext.DomQuery;
+      var recordType = this.recordType, fields = recordType.prototype.fields;
+      var sid = this.meta.id;
+      var totalRecords = 0, success = true;
+      if(this.meta.totalRecords){
+          totalRecords = q.selectNumber(this.meta.totalRecords, root, 0);
+      }
 
         if(this.meta.success){
             var sv = q.selectValue(this.meta.success, root, true);
             success = sv !== false && sv !== 'false';
-    	}
-    	var records = [];
-    	var ns = q.select(this.meta.record, root);
+      }
+      var records = [];
+      var ns = q.select(this.meta.record, root);
         for(var i = 0, len = ns.length; i < len; i++) {
-	        var n = ns[i];
-	        var values = {};
-	        var id = sid ? q.selectValue(sid, n) : undefined;
-	        for(var j = 0, jlen = fields.length; j < jlen; j++){
-	            var f = fields.items[j];
+          var n = ns[i];
+          var values = {};
+          var id = sid ? q.selectValue(sid, n) : undefined;
+          for(var j = 0, jlen = fields.length; j < jlen; j++){
+              var f = fields.items[j];
                 var v = q.selectValue(f.mapping || f.name, n, f.defaultValue);
-	            v = f.convert(v, n);
-	            values[f.name] = v;
-	        }
-	        var record = new recordType(values, id);
-	        record.node = n;
-	        records[records.length] = record;
-	    }
-
-	    return {
-	        success : success,
-	        records : records,
-	        totalRecords : totalRecords || records.length
-	    };
+              v = f.convert(v, n);
+              values[f.name] = v;
+          }
+          var record = new recordType(values, id);
+          record.node = n;
+          records[records.length] = record;
+      }
+
+      return {
+          success : success,
+          records : records,
+          totalRecords : totalRecords || records.length
+      };
     }
 });
 
 Ext.data.ArrayReader = Ext.extend(Ext.data.JsonReader, {
-    
+
     readRecords : function(o){
         var sid = this.meta ? this.meta.id : null;
-    	var recordType = this.recordType, fields = recordType.prototype.fields;
-    	var records = [];
-    	var root = o;
-	    for(var i = 0; i < root.length; i++){
-		    var n = root[i];
-	        var values = {};
-	        var id = ((sid || sid === 0) && n[sid] !== undefined && n[sid] !== "" ? n[sid] : null);
-	        for(var j = 0, jlen = fields.length; j < jlen; j++){
+      var recordType = this.recordType, fields = recordType.prototype.fields;
+      var records = [];
+      var root = o;
+      for(var i = 0; i < root.length; i++){
+        var n = root[i];
+          var values = {};
+          var id = ((sid || sid === 0) && n[sid] !== undefined && n[sid] !== "" ? n[sid] : null);
+          for(var j = 0, jlen = fields.length; j < jlen; j++){
                 var f = fields.items[j];
                 var k = f.mapping !== undefined && f.mapping !== null ? f.mapping : j;
                 var v = n[k] !== undefined ? n[k] : f.defaultValue;
                 v = f.convert(v, n);
                 values[f.name] = v;
             }
-	        var record = new recordType(values, id);
-	        record.json = n;
-	        records[records.length] = record;
-	    }
-	    return {
-	        records : records,
-	        totalRecords : records.length
-	    };
+          var record = new recordType(values, id);
+          record.json = n;
+          records[records.length] = record;
+      }
+      return {
+          records : records,
+          totalRecords : records.length
+      };
     }
 });
 
 Ext.data.Tree = function(root){
    this.nodeHash = {};
-   
+
    this.root = null;
    if(root){
        this.setRootNode(root);
    }
    this.addEvents(
-       
+
        "append",
-       
+
        "remove",
-       
+
        "move",
-       
+
        "insert",
-       
+
        "beforeappend",
-       
+
        "beforeremove",
-       
+
        "beforemove",
-       
+
        "beforeinsert"
    );
 
@@ -12180,7 +12180,7 @@
 };
 
 Ext.extend(Ext.data.Tree, Ext.util.Observable, {
-    
+
     pathSeparator: "/",
 
     // private
@@ -12188,12 +12188,12 @@
         return this.fireEvent.apply(this, arguments);
     },
 
-    
+
     getRootNode : function(){
         return this.root;
     },
 
-    
+
     setRootNode : function(node){
         this.root = node;
         node.ownerTree = this;
@@ -12202,7 +12202,7 @@
         return node;
     },
 
-    
+
     getNodeById : function(id){
         return this.nodeHash[id];
     },
@@ -12224,16 +12224,16 @@
 
 
 Ext.data.Node = function(attributes){
-    
+
     this.attributes = attributes || {};
     this.leaf = this.attributes.leaf;
-    
+
     this.id = this.attributes.id;
     if(!this.id){
         this.id = Ext.id(null, "ynode-");
         this.attributes.id = this.id;
     }
-    
+
     this.childNodes = [];
     if(!this.childNodes.indexOf){ // indexOf is a must
         this.childNodes.indexOf = function(o){
@@ -12243,33 +12243,33 @@
             return -1;
         };
     }
-    
+
     this.parentNode = null;
-    
+
     this.firstChild = null;
-    
+
     this.lastChild = null;
-    
+
     this.previousSibling = null;
-    
+
     this.nextSibling = null;
 
     this.addEvents({
-       
+
        "append" : true,
-       
+
        "remove" : true,
-       
+
        "move" : true,
-       
+
        "insert" : true,
-       
+
        "beforeappend" : true,
-       
+
        "beforeremove" : true,
-       
+
        "beforemove" : true,
-       
+
        "beforeinsert" : true
    });
     this.listeners = this.attributes.listeners;
@@ -12293,7 +12293,7 @@
         return true;
     },
 
-    
+
     isLeaf : function(){
         return this.leaf === true;
     },
@@ -12309,27 +12309,27 @@
     },
 
 
-    
+
     isLast : function(){
        return (!this.parentNode ? true : this.parentNode.lastChild == this);
     },
 
-    
+
     isFirst : function(){
        return (!this.parentNode ? true : this.parentNode.firstChild == this);
     },
 
-    
+
     hasChildNodes : function(){
         return !this.isLeaf() && this.childNodes.length > 0;
     },
-    
-    
+
+
     isExpandable : function(){
         return this.attributes.expandable || this.hasChildNodes();
     },
 
-    
+
     appendChild : function(node){
         var multi = false;
         if(Ext.isArray(node)){
@@ -12340,7 +12340,7 @@
         // if passed an array or multiple args do them one by one
         if(multi){
             for(var i = 0, len = multi.length; i < len; i++) {
-            	this.appendChild(multi[i]);
+              this.appendChild(multi[i]);
             }
         }else{
             if(this.fireEvent("beforeappend", this.ownerTree, this, node) === false){
@@ -12379,7 +12379,7 @@
         }
     },
 
-    
+
     removeChild : function(node){
         var index = this.childNodes.indexOf(node);
         if(index == -1){
@@ -12417,7 +12417,7 @@
         return node;
     },
 
-    
+
     insertBefore : function(node, refNode){
         if(!refNode){ // like standard Dom, refNode can be null for append
             return this.appendChild(node);
@@ -12468,18 +12468,18 @@
         return node;
     },
 
-    
+
     remove : function(){
         this.parentNode.removeChild(this);
         return this;
     },
 
-    
+
     item : function(index){
         return this.childNodes[index];
     },
 
-    
+
     replaceChild : function(newChild, oldChild){
         var s = oldChild ? oldChild.nextSibling : null;
         this.removeChild(oldChild);
@@ -12487,12 +12487,12 @@
         return oldChild;
     },
 
-    
+
     indexOf : function(child){
         return this.childNodes.indexOf(child);
     },
 
-    
+
     getOwnerTree : function(){
         // if it doesn't have one, look for one
         if(!this.ownerTree){
@@ -12508,7 +12508,7 @@
         return this.ownerTree;
     },
 
-    
+
     getDepth : function(){
         var depth = 0;
         var p = this;
@@ -12529,7 +12529,7 @@
             this.ownerTree = tree;
             var cs = this.childNodes;
             for(var i = 0, len = cs.length; i < len; i++) {
-            	cs[i].setOwnerTree(tree);
+              cs[i].setOwnerTree(tree);
             }
             if(tree){
                 tree.registerNode(this);
@@ -12537,7 +12537,7 @@
         }
     },
 
-    
+
     getPath : function(attr){
         attr = attr || "id";
         var p = this.parentNode;
@@ -12550,7 +12550,7 @@
         return sep + b.join(sep);
     },
 
-    
+
     bubble : function(fn, scope, args){
         var p = this;
         while(p){
@@ -12561,49 +12561,49 @@
         }
     },
 
-    
+
     cascade : function(fn, scope, args){
         if(fn.apply(scope || this, args || [this]) !== false){
             var cs = this.childNodes;
             for(var i = 0, len = cs.length; i < len; i++) {
-            	cs[i].cascade(fn, scope, args);
+              cs[i].cascade(fn, scope, args);
             }
         }
     },
 
-    
+
     eachChild : function(fn, scope, args){
         var cs = this.childNodes;
         for(var i = 0, len = cs.length; i < len; i++) {
-        	if(fn.apply(scope || this, args || [cs[i]]) === false){
-        	    break;
-        	}
+          if(fn.apply(scope || this, args || [cs[i]]) === false){
+              break;
+          }
         }
     },
 
-    
+
     findChild : function(attribute, value){
         var cs = this.childNodes;
         for(var i = 0, len = cs.length; i < len; i++) {
-        	if(cs[i].attributes[attribute] == value){
-        	    return cs[i];
-        	}
+          if(cs[i].attributes[attribute] == value){
+              return cs[i];
+          }
         }
         return null;
     },
 
-    
+
     findChildBy : function(fn, scope){
         var cs = this.childNodes;
         for(var i = 0, len = cs.length; i < len; i++) {
-        	if(fn.call(scope||cs[i], cs[i]) === true){
-        	    return cs[i];
-        	}
+          if(fn.call(scope||cs[i], cs[i]) === true){
+              return cs[i];
+          }
         }
         return null;
     },
 
-    
+
     sort : function(fn, scope){
         var cs = this.childNodes;
         var len = cs.length;
@@ -12624,12 +12624,12 @@
         }
     },
 
-    
+
     contains : function(node){
         return node.isAncestor(this);
     },
 
-    
+
     isAncestor : function(node){
         var p = this.parentNode;
         while(p){
@@ -12647,13 +12647,13 @@
 });
 
 Ext.data.GroupingStore = Ext.extend(Ext.data.Store, {
-    
-    
+
+
     remoteGroup : false,
-    
+
     groupOnSort:false,
 
-    
+
     clearGrouping : function(){
         this.groupField = false;
         if(this.remoteGroup){
@@ -12669,7 +12669,7 @@
         }
     },
 
-    
+
     groupBy : function(field, forceRegroup){
         if(this.groupField == field && !forceRegroup){
             return; // already grouped by this field
@@ -12734,22 +12734,22 @@
     var types = {};
 
     return {
-        
+
         register : function(c){
             all.add(c);
         },
 
-        
+
         unregister : function(c){
             all.remove(c);
         },
 
-        
+
         get : function(id){
             return all.get(id);
         },
 
-        
+
         onAvailable : function(id, fn, scope){
             all.on("add", function(index, o){
                 if(o.id == id){
@@ -12759,16 +12759,16 @@
             });
         },
 
-        
+
         all : all,
 
-        
+
         registerType : function(xtype, cls){
             types[xtype] = cls;
             cls.xtype = xtype;
         },
 
-        
+
         create : function(config, defaultType){
             return new types[config.xtype || defaultType](config);
         }
@@ -12789,38 +12789,38 @@
         config = {applyTo: config, id: config.id || config};
     }
 
-    
+
     this.initialConfig = config;
 
     Ext.apply(this, config);
     this.addEvents(
-        
+
         'disable',
-        
+
         'enable',
-        
+
         'beforeshow',
-        
+
         'show',
-        
+
         'beforehide',
-        
+
         'hide',
-        
+
         'beforerender',
-        
+
         'render',
-        
+
         'beforedestroy',
-        
+
         'destroy',
-        
+
         'beforestaterestore',
-        
+
         'staterestore',
-        
+
         'beforestatesave',
-        
+
         'statesave'
     );
     this.getId();
@@ -12861,47 +12861,47 @@
 
 Ext.extend(Ext.Component, Ext.util.Observable, {
     // Configs below are used for all Components when rendered by FormLayout.
-    
-    
-    
-    
-    
-    
-
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
     disabledClass : "x-item-disabled",
-	
+
     allowDomMove : true,
-	
+
     autoShow : false,
-    
+
     hideMode: 'display',
-    
+
     hideParent: false,
 
-    
-    
+
+
     hidden : false,
-    
+
     disabled : false,
-    
+
     rendered : false,
 
     // private
@@ -12920,10 +12920,10 @@
         return p;
     },
 
-    
+
     initComponent : Ext.emptyFn,
 
-    
+
     render : function(container, position){
         if(!this.rendered && this.fireEvent("beforerender", this) !== false){
             if(!container && this.el){
@@ -13030,14 +13030,14 @@
         }
     },
 
-    
+
     applyToMarkup : function(el){
         this.allowDomMove = false;
         this.el = Ext.get(el);
         this.render(this.el.dom.parentNode);
     },
 
-    
+
     addClass : function(cls){
         if(this.el){
             this.el.addClass(cls);
@@ -13046,7 +13046,7 @@
         }
     },
 
-    
+
     removeClass : function(cls){
         if(this.el){
             this.el.removeClass(cls);
@@ -13067,7 +13067,7 @@
                 this.el = div.firstChild;
             }
             if (!this.el.id) {
-            	this.el.id = this.getId();
+              this.el.id = this.getId();
             }
         }
         if(this.el){
@@ -13091,7 +13091,7 @@
     // private
     afterRender : Ext.emptyFn,
 
-    
+
     destroy : function(){
         if(this.fireEvent("beforedestroy", this) !== false){
             this.beforeDestroy();
@@ -13109,28 +13109,28 @@
         }
     },
 
-	// private
+  // private
     beforeDestroy : Ext.emptyFn,
 
-	// private
+  // private
     onDestroy  : Ext.emptyFn,
 
-    
+
     getEl : function(){
         return this.el;
     },
 
-    
+
     getId : function(){
         return this.id || (this.id = "ext-comp-" + (++Ext.Component.AUTO_ID));
     },
 
-    
+
     getItemId : function(){
         return this.itemId || this.getId();
     },
 
-    
+
     focus : function(selectText, delay){
         if(delay){
             this.focus.defer(typeof delay == 'number' ? delay : 10, this, [selectText, false]);
@@ -13153,7 +13153,7 @@
         return this;
     },
 
-    
+
     disable : function(){
         if(this.rendered){
             this.onDisable();
@@ -13163,13 +13163,13 @@
         return this;
     },
 
-	// private
+  // private
     onDisable : function(){
         this.getActionEl().addClass(this.disabledClass);
         this.el.dom.disabled = true;
     },
 
-    
+
     enable : function(){
         if(this.rendered){
             this.onEnable();
@@ -13179,18 +13179,18 @@
         return this;
     },
 
-	// private
+  // private
     onEnable : function(){
         this.getActionEl().removeClass(this.disabledClass);
         this.el.dom.disabled = false;
     },
 
-    
+
     setDisabled : function(disabled){
         this[disabled ? "disable" : "enable"]();
     },
 
-    
+
     show: function(){
         if(this.fireEvent("beforeshow", this) !== false){
             this.hidden = false;
@@ -13215,7 +13215,7 @@
 
     },
 
-    
+
     hide: function(){
         if(this.fireEvent("beforehide", this) !== false){
             this.hidden = true;
@@ -13236,7 +13236,7 @@
         }
     },
 
-    
+
     setVisible: function(visible){
         if(visible) {
             this.show();
@@ -13246,12 +13246,12 @@
         return this;
     },
 
-    
+
     isVisible : function(){
         return this.rendered && this.getActionEl().isVisible();
     },
 
-    
+
     cloneConfig : function(overrides){
         overrides = overrides || {};
         var id = overrides.id || Ext.id();
@@ -13260,12 +13260,12 @@
         return new this.constructor(cfg);
     },
 
-    
+
     getXType : function(){
         return this.constructor.xtype;
     },
 
-    
+
     isXType : function(xtype, shallow){
         //assume a string by default
         if (typeof xtype == 'function'){
@@ -13273,11 +13273,11 @@
         }else if (typeof xtype == 'object'){
             xtype = xtype.constructor.xtype; //handle being passed an instance
         }
-            
+
         return !shallow ? ('/' + this.getXTypes() + '/').indexOf('/' + xtype + '/') != -1 : this.constructor.xtype == xtype;
     },
 
-    
+
     getXTypes : function(){
         var tc = this.constructor;
         if(!tc.xtypes){
@@ -13292,13 +13292,13 @@
         return tc.xtypes;
     },
 
-    
+
     findParentBy: function(fn) {
         for (var p = this.ownerCt; (p != null) && !fn(p, this); p = p.ownerCt);
         return p || null;
     },
 
-    
+
     findParentByType: function(xtype) {
         return typeof xtype == 'function' ?
             this.findParentBy(function(p){
@@ -13336,88 +13336,88 @@
 }
 
 Ext.Action.prototype = {
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
 
     // private
     isAction : true,
 
-    
+
     setText : function(text){
         this.initialConfig.text = text;
         this.callEach('setText', [text]);
     },
 
-    
+
     getText : function(){
         return this.initialConfig.text;
     },
 
-    
+
     setIconClass : function(cls){
         this.initialConfig.iconCls = cls;
         this.callEach('setIconClass', [cls]);
     },
 
-    
+
     getIconClass : function(){
         return this.initialConfig.iconCls;
     },
 
-    
+
     setDisabled : function(v){
         this.initialConfig.disabled = v;
         this.callEach('setDisabled', [v]);
     },
 
-    
+
     enable : function(){
         this.setDisabled(false);
     },
 
-    
+
     disable : function(){
         this.setDisabled(true);
     },
 
-    
+
     isDisabled : function(){
         return this.initialConfig.disabled;
     },
 
-    
+
     setHidden : function(v){
         this.initialConfig.hidden = v;
         this.callEach('setVisible', [!v]);
     },
 
-    
+
     show : function(){
         this.setHidden(false);
     },
 
-    
+
     hide : function(){
         this.setHidden(true);
     },
 
-    
+
     isHidden : function(){
         return this.initialConfig.hidden;
     },
 
-    
+
     setHandler : function(fn, scope){
         this.initialConfig.handler = fn;
         this.initialConfig.scope = scope;
         this.callEach('setHandler', [fn, scope]);
     },
 
-    
+
     each : function(fn, scope){
         Ext.each(this.items, fn, scope);
     },
@@ -13441,7 +13441,7 @@
         this.items.remove(comp);
     },
 
-    
+
     execute : function(){
         this.initialConfig.handler.apply(this.initialConfig.scope || window, arguments);
     }
@@ -13855,7 +13855,7 @@
         return this;
     },
 
-    
+
     setZIndex : function(zindex){
         this.zindex = zindex;
         this.setStyle("z-index", zindex + 2);
@@ -13922,14 +13922,14 @@
 };
 
 Ext.Shadow.prototype = {
-    
-    
+
+
     offset: 4,
 
     // private
     defaultMode: "drop",
 
-    
+
     show : function(target){
         target = Ext.get(target);
         if(!this.el){
@@ -13951,12 +13951,12 @@
         this.el.dom.style.display = "block";
     },
 
-    
+
     isVisible : function(){
-        return this.el ? true : false;  
+        return this.el ? true : false;
     },
 
-    
+
     realign : function(l, t, w, h){
         if(!this.el){
             return;
@@ -13980,7 +13980,7 @@
         }
     },
 
-    
+
     hide : function(){
         if(this.el){
             this.el.dom.style.display = "none";
@@ -13989,7 +13989,7 @@
         }
     },
 
-    
+
     setZIndex : function(z){
         this.zIndex = z;
         if(this.el){
@@ -14021,24 +14021,24 @@
 }();
 
 Ext.BoxComponent = Ext.extend(Ext.Component, {
-    
-    
-    
-    
-    
-    
-    
-    
 
-    
 
-	// private
+
+
+
+
+
+
+
+
+
+  // private
     initComponent : function(){
         Ext.BoxComponent.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'resize',
-            
+
             'move'
         );
     },
@@ -14048,7 +14048,7 @@
     // private, used to defer height settings to subclasses
     deferHeight: false,
 
-    
+
     setSize : function(w, h){
         // support for standard size objects
         if(typeof w == 'object'){
@@ -14084,22 +14084,22 @@
         return this;
     },
 
-    
+
     setWidth : function(width){
         return this.setSize(width);
     },
 
-    
+
     setHeight : function(height){
         return this.setSize(undefined, height);
     },
 
-    
+
     getSize : function(){
         return this.el.getSize();
     },
 
-    
+
     getPosition : function(local){
         if(local === true){
             return [this.el.getLeft(true), this.el.getTop(true)];
@@ -14107,7 +14107,7 @@
         return this.xy || this.el.getXY();
     },
 
-    
+
     getBox : function(local){
         var s = this.el.getSize();
         if(local === true){
@@ -14121,7 +14121,7 @@
         return s;
     },
 
-    
+
     updateBox : function(box){
         this.setSize(box.width, box.height);
         this.setPagePosition(box.x, box.y);
@@ -14138,7 +14138,7 @@
         return this.positionEl || this.el;
     },
 
-    
+
     setPosition : function(x, y){
         if(x && typeof x[1] == 'number'){
             y = x[1];
@@ -14167,7 +14167,7 @@
         return this;
     },
 
-    
+
     setPagePosition : function(x, y){
         if(x && typeof x[1] == 'number'){
             y = x[1];
@@ -14209,19 +14209,19 @@
         }
     },
 
-    
+
     syncSize : function(){
         delete this.lastSize;
         this.setSize(this.autoWidth ? undefined : this.el.getWidth(), this.autoHeight ? undefined : this.el.getHeight());
         return this;
     },
 
-    
+
     onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){
 
     },
 
-    
+
     onPosition : function(x, y){
 
     },
@@ -14245,69 +14245,69 @@
 Ext.reg('box', Ext.BoxComponent);
 
 Ext.SplitBar = function(dragElement, resizingElement, orientation, placement, existingProxy){
-    
-    
+
+
     this.el = Ext.get(dragElement, true);
     this.el.dom.unselectable = "on";
-    
+
     this.resizingEl = Ext.get(resizingElement, true);
 
-    
+
     this.orientation = orientation || Ext.SplitBar.HORIZONTAL;
-    
-    
+
+
     this.minSize = 0;
-    
-    
+
+
     this.maxSize = 2000;
-    
-    
+
+
     this.animate = false;
-    
-    
+
+
     this.useShim = false;
-    
-    
+
+
     this.shim = null;
-    
+
     if(!existingProxy){
-        
+
         this.proxy = Ext.SplitBar.createProxy(this.orientation);
     }else{
         this.proxy = Ext.get(existingProxy).dom;
     }
-    
+
     this.dd = new Ext.dd.DDProxy(this.el.dom.id, "XSplitBars", {dragElId : this.proxy.id});
-    
-    
+
+
     this.dd.b4StartDrag = this.onStartProxyDrag.createDelegate(this);
-    
-    
+
+
     this.dd.endDrag = this.onEndProxyDrag.createDelegate(this);
-    
-    
+
+
     this.dragSpecs = {};
-    
-    
+
+
     this.adapter = new Ext.SplitBar.BasicLayoutAdapter();
     this.adapter.init(this);
-    
+
     if(this.orientation == Ext.SplitBar.HORIZONTAL){
-        
+
         this.placement = placement || (this.el.getX() > this.resizingEl.getX() ? Ext.SplitBar.LEFT : Ext.SplitBar.RIGHT);
         this.el.addClass("x-splitbar-h");
     }else{
-        
+
         this.placement = placement || (this.el.getY() > this.resizingEl.getY() ? Ext.SplitBar.TOP : Ext.SplitBar.BOTTOM);
         this.el.addClass("x-splitbar-v");
     }
-    
+
     this.addEvents(
-        
+
         "resize",
-        
+
         "moved",
-        
+
         "beforeresize",
 
         "beforeapply"
@@ -14332,7 +14332,7 @@
         if(this.orientation == Ext.SplitBar.HORIZONTAL){
             this.dd.resetConstraints();
             this.dd.setXConstraint(
-                this.placement == Ext.SplitBar.LEFT ? c1 : c2, 
+                this.placement == Ext.SplitBar.LEFT ? c1 : c2,
                 this.placement == Ext.SplitBar.LEFT ? c2 : c1
             );
             this.dd.setYConstraint(0, 0);
@@ -14340,7 +14340,7 @@
             this.dd.resetConstraints();
             this.dd.setXConstraint(0, 0);
             this.dd.setYConstraint(
-                this.placement == Ext.SplitBar.TOP ? c1 : c2, 
+                this.placement == Ext.SplitBar.TOP ? c1 : c2,
                 this.placement == Ext.SplitBar.TOP ? c2 : c1
             );
          }
@@ -14348,8 +14348,8 @@
         this.dragSpecs.startPoint = [x, y];
         Ext.dd.DDProxy.prototype.b4StartDrag.call(this.dd, x, y);
     },
-    
-    
+
+
     onEndProxyDrag : function(e){
         Ext.get(this.proxy).setDisplayed(false);
         var endPoint = Ext.lib.Event.getXY(e);
@@ -14359,13 +14359,13 @@
         }
         var newSize;
         if(this.orientation == Ext.SplitBar.HORIZONTAL){
-            newSize = this.dragSpecs.startSize + 
+            newSize = this.dragSpecs.startSize +
                 (this.placement == Ext.SplitBar.LEFT ?
                     endPoint[0] - this.dragSpecs.startPoint[0] :
                     this.dragSpecs.startPoint[0] - endPoint[0]
                 );
         }else{
-            newSize = this.dragSpecs.startSize + 
+            newSize = this.dragSpecs.startSize +
                 (this.placement == Ext.SplitBar.TOP ?
                     endPoint[1] - this.dragSpecs.startPoint[1] :
                     this.dragSpecs.startPoint[1] - endPoint[1]
@@ -14380,47 +14380,47 @@
             }
         }
     },
-    
-    
+
+
     getAdapter : function(){
         return this.adapter;
     },
-    
-    
+
+
     setAdapter : function(adapter){
         this.adapter = adapter;
         this.adapter.init(this);
     },
-    
-    
+
+
     getMinimumSize : function(){
         return this.minSize;
     },
-    
-    
+
+
     setMinimumSize : function(minSize){
         this.minSize = minSize;
     },
-    
-    
+
+
     getMaximumSize : function(){
         return this.maxSize;
     },
-    
-    
+
+
     setMaximumSize : function(maxSize){
         this.maxSize = maxSize;
     },
-    
-    
+
+
     setCurrentSize : function(size){
         var oldAnimate = this.animate;
         this.animate = false;
         this.adapter.setElementSize(this, size);
         this.animate = oldAnimate;
     },
-    
-    
+
+
     destroy : function(removeEl){
         if(this.shim){
             this.shim.remove();
@@ -14450,9 +14450,9 @@
 Ext.SplitBar.BasicLayoutAdapter.prototype = {
     // do nothing for now
     init : function(s){
-    
+
     },
-    
+
      getElementSize : function(s){
         if(s.orientation == Ext.SplitBar.HORIZONTAL){
             return s.resizingEl.getWidth();
@@ -14460,8 +14460,8 @@
             return s.resizingEl.getHeight();
         }
     },
-    
-    
+
+
     setElementSize : function(s, newSize, onComplete){
         if(s.orientation == Ext.SplitBar.HORIZONTAL){
             if(!s.animate){
@@ -14473,7 +14473,7 @@
                 s.resizingEl.setWidth(newSize, true, .1, onComplete, 'easeOut');
             }
         }else{
-            
+
             if(!s.animate){
                 s.resizingEl.setHeight(newSize);
                 if(onComplete){
@@ -14496,15 +14496,15 @@
     init : function(s){
         this.basic.init(s);
     },
-    
+
     getElementSize : function(s){
         return this.basic.getElementSize(s);
     },
-    
+
     setElementSize : function(s, newSize, onComplete){
         this.basic.setElementSize(s, newSize, this.moveSplitter.createDelegate(this, [s]));
     },
-    
+
     moveSplitter : function(s){
         var yes = Ext.SplitBar;
         switch(s.placement){
@@ -14544,18 +14544,18 @@
 
 
 Ext.Container = Ext.extend(Ext.BoxComponent, {
-    
-    
-    
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
     autoDestroy: true,
-    
-    
+
+
     defaultType: 'panel',
 
     // private
@@ -14563,19 +14563,19 @@
         Ext.Container.superclass.initComponent.call(this);
 
         this.addEvents(
-            
+
             'afterlayout',
-            
+
             'beforeadd',
-            
+
             'beforeremove',
-            
+
             'add',
-            
+
             'remove'
         );
 
-        
+
         var items = this.items;
         if(items){
             delete this.items;
@@ -14629,7 +14629,7 @@
         }
     },
 
-    
+
     getLayoutTarget : function(){
         return this.el;
     },
@@ -14639,7 +14639,7 @@
         return comp.itemId || comp.id;
     },
 
-    
+
     add : function(comp){
         if(!this.items){
             this.initItems();
@@ -14661,7 +14661,7 @@
         return c;
     },
 
-    
+
     insert : function(index, comp){
         if(!this.items){
             this.initItems();
@@ -14712,7 +14712,7 @@
         }
     },
 
-    
+
     remove : function(comp, autoDestroy){
         var c = this.getComponent(comp);
         if(c && this.fireEvent('beforeremove', this, c) !== false){
@@ -14728,8 +14728,8 @@
         }
         return c;
     },
-    
-    
+
+
     removeAll: function(autoDestroy){
         var item, items = [];
         while((item = this.items.last())){
@@ -14738,7 +14738,7 @@
         return items;
     },
 
-    
+
     getComponent : function(comp){
         if(typeof comp == 'object'){
             return comp;
@@ -14761,7 +14761,7 @@
         return Ext.ComponentMgr.create(config, this.defaultType);
     },
 
-    
+
     doLayout : function(shallow){
         if(this.rendered && this.layout){
             this.layout.layout();
@@ -14777,7 +14777,7 @@
         }
     },
 
-    
+
     getLayout : function(){
         if(!this.layout){
             var layout = new Ext.layout.ContainerLayout(this.layoutConfig);
@@ -14800,7 +14800,7 @@
         Ext.Container.superclass.beforeDestroy.call(this);
     },
 
-    
+
     bubble : function(fn, scope, args){
         var p = this;
         while(p){
@@ -14811,7 +14811,7 @@
         }
     },
 
-    
+
     cascade : function(fn, scope, args){
         if(fn.apply(scope || this, args || [this]) !== false){
             if(this.items){
@@ -14827,7 +14827,7 @@
         }
     },
 
-    
+
     findById : function(id){
         var m, ct = this;
         this.cascade(function(c){
@@ -14839,21 +14839,21 @@
         return m || null;
     },
 
-    
+
     findByType : function(xtype, shallow){
         return this.findBy(function(c){
             return c.isXType(xtype, shallow);
         });
     },
 
-    
+
     find : function(prop, value){
         return this.findBy(function(c){
             return c[prop] === value;
         });
     },
 
-    
+
     findBy : function(fn, scope){
         var m = [], ct = this;
         this.cascade(function(c){
@@ -14873,10 +14873,10 @@
 };
 
 Ext.layout.ContainerLayout.prototype = {
-    
-    
 
-    
+
+
+
 
     // private
     monitorResize:false,
@@ -14885,7 +14885,7 @@
 
     // private
     layout : function(){
-		Core.Debug.consoleWrite("Doing layout on " + this.container.getId());
+    Core.Debug.consoleWrite("Doing layout on " + this.container.getId());
         var target = this.container.getLayoutTarget();
         this.onLayout(this.container, target);
         this.container.fireEvent('afterlayout', this.container, this);
@@ -14893,14 +14893,14 @@
 
     // private
     onLayout : function(ct, target){
-		Core.Debug.consoleWrite("    Doing container layout");
+    Core.Debug.consoleWrite("    Doing container layout");
         this.renderAll(ct, target);
     },
 
     // private
     isValidParent : function(c, target){
-		var el = c.getPositionEl ? c.getPositionEl() : c.getEl();
-		return el.dom.parentNode == target.dom;
+    var el = c.getPositionEl ? c.getPositionEl() : c.getEl();
+    return el.dom.parentNode == target.dom;
     },
 
     // private
@@ -14919,8 +14919,8 @@
         if(c && !c.rendered){
             c.render(target, position);
             if(this.extraCls){
-            	var t = c.getPositionEl ? c.getPositionEl() : c;
-            	t.addClass(this.extraCls);
+              var t = c.getPositionEl ? c.getPositionEl() : c;
+              t.addClass(this.extraCls);
             }
             if (this.renderHidden && c != this.activeItem) {
                 c.hide();
@@ -14928,7 +14928,7 @@
         }else if(c && !this.isValidParent(c, target)){
             if(this.extraCls){
                 var t = c.getPositionEl ? c.getPositionEl() : c;
-            	t.addClass(this.extraCls);
+              t.addClass(this.extraCls);
             }
             if(typeof position == 'number'){
                 position = target.dom.childNodes[position];
@@ -14991,7 +14991,7 @@
         };
     },
 
-    
+
     destroy : Ext.emptyFn
 };
 Ext.Container.LAYOUTS['auto'] = Ext.layout.ContainerLayout;
@@ -15003,7 +15003,7 @@
     // private
     onLayout : function(ct, target){
         Ext.layout.FitLayout.superclass.onLayout.call(this, ct, target);
-		Core.Debug.consoleWrite("    Doing Fit layout");
+    Core.Debug.consoleWrite("    Doing Fit layout");
         if(!this.container.collapsed){
             this.setItemSize(this.activeItem || ct.items.itemAt(0), target.getStyleSize());
         }
@@ -15019,13 +15019,13 @@
 Ext.Container.LAYOUTS['fit'] = Ext.layout.FitLayout;
 
 Ext.layout.CardLayout = Ext.extend(Ext.layout.FitLayout, {
-    
+
     deferredRender : false,
 
     // private
     renderHidden : true,
 
-    
+
     setActiveItem : function(item){
         item = this.container.getComponent(item);
         if(this.activeItem != item){
@@ -15062,7 +15062,7 @@
     // private
     onLayout : function(ct, target){
         Ext.layout.AnchorLayout.superclass.onLayout.call(this, ct, target);
-		Core.Debug.consoleWrite("    Doing anchor layout");
+    Core.Debug.consoleWrite("    Doing anchor layout");
 
         var size = this.getAnchorViewSize(ct, target);
 
@@ -15152,16 +15152,16 @@
     adjustHeightAnchor : function(value, comp){
         return value;
     }
-    
-    
+
+
 });
 Ext.Container.LAYOUTS['anchor'] = Ext.layout.AnchorLayout;
 
 Ext.layout.ColumnLayout = Ext.extend(Ext.layout.ContainerLayout, {
     // private
     monitorResize:true,
-    
-    
+
+
     extraCls: 'x-column',
 
     scrollOffset : 0,
@@ -15173,7 +15173,7 @@
 
     // private
     onLayout : function(ct, target){
-		Core.Debug.consoleWrite("    Doing column layout");
+    Core.Debug.consoleWrite("    Doing column layout");
         var cs = ct.items.items, len = cs.length, c, i;
 
         if(!this.innerCt){
@@ -15191,7 +15191,7 @@
         if(size.width < 1 && size.height < 1){ // display none?
             return;
         }
-        
+
         // Firefox reports 100% width un-rendered components as having width 5000
         if (size.width == 5000 && this.container != null) {
             var thisContainer = this.container;
@@ -15217,7 +15217,7 @@
             pw = w;
 
         this.innerCt.setWidth(w);
-        
+
         // some columns can be percentages while others are fixed
         // so we need to make 2 passes
 
@@ -15237,8 +15237,8 @@
             }
         }
     }
-    
-    
+
+
 });
 
 Ext.Container.LAYOUTS['column'] = Ext.layout.ColumnLayout;
@@ -15251,7 +15251,7 @@
 
     // private
     onLayout : function(ct, target){
-	Core.Debug.consoleWrite("    Doing border layout");
+  Core.Debug.consoleWrite("    Doing border layout");
         var collapsed;
         if(!this.rendered){
             target.position();
@@ -15300,7 +15300,7 @@
                 }
             }
         }
-        
+
         var size = target.getViewSize();
         if(size.width < 20 || size.height < 20){ // display none?
             if(collapsed){
@@ -15323,50 +15323,50 @@
         if(n && n.isVisible()){
             var b = n.getSize();
             if (b.width != 0 || b.height != 0) {
-	            var m = n.getMargins();
-	            b.width = w - (m.left+m.right);
-	            b.x = m.left;
-	            b.y = m.top;
-	            centerY = b.height + b.y + m.bottom;
-	            centerH -= centerY;
-	            n.applyLayout(b);
+              var m = n.getMargins();
+              b.width = w - (m.left+m.right);
+              b.x = m.left;
+              b.y = m.top;
+              centerY = b.height + b.y + m.bottom;
+              centerH -= centerY;
+              n.applyLayout(b);
             }
         }
         if(s && s.isVisible()){
             var b = s.getSize();
             if (b.width != 0 || b.height != 0) {
-	            var m = s.getMargins();
-	            b.width = w - (m.left+m.right);
-	            b.x = m.left;
-	            var totalHeight = (b.height + m.top + m.bottom);
-	            b.y = h - totalHeight + m.top;
-	            centerH -= totalHeight;
-	            s.applyLayout(b);
+              var m = s.getMargins();
+              b.width = w - (m.left+m.right);
+              b.x = m.left;
+              var totalHeight = (b.height + m.top + m.bottom);
+              b.y = h - totalHeight + m.top;
+              centerH -= totalHeight;
+              s.applyLayout(b);
             }
         }
         if(west && west.isVisible()){
             var b = west.getSize();
             if (b.width != 0 || b.height != 0) {
-	            var m = west.getMargins();
-	            b.height = centerH - (m.top+m.bottom);
-	            b.x = m.left;
-	            b.y = centerY + m.top;
-	            var totalWidth = (b.width + m.left + m.right);
-	            centerX += totalWidth;
-	            centerW -= totalWidth;
-	            west.applyLayout(b);
+              var m = west.getMargins();
+              b.height = centerH - (m.top+m.bottom);
+              b.x = m.left;
+              b.y = centerY + m.top;
+              var totalWidth = (b.width + m.left + m.right);
+              centerX += totalWidth;
+              centerW -= totalWidth;
+              west.applyLayout(b);
             }
         }
         if(e && e.isVisible()){
             var b = e.getSize();
             if (b.width != 0 || b.height != 0) {
-	            var m = e.getMargins();
-	            b.height = centerH - (m.top+m.bottom);
-	            var totalWidth = (b.width + m.left + m.right);
-	            b.x = w - totalWidth + m.left;
-	            b.y = centerY + m.top;
-	            centerW -= totalWidth;
-	            e.applyLayout(b);
+              var m = e.getMargins();
+              b.height = centerH - (m.top+m.bottom);
+              var totalWidth = (b.width + m.left + m.right);
+              b.x = w - totalWidth + m.left;
+              b.y = centerY + m.top;
+              centerW -= totalWidth;
+              e.applyLayout(b);
             }
         }
 
@@ -15398,16 +15398,16 @@
             var region = this[r[i]];
             if(region){
                 if(region.destroy){
-	                region.destroy();
-	            }else if (region.split){
-	                region.split.destroy(true);
-	            }
+                  region.destroy();
+              }else if (region.split){
+                  region.split.destroy(true);
+              }
             }
         }
         Ext.layout.BorderLayout.superclass.destroy.call(this);
     }
-    
-    
+
+
 });
 
 
@@ -15434,21 +15434,21 @@
 };
 
 Ext.layout.BorderLayout.Region.prototype = {
-    
-    
-	
-    
-    
-    
-    
+
+
+
+
+
+
+
     collapsible : false,
-    
+
     split:false,
-    
+
     floatable: true,
-    
+
     minWidth:50,
-    
+
     minHeight:50,
 
     // private
@@ -15458,12 +15458,12 @@
     // private
     defaultEWCMargins : {left:5,top:0,right:5,bottom:0},
 
-    
+
     isCollapsed : false,
 
-    
-    
-    
+
+
+
 
     // private
     render : function(ct, p){
@@ -15530,7 +15530,7 @@
                         {id:'expand-'+this.position}, true);
                 t.addClassOnOver('x-tool-expand-'+this.position+'-over');
                 t.on('click', this.onExpandClick, this, {stopEvent:true});
-                
+
                 if(this.floatable !== false){
                    this.collapsedEl.addClassOnOver("x-layout-collapsed-over");
                    this.collapsedEl.on("click", this.collapseClick, this);
@@ -15634,32 +15634,32 @@
         }
     },
 
-    
+
     isVisible : function(){
         return !this.panel.hidden;
     },
 
-    
+
     getMargins : function(){
         return this.isCollapsed && this.cmargins ? this.cmargins : this.margins;
     },
 
-    
+
     getSize : function(){
         return this.isCollapsed ? this.getCollapsedEl().getSize() : this.panel.getSize();
     },
 
-    
+
     setPanel : function(panel){
         this.panel = panel;
     },
 
-    
+
     getMinWidth: function(){
         return this.minWidth;
     },
 
-    
+
     getMinHeight: function(){
         return this.minHeight;
     },
@@ -15897,11 +15897,11 @@
 };
 
 Ext.extend(Ext.layout.BorderLayout.SplitRegion, Ext.layout.BorderLayout.Region, {
-    
+
     splitTip : "Drag to resize.",
-    
+
     collapsibleSplitTip : "Drag to resize. Double click to hide.",
-    
+
     useSplitTips : false,
 
     // private
@@ -16073,16 +16073,16 @@
         return false;
     },
 
-    
+
     getSplitBar : function(){
         return this.split;
     },
-    
+
     // inherit docs
     destroy : function() {
         Ext.destroy(
-            this.miniSplitEl, 
-            this.split, 
+            this.miniSplitEl,
+            this.split,
             this.splitEl
         );
     }
@@ -16091,7 +16091,7 @@
 Ext.Container.LAYOUTS['border'] = Ext.layout.BorderLayout;
 
 Ext.layout.FormLayout = Ext.extend(Ext.layout.AnchorLayout, {
-    
+
     labelSeparator : ':',
 
     // private
@@ -16141,7 +16141,7 @@
             Ext.layout.FormLayout.prototype.fieldTpl = t;
         }
     },
-    
+
     //private
     getLabelStyle: function(s){
         var ls = '', items = [this.labelStyle, s];
@@ -16165,7 +16165,7 @@
                    this.elementStyle||'',
                    typeof c.labelSeparator == 'undefined' ? this.labelSeparator : c.labelSeparator,
                    (c.itemCls||this.container.itemCls||'') + (c.hideLabel ? ' x-hide-label' : ''),
-                   c.clearCls || 'x-form-clear-left' 
+                   c.clearCls || 'x-form-clear-left'
             ];
             if(typeof position == 'number'){
                 position = target.dom.childNodes[position] || null;
@@ -16191,27 +16191,27 @@
         return true;
     }
 
-    
+
 });
 
 Ext.Container.LAYOUTS['form'] = Ext.layout.FormLayout;
 
 Ext.layout.Accordion = Ext.extend(Ext.layout.FitLayout, {
-    
+
     fill : true,
-    
+
     autoWidth : true,
-    
+
     titleCollapse : true,
-    
+
     hideCollapseTool : false,
-    
+
     collapseFirst : false,
-    
+
     animate : false,
-    
+
     sequence : false,
-    
+
     activeOnTop : false,
 
     renderItem : function(c){
@@ -16283,7 +16283,7 @@
 Ext.Container.LAYOUTS['accordion'] = Ext.layout.Accordion;
 
 Ext.layout.TableLayout = Ext.extend(Ext.layout.ContainerLayout, {
-    
+
 
     // private
     monitorResize:false,
@@ -16300,7 +16300,7 @@
 
     // private
     onLayout : function(ct, target){
-		Core.Debug.consoleWrite("    Doing table layout");
+    Core.Debug.consoleWrite("    Doing table layout");
         var cs = ct.items.items, len = cs.length, c, i;
 
         if(!this.table){
@@ -16311,7 +16311,7 @@
 
             if (this.tableStyle) {
                 Ext.DomHelper.applyStyles(this.table, this.tableStyle);
-                
+
                 if (this.tableStyle.columnWidths) {
                     var myTable = Ext.Element.get(this.table);
                     var tbody = myTable.first();
@@ -16391,55 +16391,55 @@
 
     // private
     getNextCell : function(c, position){
-    	var trElement;
-    	// detect attempts to insert a row, or column into a previous row
-    	if (position < this.renderedComponentCount) {
-    	    var positionNonSpan = this.getPositionNonSpan(position);
-    	    var cellPosition = positionNonSpan % this.columns;
-    	    var rowNum = parseInt(positionNonSpan / this.columns);
-    	    var tbody = this.table.tBodies[0];
-    	    if (cellPosition == 0) {
-    	        trElement = this.table.insertRow(rowNum);
-    	        // need to update the internal cells variable
-    	        var newCellsRow = [];
-    	        for (var i = 0; i < this.columns; i++) {
-    	            newCellsRow.push(true);
-    	        }
-    	        this.cells.splice(rowNum, 0, newCellsRow);
-    	    }
-    	    else {
-    	        trElement = tbody.childNodes[rowNum];
-    	    }
-    	}
-    	else {
-    	    // not inserting in the middle, regular 'append to end' processing
-    	    var cell = this.getNextNonSpan(this.currentColumn, this.currentRow);
-    	    var curCol = this.currentColumn = cell[0], curRow = this.currentRow = cell[1];
-    	    for(var rowIndex = curRow; rowIndex < curRow + (c.rowspan || 1); rowIndex++){
-    	        if(!this.cells[rowIndex]){
-    	            this.cells[rowIndex] = [];
-    	        }
-    	        for(var colIndex = curCol; colIndex < curCol + (c.colspan || 1); colIndex++){
-    	            this.cells[rowIndex][colIndex] = true;
-    	        }
-    	    }
-    	    trElement = this.getRow(curRow);
-    	}
-		var td = document.createElement('td');
-		if(c.cellId){
-			td.id = c.cellId;
-		}
-		var cls = 'x-table-layout-cell';
-		if(c.cellCls){
-			cls += ' ' + c.cellCls;
-		}
-		td.className = cls;
-		if(c.colspan){
-			td.colSpan = c.colspan;
-		}
-		if(c.rowspan){
-			td.rowSpan = c.rowspan;
-		}
+      var trElement;
+      // detect attempts to insert a row, or column into a previous row
+      if (position < this.renderedComponentCount) {
+          var positionNonSpan = this.getPositionNonSpan(position);
+          var cellPosition = positionNonSpan % this.columns;
+          var rowNum = parseInt(positionNonSpan / this.columns);
+          var tbody = this.table.tBodies[0];
+          if (cellPosition == 0) {
+              trElement = this.table.insertRow(rowNum);
+              // need to update the internal cells variable
+              var newCellsRow = [];
+              for (var i = 0; i < this.columns; i++) {
+                  newCellsRow.push(true);
+              }
+              this.cells.splice(rowNum, 0, newCellsRow);
+          }
+          else {
+              trElement = tbody.childNodes[rowNum];
+          }
+      }
+      else {
+          // not inserting in the middle, regular 'append to end' processing
+          var cell = this.getNextNonSpan(this.currentColumn, this.currentRow);
+          var curCol = this.currentColumn = cell[0], curRow = this.currentRow = cell[1];
+          for(var rowIndex = curRow; rowIndex < curRow + (c.rowspan || 1); rowIndex++){
+              if(!this.cells[rowIndex]){
+                  this.cells[rowIndex] = [];
+              }
+              for(var colIndex = curCol; colIndex < curCol + (c.colspan || 1); colIndex++){
+                  this.cells[rowIndex][colIndex] = true;
+              }
+          }
+          trElement = this.getRow(curRow);
+      }
+    var td = document.createElement('td');
+    if(c.cellId){
+      td.id = c.cellId;
+    }
+    var cls = 'x-table-layout-cell';
+    if(c.cellCls){
+      cls += ' ' + c.cellCls;
+    }
+    td.className = cls;
+    if(c.colspan){
+      td.colSpan = c.colspan;
+    }
+    if(c.rowspan){
+      td.rowSpan = c.rowspan;
+    }
         if (c.cellStyle) {
             Ext.DomHelper.applyStyles(td, c.cellStyle);
         }
@@ -16449,39 +16449,39 @@
         if (c.cellVAlign) {
             td.vAlign = c.cellVAlign;
         }
-		trElement.appendChild(td);
-		return td;
-	},
-    
-    // private
-	getNextNonSpan: function(colIndex, rowIndex){
-		var cols = this.columns;
-		while((cols && colIndex >= cols) || (this.cells[rowIndex] && this.cells[rowIndex][colIndex])) {
-			if(cols && colIndex >= cols){
-				rowIndex++;
-				colIndex = 0;
-			}else{
-				colIndex++;
-			}
-		}
-		return [colIndex, rowIndex];
-	},
-	
-	// private
-	getPositionNonSpan: function(position) {
-	    var ret = 0;
-	    var count = this.container.items.getCount();
-	    for (var i = 0; i < count && i < position; i++) {
-	        var child = this.container.items.get(i);
-	        if (child.colspan) {
-	            ret += child.colspan;
-	        }
-	        else {
-	            ret += 1;
-	        }
-	    }
-	    return ret;
-	},
+    trElement.appendChild(td);
+    return td;
+  },
+
+    // private
+  getNextNonSpan: function(colIndex, rowIndex){
+    var cols = this.columns;
+    while((cols && colIndex >= cols) || (this.cells[rowIndex] && this.cells[rowIndex][colIndex])) {
+      if(cols && colIndex >= cols){
+        rowIndex++;
+        colIndex = 0;
+      }else{
+        colIndex++;
+      }
+    }
+    return [colIndex, rowIndex];
+  },
+
+  // private
+  getPositionNonSpan: function(position) {
+      var ret = 0;
+      var count = this.container.items.getCount();
+      for (var i = 0; i < count && i < position; i++) {
+          var child = this.container.items.get(i);
+          if (child.colspan) {
+              ret += child.colspan;
+          }
+          else {
+              ret += 1;
+          }
+      }
+      return ret;
+  },
 
     // private
     renderItem : function(c, position, target){
@@ -16500,13 +16500,13 @@
         return true;
     }
 
-    
+
 });
 
 Ext.Container.LAYOUTS['table'] = Ext.layout.TableLayout;
 
 Ext.layout.AbsoluteLayout = Ext.extend(Ext.layout.AnchorLayout, {
-    
+
     extraCls: 'x-abs-layout-item',
     isForm: false,
     // private
@@ -16520,7 +16520,7 @@
     onLayout : function(ct, target){
         if(this.isForm){ ct.body.position(); } else { target.position(); }
         Ext.layout.AbsoluteLayout.superclass.onLayout.call(this, ct, target);
-		Core.Debug.consoleWrite("    Doing absolute layout");
+    Core.Debug.consoleWrite("    Doing absolute layout");
     },
 
     // private
@@ -16542,23 +16542,23 @@
     adjustHeightAnchor : function(value, comp){
         return  value ? value - comp.getPosition(true)[1] : value;
     }
-    
+
 });
 Ext.Container.LAYOUTS['absolute'] = Ext.layout.AbsoluteLayout;
 
 Ext.Viewport = Ext.extend(Ext.Container, {
-	
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
+
     initComponent : function() {
         Ext.Viewport.superclass.initComponent.call(this);
         document.getElementsByTagName('html')[0].className += ' x-viewport';
@@ -16581,60 +16581,60 @@
 Ext.reg('viewport', Ext.Viewport);
 
 Ext.Panel = Ext.extend(Ext.Container, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-     
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
     baseCls : 'x-panel',
-    
+
     collapsedCls : 'x-panel-collapsed',
-    
+
     maskDisabled: true,
-    
+
     animCollapse: Ext.enableFx,
-    
+
     headerAsText: true,
-    
+
     buttonAlign: 'right',
-    
+
     collapsed : false,
-    
+
     collapseFirst: true,
-    
+
     minButtonWidth:75,
-    
+
     elements : 'body',
 
     // protected - these could be used to customize the behavior of the window,
@@ -16661,27 +16661,27 @@
         Ext.Panel.superclass.initComponent.call(this);
 
         this.addEvents(
-            
+
             'bodyresize',
-            
+
             'titlechange',
-            
+
             'iconchange',
-            
+
             'collapse',
-            
+
             'expand',
-            
+
             'beforecollapse',
-            
+
             'beforeexpand',
-            
+
             'beforeclose',
-            
+
             'close',
-            
+
             'activate',
-            
+
             'deactivate'
         );
 
@@ -16715,7 +16715,7 @@
 
         if(this.buttons){
             var btns = this.buttons;
-            
+
             this.buttons = [];
             for(var i = 0, len = btns.length; i < len; i++) {
                 if(btns[i].render){ // button instance
@@ -16934,7 +16934,7 @@
         }
     },
 
-    
+
     setIconClass : function(cls){
         var old = this.iconCls;
         this.iconCls = cls;
@@ -16970,17 +16970,17 @@
         );
     },
 
-    
+
     getTopToolbar : function(){
         return this.topToolbar;
     },
 
-    
+
     getBottomToolbar : function(){
         return this.bottomToolbar;
     },
 
-    
+
     addButton : function(config, handler, scope){
         var bc = {
             handler: handler,
@@ -17019,27 +17019,27 @@
         for(var i = 0, a = arguments, len = a.length; i < len; i++) {
             var tc = a[i];
             if(!this.tools[tc.id]){
-	            var overCls = 'x-tool-'+tc.id+'-over';
-	            var t = this.toolTemplate.insertFirst((tc.align !== 'left') ? this[this.toolTarget] : this[this.toolTarget].child('span'), tc, true);
-	            this.tools[tc.id] = t;
-	            t.enableDisplayMode('block');
-	            t.on('click', this.createToolHandler(t, tc, overCls, this));
-	            if(tc.on){
-	                t.on(tc.on);
-	            }
-	            if(tc.hidden){
-	                t.hide();
-	            }
-	            if(tc.qtip){
-	                if(typeof tc.qtip == 'object'){
-	                    Ext.QuickTips.register(Ext.apply({
-	                          target: t.id
-	                    }, tc.qtip));
-	                } else {
-	                    t.dom.qtip = tc.qtip;
-	                }
-	            }
-	            t.addClassOnOver(overCls);
+              var overCls = 'x-tool-'+tc.id+'-over';
+              var t = this.toolTemplate.insertFirst((tc.align !== 'left') ? this[this.toolTarget] : this[this.toolTarget].child('span'), tc, true);
+              this.tools[tc.id] = t;
+              t.enableDisplayMode('block');
+              t.on('click', this.createToolHandler(t, tc, overCls, this));
+              if(tc.on){
+                  t.on(tc.on);
+              }
+              if(tc.hidden){
+                  t.hide();
+              }
+              if(tc.qtip){
+                  if(typeof tc.qtip == 'object'){
+                      Ext.QuickTips.register(Ext.apply({
+                            target: t.id
+                      }, tc.qtip));
+                  } else {
+                      t.dom.qtip = tc.qtip;
+                  }
+              }
+              t.addClassOnOver(overCls);
             }
         }
     },
@@ -17132,7 +17132,7 @@
 
     // private
     initDraggable : function(){
-        
+
         this.dd = new Ext.Panel.DD(this, typeof this.draggable == 'boolean' ? null : this.draggable);
     },
 
@@ -17170,7 +17170,7 @@
         return Ext.applyIf(o, a);
     },
 
-    
+
     collapse : function(animate){
         if(this.collapsed || this.el.hasFxBlock() || this.fireEvent('beforecollapse', this, animate) === false){
             return;
@@ -17201,7 +17201,7 @@
         this.fireEvent('collapse', this);
     },
 
-    
+
     expand : function(animate){
         if(!this.collapsed || this.el.hasFxBlock() || this.fireEvent('beforeexpand', this, animate) === false){
             return;
@@ -17232,7 +17232,7 @@
         this.fireEvent('expand', this);
     },
 
-    
+
     toggleCollapse : function(animate){
         this[this.collapsed ? 'expand' : 'collapse'](animate);
         return this;
@@ -17271,7 +17271,7 @@
                 }else if(h == 'auto'){
                     this.body.setHeight(h);
                 }
-                
+
                 if(this.disabled && this.el._mask){
                     this.el._mask.setSize(this.el.dom.clientWidth, this.el.getHeight());
                 }
@@ -17306,7 +17306,7 @@
         this.syncShadow();
     },
 
-    
+
     getFrameWidth : function(){
         var w = this.el.getFrameWidth('lr');
 
@@ -17319,7 +17319,7 @@
         return w;
     },
 
-    
+
     getFrameHeight : function(){
         var h  = this.el.getFrameWidth('tb');
         h += (this.tbar ? this.tbar.getHeight() : 0) +
@@ -17338,12 +17338,12 @@
         return h;
     },
 
-    
+
     getInnerWidth : function(){
         return this.getSize().width - this.getFrameWidth();
     },
 
-    
+
     getInnerHeight : function(){
         return this.getSize().height - this.getFrameHeight();
     },
@@ -17360,7 +17360,7 @@
         return this.body;
     },
 
-    
+
     setTitle : function(title, iconCls){
         this.title = title;
         if(this.header && this.headerAsText){
@@ -17373,12 +17373,12 @@
         return this;
     },
 
-    
+
     getUpdater : function(){
         return this.body.getUpdater();
     },
 
-     
+
     load : function(){
         var um = this.body.getUpdater();
         um.update.apply(um, arguments);
@@ -17458,8 +17458,8 @@
             typeof this.autoLoad == 'object' ?
                 this.autoLoad : {url: this.autoLoad});
     },
-    
-    
+
+
     getTool: function(id) {
         return this.tools[id];
     }
@@ -17470,44 +17470,44 @@
 
 
 Ext.Window = Ext.extend(Ext.Panel, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
+
     baseCls : 'x-window',
-    
+
     resizable:true,
-    
+
     draggable:true,
-    
+
     closable : true,
-    
+
     constrain:false,
-    
+
     constrainHeader:false,
-    
+
     plain:false,
-    
+
     minimizable : false,
-    
+
     maximizable : false,
-    
+
     minHeight: 100,
-    
+
     minWidth: 200,
-    
+
     expandOnShow: true,
-    
+
     closeAction: 'close',
-    
+
     elements: 'header,body',
 
     // inherited docs, same default
@@ -17515,26 +17515,26 @@
 
     // private
     initHidden : true,
-    
+
     monitorResize : true,
-    
+
     frame:true,
-    
+
     floating:true,
 
     // private
     initComponent : function(){
         Ext.Window.superclass.initComponent.call(this);
         this.addEvents(
-            
-            
-            
+
+
+
             'resize',
-            
+
             'maximize',
-            
+
             'minimize',
-            
+
             'restore'
         );
     },
@@ -17609,7 +17609,7 @@
     },
 
     initDraggable : function(){
-        
+
         this.dd = new Ext.Window.DD(this);
     },
 
@@ -17711,7 +17711,7 @@
         this.fireEvent("resize", this, box.width, box.height);
     },
 
-    
+
     focus : function(){
         var f = this.focusEl, db = this.defaultButton, t = typeof db;
         if(t != 'undefined'){
@@ -17726,7 +17726,7 @@
         f.focus.defer(10, f);
     },
 
-    
+
     setAnimateTarget : function(el){
         el = Ext.get(el);
         this.animateTarget = el;
@@ -17755,7 +17755,7 @@
         }
     },
 
-    
+
     show : function(animateTarget, cb, scope){
         if(!this.rendered){
             this.render(Ext.getBody());
@@ -17791,7 +17791,7 @@
             this.fitContainer();
         }
         if(Ext.isMac && Ext.isGecko){ // work around stupid FF 2.0/Mac scroll bar bug
-        	this.cascade(this.setAutoScroll);
+          this.cascade(this.setAutoScroll);
         }
 
         if(this.monitorResize || this.modal || this.constrain || this.constrainHeader){
@@ -17825,7 +17825,7 @@
         this.proxy.shift(b);
     },
 
-    
+
     hide : function(animateTarget, cb, scope){
         if(this.activeGhost){ // drag active?
             this.hide.defer(100, this, [animateTarget, cb, scope]);
@@ -17936,9 +17936,9 @@
         if(show !== false){
             this.el.show();
             this.focus();
-	        if(Ext.isMac && Ext.isGecko){ // work around stupid FF 2.0/Mac scroll bar bug
-	        	this.cascade(this.setAutoScroll);
-	        }
+          if(Ext.isMac && Ext.isGecko){ // work around stupid FF 2.0/Mac scroll bar bug
+            this.cascade(this.setAutoScroll);
+          }
         }
         if(matchPosition !== false){
             this.setPosition(this.activeGhost.getLeft(true), this.activeGhost.getTop(true));
@@ -17948,12 +17948,12 @@
         delete this.activeGhost;
     },
 
-    
+
     minimize : function(){
         this.fireEvent('minimize', this);
     },
 
-    
+
     close : function(){
         if(this.fireEvent("beforeclose", this) !== false){
             this.hide(null, function(){
@@ -17963,7 +17963,7 @@
         }
     },
 
-    
+
     maximize : function(){
         if(!this.maximized){
             this.expand(false);
@@ -17991,7 +17991,7 @@
         }
     },
 
-    
+
     restore : function(){
         if(this.maximized){
             this.el.removeClass('x-window-maximized');
@@ -18017,7 +18017,7 @@
         }
     },
 
-    
+
     toggleMaximize : function(){
         this[this.maximized ? 'restore' : 'maximize']();
     },
@@ -18044,14 +18044,14 @@
         this.lastZIndex = index;
     },
 
-    
+
     alignTo : function(element, position, offsets){
         var xy = this.el.getAlignToXY(element, position, offsets);
         this.setPagePosition(xy[0], xy[1]);
         return this;
     },
 
-    
+
     anchorTo : function(el, alignment, offsets, monitorScroll){
       if(this.doAnchor){
           Ext.EventManager.removeResizeListener(this.doAnchor, this);
@@ -18061,7 +18061,7 @@
           this.alignTo(el, alignment, offsets);
       };
       Ext.EventManager.onWindowResize(this.doAnchor, this);
-      
+
       var tm = typeof monitorScroll;
       if(tm != 'undefined'){
           Ext.EventManager.on(window, 'scroll', this.doAnchor, this,
@@ -18071,7 +18071,7 @@
       return this;
     },
 
-    
+
     toFront : function(e){
         if(this.manager.bringToFront(this)){
             if(!e || !e.getTarget().focus){
@@ -18081,7 +18081,7 @@
         return this;
     },
 
-    
+
     setActive : function(active){
         if(active){
             if(!this.maximized){
@@ -18094,20 +18094,20 @@
         }
     },
 
-    
+
     toBack : function(){
         this.manager.sendToBack(this);
         return this;
     },
 
-    
+
     center : function(){
         var xy = this.el.getAlignToXY(this.container, 'c-c');
         this.setPagePosition(xy[0], xy[1]);
         return this;
     }
 
-    
+
 });
 Ext.reg('window', Ext.Window);
 
@@ -18198,7 +18198,7 @@
     };
 
     return {
-        
+
         zseed : 9000,
 
         // private
@@ -18215,12 +18215,12 @@
             accessList.remove(win);
         },
 
-        
+
         get : function(id){
             return typeof id == "object" ? id : list[id];
         },
 
-        
+
         bringToFront : function(win){
             win = this.get(win);
             if(win != front){
@@ -18231,7 +18231,7 @@
             return false;
         },
 
-        
+
         sendToBack : function(win){
             win = this.get(win);
             win._lastAccess = -(new Date().getTime());
@@ -18239,7 +18239,7 @@
             return win;
         },
 
-        
+
         hideAll : function(){
             for(var id in list){
                 if(list[id] && typeof list[id] != "function" && list[id].isVisible()){
@@ -18248,12 +18248,12 @@
             }
         },
 
-        
+
         getActive : function(){
             return front;
         },
 
-        
+
         getBy : function(fn, scope){
             var r = [];
             for(var i = accessList.length-1; i >=0; --i) {
@@ -18265,7 +18265,7 @@
             return r;
         },
 
-        
+
         each : function(fn, scope){
             for(var id in list){
                 if(list[id] && typeof list[id] != "function"){
@@ -18289,7 +18289,7 @@
 };
 
 Ext.dd.PanelProxy.prototype = {
-    
+
     insertProxy : true,
 
     // private overrides
@@ -18299,22 +18299,22 @@
     stop : Ext.emptyFn,
     sync: Ext.emptyFn,
 
-    
+
     getEl : function(){
         return this.ghost;
     },
 
-    
+
     getGhost : function(){
         return this.ghost;
     },
 
-    
+
     getProxy : function(){
         return this.proxy;
     },
 
-    
+
     hide : function(){
         if(this.ghost){
             if(this.proxy){
@@ -18327,7 +18327,7 @@
         }
     },
 
-    
+
     show : function(){
         if(!this.ghost){
             this.ghost = this.panel.createGhost(undefined, undefined, Ext.getBody());
@@ -18348,7 +18348,7 @@
         }
     },
 
-    
+
     moveProxy : function(parentNode, before){
         if(this.proxy){
             parentNode.insertBefore(this.proxy.dom, before);
@@ -18402,31 +18402,31 @@
 });
 
 Ext.state.Provider = function(){
-    
+
     this.addEvents("statechange");
     this.state = {};
     Ext.state.Provider.superclass.constructor.call(this);
 };
 Ext.extend(Ext.state.Provider, Ext.util.Observable, {
-    
+
     get : function(name, defaultValue){
         return typeof this.state[name] == "undefined" ?
             defaultValue : this.state[name];
     },
-    
-    
+
+
     clear : function(name){
         delete this.state[name];
         this.fireEvent("statechange", this, name, null);
     },
-    
-    
+
+
     set : function(name, value){
         this.state[name] = value;
         this.fireEvent("statechange", this, name, value);
     },
-    
-    
+
+
     decodeValue : function(cookie){
         var re = /^(a|n|d|b|s|o)\:(.*)$/;
         var matches = re.exec(unescape(cookie));
@@ -18459,8 +18459,8 @@
                 return v;
         }
     },
-    
-    
+
+
     encodeValue : function(v){
         var enc;
         if(typeof v == "number"){
@@ -18487,7 +18487,7 @@
         }else{
             enc = "s:" + v;
         }
-        return escape(enc);        
+        return escape(enc);
     }
 });
 
@@ -18496,27 +18496,27 @@
     var provider = new Ext.state.Provider();
 
     return {
-        
+
         setProvider : function(stateProvider){
             provider = stateProvider;
         },
 
-        
+
         get : function(key, defaultValue){
             return provider.get(key, defaultValue);
         },
 
-        
+
          set : function(key, value){
             provider.set(key, value);
         },
 
-        
+
         clear : function(key){
             provider.clear(key);
         },
 
-        
+
         getProvider : function(){
             return provider;
         }
@@ -18556,8 +18556,8 @@
         var cookies = {};
         var c = document.cookie + ";";
         var re = /\s?(.*?)=(.*?);/g;
-    	var matches;
-    	while((matches = re.exec(c)) != null){
+      var matches;
+      while((matches = re.exec(c)) != null){
             var name = matches[1];
             var value = matches[2];
             if(name && name.substring(0,3) == "ys-"){
@@ -18586,22 +18586,22 @@
 });
 
 Ext.DataView = Ext.extend(Ext.BoxComponent, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
     selectedClass : "x-view-selected",
-    
+
     emptyText : "",
 
-    
+
     deferEmptyText: true,
-    
+
     trackOver: false,
 
     //private
@@ -18616,24 +18616,24 @@
         }
 
         this.addEvents(
-            
+
             "beforeclick",
-            
+
             "click",
-            
+
             "mouseenter",
-            
+
             "mouseleave",
-            
+
             "containerclick",
-            
+
             "dblclick",
-            
+
             "contextmenu",
-            
+
             "selectionchange",
 
-            
+
             "beforeselect"
         );
 
@@ -18674,7 +18674,7 @@
         }
     },
 
-    
+
     refresh : function(){
         this.clearSelections(false, true);
         this.el.update("");
@@ -18692,12 +18692,12 @@
         this.updateIndexes(0);
     },
 
-    
+
     prepareData : function(data){
         return data;
     },
 
-    
+
     collectData : function(records, startIndex){
         var r = [];
         for(var i = 0, len = records.length; i < len; i++){
@@ -18752,7 +18752,7 @@
         this.updateIndexes(index);
     },
 
-    
+
     refreshNode : function(index){
         this.onUpdate(this.store, this.store.getAt(index));
     },
@@ -18766,13 +18766,13 @@
             ns[i].viewIndex = i;
         }
     },
-    
-    
+
+
     getStore : function(){
         return this.store;
     },
 
-    
+
     setStore : function(store, initial){
         if(!initial && this.store){
             this.store.un("beforeload", this.onBeforeLoad, this);
@@ -18797,7 +18797,7 @@
         }
     },
 
-    
+
     findItemFromChild : function(node){
         return Ext.fly(node).findParent(this.itemSelector, this.el);
     },
@@ -18893,17 +18893,17 @@
         }
     },
 
-    
+
     getSelectionCount : function(){
         return this.selected.getCount()
     },
 
-    
+
     getSelectedNodes : function(){
         return this.selected.elements;
     },
 
-    
+
     getSelectedIndexes : function(){
         var indexes = [], s = this.selected.elements;
         for(var i = 0, len = s.length; i < len; i++){
@@ -18912,7 +18912,7 @@
         return indexes;
     },
 
-    
+
     getSelectedRecords : function(){
         var r = [], s = this.selected.elements;
         for(var i = 0, len = s.length; i < len; i++){
@@ -18921,7 +18921,7 @@
         return r;
     },
 
-    
+
     getRecords : function(nodes){
         var r = [], s = nodes;
         for(var i = 0, len = s.length; i < len; i++){
@@ -18930,12 +18930,12 @@
         return r;
     },
 
-    
+
     getRecord : function(node){
         return this.store.getAt(node.viewIndex);
     },
 
-    
+
     clearSelections : function(suppressEvent, skipUpdate){
         if((this.multiSelect || this.singleSelect) && this.selected.getCount() > 0){
             if(!skipUpdate){
@@ -18949,12 +18949,12 @@
         }
     },
 
-    
+
     isSelected : function(node){
         return this.selected.contains(this.getNode(node));
     },
 
-    
+
     deselect : function(node){
         if(this.isSelected(node)){
             node = this.getNode(node);
@@ -18967,7 +18967,7 @@
         }
     },
 
-    
+
     select : function(nodeInfo, keepExisting, suppressEvent){
         if(Ext.isArray(nodeInfo)){
             if(!keepExisting){
@@ -18976,9 +18976,9 @@
             for(var i = 0, len = nodeInfo.length; i < len; i++){
                 this.select(nodeInfo[i], true, true);
             }
-	        if(!suppressEvent){
-	            this.fireEvent("selectionchange", this, this.selected.elements);
-	        }
+          if(!suppressEvent){
+              this.fireEvent("selectionchange", this, this.selected.elements);
+          }
         } else{
             var node = this.getNode(nodeInfo);
             if(!keepExisting){
@@ -18997,7 +18997,7 @@
         }
     },
 
-    
+
     selectRange : function(start, end, keepExisting){
         if(!keepExisting){
             this.clearSelections(true);
@@ -19005,7 +19005,7 @@
         this.select(this.getNodes(start, end), true);
     },
 
-    
+
     getNode : function(nodeInfo){
         if(typeof nodeInfo == "string"){
             return document.getElementById(nodeInfo);
@@ -19015,7 +19015,7 @@
         return nodeInfo;
     },
 
-    
+
     getNodes : function(start, end){
         var ns = this.all.elements;
         start = start || 0;
@@ -19033,7 +19033,7 @@
         return nodes;
     },
 
-    
+
     indexOf : function(node){
         node = this.getNode(node);
         if(typeof node.viewIndex == "number"){
@@ -19062,7 +19062,7 @@
 Ext.ColorPalette = function(config){
     Ext.ColorPalette.superclass.constructor.call(this, config);
     this.addEvents(
-        
+
         'select'
     );
 
@@ -19071,19 +19071,19 @@
     }
 };
 Ext.extend(Ext.ColorPalette, Ext.Component, {
-	
-    
+
+
     itemCls : "x-color-palette",
-    
+
     value : null,
     clickEvent:'click',
     // private
     ctype: "Ext.ColorPalette",
 
-    
+
     allowReselect : false,
 
-    
+
     colors : [
         "000000", "993300", "333300", "003300", "003366", "000080", "333399", "333333",
         "800000", "FF6600", "808000", "008000", "008080", "0000FF", "666699", "808080",
@@ -19128,7 +19128,7 @@
         }
     },
 
-    
+
     select : function(color){
         color = color.replace("#", "");
         if(color != this.value || this.allowReselect){
@@ -19142,50 +19142,50 @@
         }
     }
 
-    
+
 });
 Ext.reg('colorpalette', Ext.ColorPalette);
 
 Ext.DatePicker = Ext.extend(Ext.Component, {
-    
+
     todayText : "Today",
-    
+
     okText : "&#160;OK&#160;", // &#160; to give the user extra clicking room
-    
+
     cancelText : "Cancel",
-    
+
     todayTip : "{0} (Spacebar)",
-    
+
     minText : "This date is before the minimum date",
-    
+
     maxText : "This date is after the maximum date",
-    
+
     format : "m/d/y",
-    
+
     disabledDaysText : "Disabled",
-    
+
     disabledDatesText : "Disabled",
-    
+
     constrainToViewport : true,
-    
+
     monthNames : Date.monthNames,
-    
+
     dayNames : Date.dayNames,
-    
+
     nextText: 'Next Month (Control+Right)',
-    
+
     prevText: 'Previous Month (Control+Left)',
-    
+
     monthYearText: 'Choose a month (Control+Up/Down to move years)',
-    
+
     startDay : 0,
-    
+
     showToday : true,
-    
-    
-    
-    
-    
+
+
+
+
+
 
     // private
     initComponent : function(){
@@ -19195,7 +19195,7 @@
                  this.value.clearTime() : new Date().clearTime();
 
         this.addEvents(
-            
+
             'select'
         );
 
@@ -19218,8 +19218,8 @@
             this.disabledDatesRE = new RegExp(re + ")");
         }
     },
-    
-    
+
+
     setDisabledDates : function(dd){
         if(Ext.isArray(dd)){
             this.disabledDates = dd;
@@ -19230,26 +19230,26 @@
         this.initDisabledDays();
         this.update(this.value, true);
     },
-    
-    
+
+
     setDisabledDays : function(dd){
         this.disabledDays = dd;
         this.update(this.value, true);
     },
-    
-    
+
+
     setMinDate : function(dt){
         this.minDate = dt;
         this.update(this.value, true);
     },
-    
-    
+
+
     setMaxDate : function(dt){
         this.maxDate = dt;
         this.update(this.value, true);
     },
 
-    
+
     setValue : function(value){
         var old = this.value;
         this.value = value.clearTime(true);
@@ -19258,7 +19258,7 @@
         }
     },
 
-    
+
     getValue : function(){
         return this.value;
     },
@@ -19291,8 +19291,8 @@
             }
             m[m.length] = '<td><a href="#" hidefocus="on" class="x-date-date" tabIndex="1"><em><span></span></em></a></td>';
         }
-        m.push('</tr></tbody></table></td></tr>', 
-                this.showToday ? '<tr><td colspan="3" class="x-date-bottom" align="center"></td></tr>' : '', 
+        m.push('</tr></tbody></table></td></tr>',
+                this.showToday ? '<tr><td colspan="3" class="x-date-bottom" align="center"></td></tr>' : '',
                 '</table><div class="x-date-mp"></div>');
 
         var el = document.createElement("div");
@@ -19322,7 +19322,7 @@
 
         this.monthPicker = this.el.down('div.x-date-mp');
         this.monthPicker.enableDisplayMode('block');
-        
+
         var kn = new Ext.KeyNav(this.eventEl, {
             "left" : function(e){
                 e.ctrlKey ?
@@ -19367,7 +19367,7 @@
         this.eventEl.on("click", this.handleDateClick,  this, {delegate: "a.x-date-date"});
 
         this.el.unselectable();
-        
+
         this.cells = this.el.select("table.x-date-inner tbody td");
         this.textNodes = this.el.query("table.x-date-inner tbody span");
 
@@ -19391,7 +19391,7 @@
                 scope: this
             });
         }
-        
+
         if(Ext.isIE){
             this.el.repaint();
         }
@@ -19480,7 +19480,7 @@
 
     // private
     selectMPMonth: function(m){
-        
+
     },
 
     // private
@@ -19586,8 +19586,8 @@
     // private
     selectToday : function(){
         if(this.todayBtn && !this.todayBtn.disabled){
-	        this.setValue(new Date().clearTime());
-	        this.fireEvent("select", this, this.value);
+          this.setValue(new Date().clearTime());
+          this.fireEvent("select", this, this.value);
         }
     },
 
@@ -19638,13 +19638,13 @@
         var ddays = this.disabledDays ? this.disabledDays.join("") : false;
         var ddaysText = this.disabledDaysText;
         var format = this.format;
-        
+
         if(this.showToday){
             var td = new Date().clearTime();
-            var disable = (td < min || td > max || 
-                (ddMatch && format && ddMatch.test(td.dateFormat(format))) || 
+            var disable = (td < min || td > max ||
+                (ddMatch && format && ddMatch.test(td.dateFormat(format))) ||
                 (ddays && ddays.indexOf(td.getDay()) != -1));
-                        
+
             this.todayBtn.setDisabled(disable);
             this.todayKeyListener[disable ? 'disable' : 'enable']();
         }
@@ -19744,51 +19744,51 @@
         }
     }
 
-    
+
 });
 Ext.reg('datepicker', Ext.DatePicker);
 
 Ext.TabPanel = Ext.extend(Ext.Panel,  {
-    
-    
-    
+
+
+
     monitorResize : true,
-    
+
     deferredRender : true,
-    
+
     tabWidth: 120,
-    
+
     minTabWidth: 30,
-    
+
     resizeTabs:false,
-    
+
     enableTabScroll: false,
-    
+
     scrollIncrement : 0,
-    
+
     scrollRepeatInterval : 400,
-    
+
     scrollDuration : .35,
-    
+
     animScroll : true,
-    
+
     tabPosition: 'top',
-    
+
     baseCls: 'x-tab-panel',
-    
+
     autoTabs : false,
-    
+
     autoTabSelector:'div.x-tab',
-    
+
     activeTab : null,
-    
+
     tabMargin : 2,
-    
+
     plain: false,
-    
+
     wheelIncrement : 20,
 
-    
+
     idDelimiter : '__',
 
     // private
@@ -19805,11 +19805,11 @@
         this.frame = false;
         Ext.TabPanel.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'beforetabchange',
-            
+
             'tabchange',
-            
+
             'contextmenu'
         );
         this.setLayout(new Ext.layout.CardLayout({
@@ -19828,7 +19828,7 @@
         this.initItems();
         this.on('bodyresize', this.updateFrameFooterSizes, this);
     },
-    
+
     updateFrameFooterSizes: function(tabPanel, w, h) {
         if (this['ffl']) {
             this['ffl'].setWidth(w);
@@ -19847,9 +19847,9 @@
             delete this.activeTab;
             this.setActiveTab(item);
         }
-        
+
         // add divs for the tab pane frame above footer and below the toolbar/bwrap
-        
+
         var el = document.createElement('div');
         el.className = this.baseCls + "-frame-footer-left";
         this['ffl'] = Ext.Element.get(el);
@@ -19860,18 +19860,18 @@
         } else {
             this['ffl'].insertAfter(this.bwrap);
         }
-        
+
         var el2 = document.createElement('div');
         el2.className = this.baseCls + "-frame-footer-right";
         this['ffr'] = Ext.Element.get(el2);
         this['ffl'].appendChild(el2);
-        
+
         var el3 = document.createElement('div');
         el3.className = this.baseCls + "-frame-footer-centre";
         this['ffc'] = Ext.Element.get(el3);
         this['ffr'].appendChild(el3);
     },
-    
+
     getFrameHeight : function(){
         var frameHeight = Ext.TabPanel.superclass.getFrameHeight.call(this);
         frameHeight += this['ffl'].getHeight();
@@ -19983,7 +19983,7 @@
         }
     },
 
-    
+
     readTabs : function(removeExisting){
         if(removeExisting === true){
             this.items.each(function(item){
@@ -20131,7 +20131,7 @@
             Ext.fly(el).child('span.x-tab-strip-text', true).innerHTML = item.title;
         }
     },
-    
+
     //private
     onItemIconChanged: function(item, iconCls, oldCls){
         var el = this.getTabEl(item);
@@ -20140,7 +20140,7 @@
         }
     },
 
-    
+
     getTabEl : function(item){
         var itemId = (typeof item === 'number')?this.items.items[item].getItemId() : item.getItemId();
         return document.getElementById(this.id+this.idDelimiter+itemId);
@@ -20152,18 +20152,18 @@
         this.delegateUpdates();
     },
 
-    
+
     beginUpdate : function(){
         this.suspendUpdates = true;
     },
 
-    
+
     endUpdate : function(){
         this.suspendUpdates = false;
         this.delegateUpdates();
     },
 
-    
+
     hideTabStripItem : function(item){
         item = this.getComponent(item);
         var el = this.getTabEl(item);
@@ -20174,7 +20174,7 @@
         this.stack.remove(item);
     },
 
-    
+
     unhideTabStripItem : function(item){
         item = this.getComponent(item);
         var el = this.getTabEl(item);
@@ -20231,7 +20231,7 @@
         return w;
     },
 
-    
+
     setActiveTab : function(item){
         item = this.getComponent(item);
         if(!item || this.fireEvent('beforetabchange', this, item, this.activeTab) === false){
@@ -20267,12 +20267,12 @@
         }
     },
 
-    
+
     getActiveTab : function(){
         return this.activeTab || null;
     },
 
-    
+
     getItem : function(item){
         return this.getComponent(item);
     },
@@ -20391,7 +20391,7 @@
         return this.scrollIncrement || (this.resizeTabs ? this.lastTabWidth+2 : 100);
     },
 
-    
+
 
     scrollToTab : function(item, animate){
         if(!item){ return; }
@@ -20470,17 +20470,17 @@
         Ext.TabPanel.superclass.beforeDestroy.apply(this);
     }
 
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
 
 });
 Ext.reg('tabpanel', Ext.TabPanel);
@@ -20519,66 +20519,66 @@
 
 
 Ext.Button = Ext.extend(Ext.Component, {
-    
+
     hidden : false,
-    
+
     disabled : false,
-    
+
     pressed : false,
-    
 
-    
 
-    
 
-    
+
+
+
+
     enableToggle: false,
-    
-    
-    
+
+
+
     menuAlign : "tl-bl?",
 
-    
-    
+
+
     type : 'button',
 
     // private
     menuClassTarget: 'tr',
 
-    
+
     clickEvent : 'click',
 
-    
+
     handleMouseEvents : true,
 
-    
+
     tooltipType : 'qtip',
 
-    
+
     buttonSelector : "button:first-child",
 
-    
-    
+
+
 
     initComponent : function(){
         Ext.Button.superclass.initComponent.call(this);
 
         this.addEvents(
-            
+
             "click",
-            
+
             "toggle",
-            
+
             'mouseover',
-            
+
             'mouseout',
-            
+
             'menushow',
-            
+
             'menuhide',
-            
+
             'menutriggerover',
-            
+
             'menutriggerout'
         );
         if(this.menu){
@@ -20687,7 +20687,7 @@
         }
     },
 
-    
+
     setIconClass : function(cls){
         if(this.el){
             this.el.child(this.buttonSelector).replaceClass(this.iconCls, cls);
@@ -20697,7 +20697,7 @@
 
     // private
     beforeDestroy: function(){
-    	if(this.rendered){
+      if(this.rendered){
             var btnEl = this.el.child(this.buttonSelector);
             if(btnEl){
                 if(this.tooltip){
@@ -20705,7 +20705,7 @@
                 }
                 btnEl.removeAllListeners();
             }
-	    }
+      }
         if(this.menu){
             Ext.destroy(this.menu);
         }
@@ -20737,13 +20737,13 @@
         }
     },
 
-    
+
     setHandler : function(handler, scope){
         this.handler = handler;
         this.scope = scope;
     },
 
-    
+
     setText : function(text){
         this.text = text;
         if(this.el){
@@ -20752,12 +20752,12 @@
         this.autoWidth();
     },
 
-    
+
     getText : function(){
         return this.text;
     },
 
-    
+
     toggle : function(state){
         state = state === undefined ? !this.pressed : state;
         if(state != this.pressed){
@@ -20776,7 +20776,7 @@
         }
     },
 
-    
+
     focus : function(){
         this.el.child(this.buttonSelector).focus();
     },
@@ -20803,7 +20803,7 @@
         this.disabled = false;
     },
 
-    
+
     showMenu : function(){
         if(this.menu){
             this.menu.show(this.el, this.menuAlign);
@@ -20811,7 +20811,7 @@
         return this;
     },
 
-    
+
     hideMenu : function(){
         if(this.menu){
             this.menu.hide();
@@ -20819,7 +20819,7 @@
         return this;
     },
 
-    
+
     hasVisibleMenu : function(){
         return this.menu && this.menu.isVisible();
     },
@@ -20945,7 +20945,7 @@
 
 
 
-    
+
 });
 Ext.reg('button', Ext.Button);
 
@@ -20991,13 +20991,13 @@
 }();
 
 Ext.SplitButton = Ext.extend(Ext.Button, {
-	// private
+  // private
     arrowSelector : 'button:last',
 
     // private
     initComponent : function(){
         Ext.SplitButton.superclass.initComponent.call(this);
-        
+
         this.addEvents("arrowclick");
     },
 
@@ -21048,13 +21048,13 @@
                 }
             }
             this.el.setWidth(tbl.getWidth()+tbl2.getWidth());
-        } 
+        }
     },
 
-    
+
     setArrowHandler : function(handler, scope){
         this.arrowHandler = handler;
-        this.scope = scope;  
+        this.scope = scope;
     },
 
     // private
@@ -21137,11 +21137,11 @@
 Ext.reg('splitbutton', Ext.SplitButton);
 
 Ext.CycleButton = Ext.extend(Ext.SplitButton, {
-    
-    
-    
-    
-	
+
+
+
+
+
 
     // private
     getItemText : function(item){
@@ -21156,7 +21156,7 @@
         return undefined;
     },
 
-    
+
     setActiveItem : function(item, suppressEvent){
         if(typeof item != 'object'){
             item = this.menu.items.get(item);
@@ -21185,7 +21185,7 @@
         }
     },
 
-    
+
     getActiveItem : function(){
         return this.activeItem;
     },
@@ -21193,7 +21193,7 @@
     // private
     initComponent : function(){
         this.addEvents(
-            
+
             "change"
         );
 
@@ -21231,25 +21231,25 @@
         }
     },
 
-    
+
     toggleSelected : function(){
         this.menu.render();
-		
-		var nextIdx, checkItem;
-		for (var i = 1; i < this.itemCount; i++) {
-			nextIdx = (this.activeItem.itemIndex + i) % this.itemCount;
-			// check the potential item
-			checkItem = this.menu.items.itemAt(nextIdx);
-			// if its not disabled then check it.
-			if (!checkItem.disabled) {
-				checkItem.setChecked(true);
-				break;
-			}
-		}
+
+    var nextIdx, checkItem;
+    for (var i = 1; i < this.itemCount; i++) {
+      nextIdx = (this.activeItem.itemIndex + i) % this.itemCount;
+      // check the potential item
+      checkItem = this.menu.items.itemAt(nextIdx);
+      // if its not disabled then check it.
+      if (!checkItem.disabled) {
+        checkItem.setChecked(true);
+        break;
+      }
+    }
     }
 });
 Ext.reg('cycle', Ext.CycleButton);
- 
+
  Ext.Toolbar = function(config){
     if(Ext.isArray(config)){
         config = {buttons:config};
@@ -21272,7 +21272,7 @@
         if(this.items){
             this.buttons = this.items;
         }
-        
+
         this.items = new Ext.util.MixedCollection(false, function(o){
             return o.itemId || o.id || Ext.id();
         });
@@ -21299,7 +21299,7 @@
         }
     },
 
-    
+
     add : function(){
         var a = arguments, l = a.length;
         for(var i = 0; i < l; i++){
@@ -21329,28 +21329,28 @@
             }
         }
     },
-    
-    
+
+
     addSeparator : function(){
         return this.addItem(new T.Separator());
     },
 
-    
+
     addSpacer : function(){
         return this.addItem(new T.Spacer());
     },
 
-    
+
     addFill : function(){
         return this.addItem(new T.Fill());
     },
 
-    
+
     addElement : function(el){
         return this.addItem(new T.Item(el));
     },
-    
-    
+
+
     addItem : function(item){
         var td = this.nextBlock();
         this.initMenuTracking(item);
@@ -21358,8 +21358,8 @@
         this.items.add(item);
         return item;
     },
-    
-    
+
+
     addButton : function(config){
         if(Ext.isArray(config)){
             var buttons = [];
@@ -21370,7 +21370,7 @@
         }
         var b = config;
         if(!(config instanceof T.Button)){
-            b = config.split ? 
+            b = config.split ?
                 new T.SplitButton(config) :
                 new T.Button(config);
         }
@@ -21393,12 +21393,12 @@
         }
     },
 
-    
+
     addText : function(text){
         return this.addItem(new T.TextItem(text));
     },
-    
-    
+
+
     insertButton : function(index, item){
         if(Ext.isArray(item)){
             var buttons = [];
@@ -21417,8 +21417,8 @@
         this.items.insert(index, item);
         return item;
     },
-    
-    
+
+
     addDom : function(config, returnEl){
         var td = this.nextBlock();
         Ext.DomHelper.overwrite(td, config);
@@ -21428,7 +21428,7 @@
         return ti;
     },
 
-    
+
     addField : function(field){
         var td = this.nextBlock();
         field.render(td);
@@ -21493,7 +21493,7 @@
         delete this.activeMenuBtn;
     }
 
-    
+
 });
 Ext.reg('toolbar', Ext.Toolbar);
 
@@ -21505,10 +21505,10 @@
 };
 
 T.Item.prototype = {
-    
-    
+
+
     getEl : function(){
-       return this.el;  
+       return this.el;
     },
 
     // private
@@ -21516,8 +21516,8 @@
         this.td = td;
         td.appendChild(this.el);
     },
-    
-    
+
+
     destroy : function(){
         if(this.el){
             var el = Ext.get(this.el);
@@ -21525,20 +21525,20 @@
         }
         Ext.removeNode(this.td);
     },
-    
-    
+
+
     show: function(){
         this.hidden = false;
         this.td.style.display = "";
     },
-    
-    
+
+
     hide: function(){
         this.hidden = true;
         this.td.style.display = "none";
     },
-    
-    
+
+
     setVisible: function(visible){
         if(visible) {
             this.show();
@@ -21546,20 +21546,20 @@
             this.hide();
         }
     },
-    
-    
+
+
     focus : function(){
         Ext.fly(this.el).focus();
     },
-    
-    
+
+
     disable : function(){
         Ext.fly(this.td).addClass("x-item-disabled");
         this.disabled = true;
         this.el.disabled = true;
     },
-    
-    
+
+
     enable : function(){
         Ext.fly(this.td).removeClass("x-item-disabled");
         this.disabled = false;
@@ -21654,38 +21654,38 @@
 
 
 Ext.PagingToolbar = Ext.extend(Ext.Toolbar, {
-    
-    
-    
+
+
+
     pageSize: 20,
-    
+
     displayMsg : 'Displaying {0} - {1} of {2}',
-    
+
     emptyMsg : 'No data to display',
-    
+
     beforePageText : "Page",
-    
+
     afterPageText : "of {0}",
-    
+
     firstText : "First Page",
-    
+
     prevText : "Previous Page",
-    
+
     nextText : "Next Page",
-    
+
     lastText : "Last Page",
-    
+
     refreshText : "Refresh",
 
-    
+
     paramNames : {start: 'start', limit: 'limit'},
 
     // private
     initComponent : function(){
         this.addEvents(
-            
+
             'change',
-            
+
             'beforechange'
         );
         Ext.PagingToolbar.superclass.initComponent.call(this);
@@ -21863,7 +21863,7 @@
         }
     },
 
-    
+
     changePage: function(page){
         this.doLoad(((page-1) * this.pageSize).constrain(0, this.store.getTotalCount()));
     },
@@ -21893,7 +21893,7 @@
         }
     },
 
-    
+
     unbind : function(store){
         store = Ext.StoreMgr.lookup(store);
         store.un("beforeload", this.beforeLoad, this);
@@ -21902,7 +21902,7 @@
         this.store = undefined;
     },
 
-    
+
     bind : function(store){
         store = Ext.StoreMgr.lookup(store);
         store.on("beforeload", this.beforeLoad, this);
@@ -21923,7 +21923,7 @@
 
 Ext.Resizable = function(el, config){
     this.el = Ext.get(el);
-    
+
     if(config && config.wrap){
         config.resizeChild = this.el;
         this.el = this.el.wrap(typeof config.wrap == "object" ? config.wrap : {cls:"xresizable-wrap"});
@@ -21940,13 +21940,13 @@
         }
     }
 
-    
+
     this.proxy = this.el.createProxy({tag: "div", cls: "x-resizable-proxy", id: this.el.id + "-rzproxy"}, Ext.getBody());
     this.proxy.unselectable();
     this.proxy.enableDisplayMode('block');
 
     Ext.apply(this, config);
-    
+
     if(this.pinned){
         this.disableTrackOver = true;
         this.el.addClass("x-resizable-pinned");
@@ -21975,13 +21975,13 @@
     }
     // legacy
     this.corner = this.southeast;
-    
+
     if(this.handles.indexOf("n") != -1 || this.handles.indexOf("w") != -1){
         this.updateBox = true;
-    }   
-   
+    }
+
     this.activeHandle = null;
-    
+
     if(this.resizeChild){
         if(typeof this.resizeChild == "boolean"){
             this.resizeChild = Ext.get(this.el.dom.firstChild, true);
@@ -21989,7 +21989,7 @@
             this.resizeChild = Ext.get(this.resizeChild, true);
         }
     }
-    
+
     if(this.adjustments == "auto"){
         var rc = this.resizeChild;
         var hw = this.west, he = this.east, hn = this.north, hs = this.south;
@@ -22000,22 +22000,22 @@
         }
         this.adjustments = [
             (he ? -he.el.getWidth() : 0) + (hw ? -hw.el.getWidth() : 0),
-            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : 0) -1 
+            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : 0) -1
         ];
     }
-    
+
     if(this.draggable){
-        this.dd = this.dynamic ? 
+        this.dd = this.dynamic ?
             this.el.initDD(null) : this.el.initDDProxy(null, {dragElId: this.proxy.id});
         this.dd.setHandleElId(this.resizeChild ? this.resizeChild.id : this.el.id);
     }
-    
+
     // public events
     this.addEvents(
         "beforeresize",
         "resize"
     );
-    
+
     if(this.width !== null && this.height !== null){
         this.resizeTo(this.width, this.height);
     }else{
@@ -22053,13 +22053,13 @@
         minY: 0,
         draggable: false,
 
-        
-        
 
-        
-        
-    
-    
+
+
+
+
+
+
     resizeTo : function(width, height){
         this.el.setSize(width, height);
         this.updateChildSize();
@@ -22114,7 +22114,7 @@
             e.stopEvent();
             this.activeHandle = handle;
             this.startSizing(e, handle);
-        }          
+        }
     },
 
     // private
@@ -22167,7 +22167,7 @@
         return Math.max(min, newValue);
     },
 
-    
+
     resizeElement : function(){
         var box = this.proxy.getBox();
         if(this.updateBox){
@@ -22185,11 +22185,11 @@
     // private
     constrain : function(v, diff, m, mx){
         if(v - diff < m){
-            diff = v - m;    
+            diff = v - m;
         }else if(v - diff > mx){
-            diff = mx - v; 
+            diff = mx - v;
         }
-        return diff;                
+        return diff;
     },
 
     // private
@@ -22211,16 +22211,16 @@
             var mxw = this.maxWidth, mxh = this.maxHeight;
             var wi = this.widthIncrement;
             var hi = this.heightIncrement;
-            
+
             var eventXY = e.getXY();
             var diffX = -(this.startPoint[0] - Math.max(this.minX, eventXY[0]));
             var diffY = -(this.startPoint[1] - Math.max(this.minY, eventXY[1]));
-            
+
             var pos = this.activeHandle.position;
-            
+
             switch(pos){
                 case "east":
-                    w += diffX; 
+                    w += diffX;
                     w = Math.min(Math.max(mw, w), mxw);
                     break;
                 case "south":
@@ -22228,7 +22228,7 @@
                     h = Math.min(Math.max(mh, h), mxh);
                     break;
                 case "southeast":
-                    w += diffX; 
+                    w += diffX;
                     h += diffY;
                     w = Math.min(Math.max(mw, w), mxw);
                     h = Math.min(Math.max(mh, h), mxh);
@@ -22244,7 +22244,7 @@
                     w -= diffX;
                     break;
                 case "northeast":
-                    w += diffX; 
+                    w += diffX;
                     w = Math.min(Math.max(mw, w), mxw);
                     diffY = this.constrain(h, diffY, mh, mxh);
                     y += diffY;
@@ -22266,7 +22266,7 @@
                     w -= diffX;
                     break;
             }
-            
+
             var sw = this.snap(w, wi, mw);
             var sh = this.snap(h, hi, mh);
             if(sw != w || sh != h){
@@ -22291,7 +22291,7 @@
                 w = sw;
                 h = sh;
             }
-            
+
             if(this.preserveRatio){
                 switch(pos){
                     case "southeast":
@@ -22342,7 +22342,7 @@
                         y += th - h;
                          x += tw - w;
                        break;
-                        
+
                 }
             }
             this.proxy.setBounds(x, y, w, h);
@@ -22366,18 +22366,18 @@
             this.el.removeClass("x-resizable-over");
         }
     },
-    
-    
+
+
     getEl : function(){
         return this.el;
     },
-    
-    
+
+
     getResizeChild : function(){
         return this.resizeChild;
     },
-    
-    
+
+
     destroy : function(removeEl){
         if(this.dd){
             this.dd.destroy();
@@ -22388,7 +22388,7 @@
         }
         Ext.destroy(this.proxy);
         this.proxy = null;
-        
+
         var ps = Ext.Resizable.positions;
         for(var k in ps){
             if(typeof ps[k] != "function" && this[ps[k]]){
@@ -22447,7 +22447,7 @@
 Ext.Resizable.Handle.prototype = {
     // private
     afterResize : function(rz){
-        // do nothing    
+        // do nothing
     },
     // private
     onMouseDown : function(e){
@@ -22478,41 +22478,41 @@
 };
 
 Ext.extend(Ext.Editor, Ext.Component, {
-    
-    
-    
-    
-    
+
+
+
+
+
     value : "",
-    
+
     alignment: "c-c?",
-    
+
     shadow : "frame",
-    
+
     constrain : false,
-    
+
     swallowKeys : true,
-    
+
     completeOnEnter : false,
-    
+
     cancelOnEsc : false,
-    
+
     updateEl : false,
 
     initComponent : function(){
         Ext.Editor.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             "beforestartedit",
-            
+
             "startedit",
-            
+
             "beforecomplete",
-            
+
             "complete",
-            
+
             "canceledit",
-            
+
             "specialkey"
         );
     },
@@ -22564,7 +22564,7 @@
         }
     },
 
-    
+
     startEdit : function(el, value){
         if(this.editing){
             this.completeEdit();
@@ -22602,25 +22602,25 @@
         }
     },
 
-    
+
     setSize : function(w, h){
         delete this.field.lastSize;
         this.field.setSize(w, h);
         if(this.el){
-	        if(Ext.isGecko2 || Ext.isOpera){
-	            // prevent layer scrollbars
-	            this.el.setSize(w, h);
-	        }
+          if(Ext.isGecko2 || Ext.isOpera){
+              // prevent layer scrollbars
+              this.el.setSize(w, h);
+          }
             this.el.sync();
         }
     },
 
-    
+
     realign : function(){
         this.el.alignTo(this.boundEl, this.alignment);
     },
 
-    
+
     completeEdit : function(remainVisible){
         if(!this.editing){
             return;
@@ -22669,7 +22669,7 @@
         }
     },
 
-    
+
     cancelEdit : function(remainVisible){
         if(this.editing){
             var v = this.getValue();
@@ -22704,12 +22704,12 @@
         }
     },
 
-    
+
     setValue : function(v){
         this.field.setValue(v);
     },
 
-    
+
     getValue : function(){
         return this.field.getValue();
     },
@@ -22778,7 +22778,7 @@
     };
 
     return {
-        
+
         getDialog : function(titleText){
            if(!dlg){
                 dlg = new Ext.Window({
@@ -22845,7 +22845,7 @@
             return dlg;
         },
 
-        
+
         updateText : function(text){
             if(!dlg.isVisible() && !opt.width){
                 dlg.setSize(this.maxWidth, 100); // resize first so content is never clipped from previous shows
@@ -22871,13 +22871,13 @@
                 progressBar.setSize(w-iw-fw-bw);
             }
             if(Ext.isIE && w == bwidth){
-                w += 4; //Add offset when the content width is smaller than the buttons.    
+                w += 4; //Add offset when the content width is smaller than the buttons.
             }
             dlg.setSize(w, 'auto').center();
             return this;
         },
 
-        
+
         updateProgress : function(value, progressText, msg){
             progressBar.updateProgress(value, progressText);
             if(msg){
@@ -22886,12 +22886,12 @@
             return this;
         },
 
-        
+
         isVisible : function(){
             return dlg && dlg.isVisible();
         },
 
-        
+
         hide : function(){
             var proxy = dlg.activeGhost;
             if(this.isVisible() || proxy) {
@@ -22899,12 +22899,12 @@
                 handleHide();
                 if (proxy) {
                     proxy.hide();
-                } 
+                }
             }
             return this;
         },
 
-        
+
         show : function(options){
             if(this.isVisible()){
                 this.hide();
@@ -22983,7 +22983,7 @@
             return this;
         },
 
-        
+
         setIcon : function(icon){
             if(icon && icon != ''){
                 iconEl.removeClass('x-hidden');
@@ -22996,7 +22996,7 @@
             return this;
         },
 
-        
+
         progress : function(title, msg, progressText){
             this.show({
                 title : title,
@@ -23010,7 +23010,7 @@
             return this;
         },
 
-        
+
         wait : function(msg, title, config){
             this.show({
                 title : title,
@@ -23025,7 +23025,7 @@
             return this;
         },
 
-        
+
         alert : function(title, msg, fn, scope){
             this.show({
                 title : title,
@@ -23037,7 +23037,7 @@
             return this;
         },
 
-        
+
         confirm : function(title, msg, fn, scope){
             this.show({
                 title : title,
@@ -23050,7 +23050,7 @@
             return this;
         },
 
-        
+
         prompt : function(title, msg, fn, scope, multiline, value){
             this.show({
                 title : title,
@@ -23066,34 +23066,34 @@
             return this;
         },
 
-        
+
         OK : {ok:true},
-        
+
         CANCEL : {cancel:true},
-        
+
         OKCANCEL : {ok:true, cancel:true},
-        
+
         YESNO : {yes:true, no:true},
-        
+
         YESNOCANCEL : {yes:true, no:true, cancel:true},
-        
+
         INFO : 'ext-mb-info',
-        
+
         WARNING : 'ext-mb-warning',
-        
+
         QUESTION : 'ext-mb-question',
-        
+
         ERROR : 'ext-mb-error',
 
-        
+
         defaultTextHeight : 75,
-        
+
         maxWidth : 600,
-        
+
         minWidth : 100,
-        
+
         minProgressWidth : 250,
-        
+
         buttonText : {
             ok : "OK",
             cancel : "Cancel",
@@ -23107,15 +23107,15 @@
 Ext.Msg = Ext.MessageBox;
 
 Ext.Tip = Ext.extend(Ext.Panel, {
-    
-    
-    
+
+
+
     minWidth : 40,
-    
+
     maxWidth : 300,
-    
+
     shadow : "sides",
-    
+
     defaultAlign : "tl-bl?",
     autoRender: true,
     quickShowInterval : 250,
@@ -23147,7 +23147,7 @@
         }
     },
 
-    
+
     showAt : function(xy){
         Ext.Tip.superclass.show.call(this);
         if(this.measureWidth !== false && (!this.initialConfig || typeof this.initialConfig.width != 'number')){
@@ -23167,7 +23167,7 @@
         }
         bw += this.getFrameWidth() + (this.closable ? 20 : 0) + this.body.getPadding("lr");
         this.setWidth(bw.constrain(this.minWidth, this.maxWidth));
-        
+
         // IE7 repaint bug on initial show
         if(Ext.isIE7 && !this.repainted){
             this.el.repaint();
@@ -23175,7 +23175,7 @@
         }
     },
 
-    
+
     showBy : function(el, pos){
         if(!this.rendered){
             this.render(Ext.getBody());
@@ -23211,17 +23211,17 @@
 });
 
 Ext.ToolTip = Ext.extend(Ext.Tip, {
-    
-    
-    
+
+
+
     showDelay: 500,
-    
+
     hideDelay: 200,
-    
+
     dismissDelay: 5000,
-    
+
     mouseOffset: [15,18],
-    
+
     trackMouse : false,
     constrainPosition: true,
 
@@ -23296,14 +23296,14 @@
         }
     },
 
-    
+
     hide: function(){
         this.clearTimer('dismiss');
         this.lastActive = new Date();
         Ext.ToolTip.superclass.hide.call(this);
     },
 
-    
+
     show : function(){
         this.showAt(this.getTargetXY());
     },
@@ -23380,8 +23380,8 @@
 });
 
 Ext.QuickTip = Ext.extend(Ext.ToolTip, {
-    
-    
+
+
     interceptTitles : false,
 
     // private
@@ -23403,7 +23403,7 @@
         Ext.QuickTip.superclass.initComponent.call(this);
     },
 
-    
+
     register : function(config){
         var cs = Ext.isArray(config) ? config : arguments;
         for(var i = 0, len = cs.length; i < len; i++){
@@ -23421,7 +23421,7 @@
         }
     },
 
-    
+
     unregister : function(el){
         delete this.targets[Ext.id(el)];
     },
@@ -23527,23 +23527,23 @@
 Ext.QuickTips = function(){
     var tip, locks = [];
     return {
-        
+
         init : function(autoRender){
-		    if(!tip){
-		        if(!Ext.isReady){
-		            Ext.onReady(function(){
-		                Ext.QuickTips.init(autoRender);
-		            });
-		            return;
-		        }
-		        tip = new Ext.QuickTip({elements:'header,body'});
-		        if(autoRender !== false){
-		            tip.render(Ext.getBody());
-		        }
-		    }
+        if(!tip){
+            if(!Ext.isReady){
+                Ext.onReady(function(){
+                    Ext.QuickTips.init(autoRender);
+                });
+                return;
+            }
+            tip = new Ext.QuickTip({elements:'header,body'});
+            if(autoRender !== false){
+                tip.render(Ext.getBody());
+            }
+        }
         },
 
-        
+
         enable : function(){
             if(tip){
                 locks.pop();
@@ -23553,7 +23553,7 @@
             }
         },
 
-        
+
         disable : function(){
             if(tip){
                 tip.disable();
@@ -23561,27 +23561,27 @@
             locks.push(1);
         },
 
-        
+
         isEnabled : function(){
             return tip !== undefined && !tip.disabled;
         },
 
-        
+
         getQuickTip : function(){
             return tip;
         },
 
-        
+
         register : function(){
             tip.register.apply(tip, arguments);
         },
 
-        
+
         unregister : function(){
             tip.unregister.apply(tip, arguments);
         },
 
-        
+
         tips :function(){
             tip.register.apply(tip, arguments);
         }
@@ -23602,7 +23602,7 @@
         if(!this.eventModel){
             this.eventModel = new Ext.tree.TreeEventModel(this);
         }
-        
+
         // initialize the loader
         var l = this.loader;
         if(!l){
@@ -23613,72 +23613,72 @@
             l = new Ext.tree.TreeLoader(l);
         }
         this.loader = l;
-        
+
         this.nodeHash = {};
 
-        
+
         if(this.root){
            this.setRootNode(this.root);
         }
 
         this.addEvents(
 
-            
+
            "append",
-           
+
            "remove",
-           
+
            "movenode",
-           
+
            "insert",
-           
+
            "beforeappend",
-           
+
            "beforeremove",
-           
+
            "beforemovenode",
-           
+
             "beforeinsert",
 
-            
+
             "beforeload",
-            
+
             "load",
-            
+
             "textchange",
-            
+
             "beforeexpandnode",
-            
+
             "beforecollapsenode",
-            
+
             "expandnode",
-            
+
             "disabledchange",
-            
+
             "collapsenode",
-            
+
             "beforeclick",
-            
+
             "click",
-            
+
             "checkchange",
-            
+
             "dblclick",
-            
+
             "contextmenu",
-            
+
             "beforechildrenrendered",
-           
+
             "startdrag",
-            
+
             "enddrag",
-            
+
             "dragdrop",
-            
+
             "beforenodedrop",
-            
+
             "nodedrop",
-             
+
             "nodedragover"
         );
         if(this.singleExpand){
@@ -23696,12 +23696,12 @@
     },
 
 
-    
+
     getRootNode : function(){
         return this.root;
     },
 
-    
+
     setRootNode : function(node){
         if(!node.render){ // attributes passed
             node = this.loader.createNode(node);
@@ -23711,13 +23711,13 @@
         node.isRoot = true;
         this.registerNode(node);
         if(!this.rootVisible){
-        	var uiP = node.attributes.uiProvider;
-        	node.ui = uiP ? new uiP(node) : new Ext.tree.RootTreeNodeUI(node); 
+          var uiP = node.attributes.uiProvider;
+          node.ui = uiP ? new uiP(node) : new Ext.tree.RootTreeNodeUI(node);
         }
         return node;
     },
 
-    
+
     getNodeById : function(id){
         return this.nodeHash[id];
     },
@@ -23748,7 +23748,7 @@
         }
     },
 
-    
+
     getChecked : function(a, startNode){
         startNode = startNode || this.root;
         var r = [];
@@ -23761,27 +23761,27 @@
         return r;
     },
 
-    
+
     getEl : function(){
         return this.el;
     },
 
-    
+
     getLoader : function(){
         return this.loader;
     },
 
-    
+
     expandAll : function(){
         this.root.expand(true);
     },
 
-    
+
     collapseAll : function(){
         this.root.collapse(true);
     },
 
-    
+
     getSelectionModel : function(){
         if(!this.selModel){
             this.selModel = new Ext.tree.DefaultSelectionModel();
@@ -23789,7 +23789,7 @@
         return this.selModel;
     },
 
-    
+
     expandPath : function(path, attr, callback){
         attr = attr || "id";
         var keys = path.split(this.pathSeparator);
@@ -23821,7 +23821,7 @@
         curNode.expand(false, false, f);
     },
 
-    
+
     selectPath : function(path, attr, callback){
         attr = attr || "id";
         var keys = path.split(this.pathSeparator);
@@ -23853,7 +23853,7 @@
         }
     },
 
-    
+
     getTreeEl : function(){
         return this.body;
     },
@@ -23875,13 +23875,13 @@
             Ext.dd.ScrollManager.register(this.body);
         }
         if((this.enableDD || this.enableDrop) && !this.dropZone){
-           
+
              this.dropZone = new Ext.tree.TreeDropZone(this, this.dropConfig || {
                ddGroup: this.ddGroup || "TreeDD", appendOnly: this.ddAppendOnly === true
            });
         }
         if((this.enableDD || this.enableDrag) && !this.dragZone){
-           
+
             this.dragZone = new Ext.tree.TreeDragZone(this, this.dragConfig || {
                ddGroup: this.ddGroup || "TreeDD",
                scroll: this.ddScroll
@@ -23914,53 +23914,53 @@
         this.nodeHash = null;
         Ext.tree.TreePanel.superclass.onDestroy.call(this);
     }
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
 
 
 
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 });
 
 Ext.tree.TreePanel.nodeTypes = {};
@@ -24118,12 +24118,12 @@
 
 Ext.tree.DefaultSelectionModel = function(config){
    this.selNode = null;
-   
+
    this.addEvents(
-       
+
        "selectionchange",
 
-       
+
        "beforeselect"
    );
 
@@ -24137,12 +24137,12 @@
         tree.getTreeEl().on("keydown", this.onKeyDown, this);
         tree.on("click", this.onNodeClick, this);
     },
-    
+
     onNodeClick : function(node, e){
         this.select(node);
     },
-    
-    
+
+
     select : function(node){
         var last = this.selNode;
         if(last != node && this.fireEvent('beforeselect', this, node, last) !== false){
@@ -24155,15 +24155,15 @@
         }
         return node;
     },
-    
-    
+
+
     unselect : function(node){
         if(this.selNode == node){
             this.clearSelections();
-        }    
+        }
     },
-    
-    
+
+
     clearSelections : function(){
         var n = this.selNode;
         if(n){
@@ -24173,18 +24173,18 @@
         }
         return n;
     },
-    
-    
+
+
     getSelectedNode : function(){
-        return this.selNode;    
+        return this.selNode;
     },
-    
-    
+
+
     isSelected : function(node){
-        return this.selNode == node;  
+        return this.selNode == node;
     },
 
-    
+
     selectPrevious : function(){
         var s = this.selNode || this.lastSelNode;
         if(!s){
@@ -24207,7 +24207,7 @@
         return null;
     },
 
-    
+
     selectNext : function(){
         var s = this.selNode || this.lastSelNode;
         if(!s){
@@ -24274,7 +24274,7 @@
    this.selNodes = [];
    this.selMap = {};
    this.addEvents(
-       
+
        "selectionchange"
    );
     Ext.apply(this, config);
@@ -24287,12 +24287,12 @@
         tree.getTreeEl().on("keydown", this.onKeyDown, this);
         tree.on("click", this.onNodeClick, this);
     },
-    
+
     onNodeClick : function(node, e){
         this.select(node, e, e.ctrlKey);
     },
-    
-    
+
+
     select : function(node, e, keepExisting){
         if(keepExisting !== true){
             this.clearSelections(true);
@@ -24308,8 +24308,8 @@
         this.fireEvent("selectionchange", this, this.selNodes);
         return node;
     },
-    
-    
+
+
     unselect : function(node){
         if(this.selMap[node.id]){
             node.ui.onSelectedChange(false);
@@ -24322,8 +24322,8 @@
             this.fireEvent("selectionchange", this, this.selNodes);
         }
     },
-    
-    
+
+
     clearSelections : function(suppressEvent){
         var sn = this.selNodes;
         if(sn.length > 0){
@@ -24337,15 +24337,15 @@
             }
         }
     },
-    
-    
+
+
     isSelected : function(node){
-        return this.selMap[node.id] ? true : false;  
+        return this.selMap[node.id] ? true : false;
     },
-    
-    
+
+
     getSelectedNodes : function(){
-        return this.selNodes;    
+        return this.selNodes;
     },
 
     onKeyDown : Ext.tree.DefaultSelectionModel.prototype.onKeyDown,
@@ -24368,46 +24368,46 @@
     this.draggable = attributes.draggable !== false && attributes.allowDrag !== false;
     this.allowChildren = attributes.allowChildren !== false && attributes.allowDrop !== false;
 
-    
+
     this.text = attributes.text;
-    
+
     this.disabled = attributes.disabled === true;
 
     this.addEvents(
-        
+
         "textchange",
-        
+
         "beforeexpand",
-        
+
         "beforecollapse",
-        
+
         "expand",
-        
+
         "disabledchange",
-        
+
         "collapse",
-        
+
         "beforeclick",
-        
+
         "click",
-        
+
         "checkchange",
-        
+
         "dblclick",
-        
+
         "contextmenu",
-        
+
         "beforechildrenrendered"
     );
 
     var uiClass = this.attributes.uiProvider || this.defaultUI || Ext.tree.TreeNodeUI;
 
-    
+
     this.ui = new uiClass(this);
 };
 Ext.extend(Ext.tree.TreeNode, Ext.data.Node, {
     preventHScroll: true,
-    
+
     isExpanded : function(){
         return this.expanded;
     },
@@ -24481,7 +24481,7 @@
 
     // private override
     insertBefore : function(node, refNode){
-        if(!node.render){ 
+        if(!node.render){
             node = this.getLoader().createNode(node);
         }
         var newNode = Ext.tree.TreeNode.superclass.insertBefore.apply(this, arguments);
@@ -24492,7 +24492,7 @@
         return newNode;
     },
 
-    
+
     setText : function(text){
         var oldText = this.text;
         this.text = text;
@@ -24503,22 +24503,22 @@
         this.fireEvent("textchange", this, text, oldText);
     },
 
-    
+
     select : function(){
         this.getOwnerTree().getSelectionModel().select(this);
     },
 
-    
+
     unselect : function(){
         this.getOwnerTree().getSelectionModel().unselect(this);
     },
 
-    
+
     isSelected : function(){
         return this.getOwnerTree().getSelectionModel().isSelected(this);
     },
 
-    
+
     expand : function(deep, anim, callback){
         if(!this.expanded){
             if(this.fireEvent("beforeexpand", this, deep, anim) === false){
@@ -24560,7 +24560,7 @@
         return this.isRoot && !this.getOwnerTree().rootVisible;
     },
 
-    
+
     collapse : function(deep, anim){
         if(this.expanded && !this.isHiddenRoot()){
             if(this.fireEvent("beforecollapse", this, deep, anim) === false){
@@ -24583,7 +24583,7 @@
         if(deep === true){
             var cs = this.childNodes;
             for(var i = 0, len = cs.length; i < len; i++) {
-            	cs[i].collapse(true, false);
+              cs[i].collapse(true, false);
             }
         }
     },
@@ -24603,7 +24603,7 @@
         this.expandProcId = false;
     },
 
-    
+
     toggle : function(){
         if(this.expanded){
             this.collapse();
@@ -24612,7 +24612,7 @@
         }
     },
 
-    
+
     ensureVisible : function(callback){
         var tree = this.getOwnerTree();
         tree.expandPath(this.parentNode ? this.parentNode.getPath() : this.getPath(), false, function(){
@@ -24622,23 +24622,23 @@
         }.createDelegate(this));
     },
 
-    
+
     expandChildNodes : function(deep){
         var cs = this.childNodes;
         for(var i = 0, len = cs.length; i < len; i++) {
-        	cs[i].expand(deep);
+          cs[i].expand(deep);
         }
     },
 
-    
+
     collapseChildNodes : function(deep){
         var cs = this.childNodes;
         for(var i = 0, len = cs.length; i < len; i++) {
-        	cs[i].collapse(deep);
+          cs[i].collapse(deep);
         }
     },
 
-    
+
     disable : function(){
         this.disabled = true;
         this.unselect();
@@ -24648,7 +24648,7 @@
         this.fireEvent("disabledchange", this, true);
     },
 
-    
+
     enable : function(){
         this.disabled = false;
         if(this.rendered && this.ui.onDisableChange){ // event without subscribing
@@ -24720,9 +24720,9 @@
 
     destroy : function(){
         if(this.childNodes){
-	        for(var i = 0,l = this.childNodes.length; i < l; i++){
-	            this.childNodes[i].destroy();
-	        }
+          for(var i = 0,l = this.childNodes.length; i < l; i++){
+              this.childNodes[i].destroy();
+          }
             this.childNodes = null;
         }
         if(this.ui.destroy){
@@ -24737,10 +24737,10 @@
     this.loaded = config && config.loaded === true;
     this.loading = false;
     Ext.tree.AsyncTreeNode.superclass.constructor.apply(this, arguments);
-    
+
     this.addEvents('beforeload', 'load');
-    
-    
+
+
 };
 Ext.extend(Ext.tree.AsyncTreeNode, Ext.tree.TreeNode, {
     expand : function(deep, anim, callback){
@@ -24769,12 +24769,12 @@
         }
         Ext.tree.AsyncTreeNode.superclass.expand.call(this, deep, anim, callback);
     },
-    
-    
+
+
     isLoading : function(){
-        return this.loading;  
+        return this.loading;
     },
-    
+
     loadComplete : function(deep, anim, callback){
         this.loading = false;
         this.loaded = true;
@@ -24782,12 +24782,12 @@
         this.fireEvent("load", this);
         this.expand(deep, anim, callback);
     },
-    
-    
+
+
     isLoaded : function(){
         return this.loaded;
     },
-    
+
     hasChildNodes : function(){
         if(!this.isLeaf() && !this.loaded){
             return true;
@@ -24796,7 +24796,7 @@
         }
     },
 
-    
+
     reload : function(callback){
         this.collapse(false, false);
         while(this.firstChild){
@@ -24827,7 +24827,7 @@
     removeChild : function(node){
         if(this.rendered){
             this.ctNode.removeChild(node.ui.getEl());
-        } 
+        }
     },
 
     // private
@@ -24850,14 +24850,14 @@
     // private
     onDisableChange : function(node, state){
         this.disabled = state;
-		if (this.checkbox) {
-			this.checkbox.disabled = state;
-		}        
+    if (this.checkbox) {
+      this.checkbox.disabled = state;
+    }
         if(state){
             this.addClass("x-tree-node-disabled");
         }else{
             this.removeClass("x-tree-node-disabled");
-        } 
+        }
     },
 
     // private
@@ -24901,7 +24901,7 @@
 
     removeClass : function(cls){
         if(this.elNode){
-            Ext.fly(this.elNode).removeClass(cls);  
+            Ext.fly(this.elNode).removeClass(cls);
         }
     },
 
@@ -24910,12 +24910,12 @@
         if(this.rendered){
             this.holder = document.createElement("div");
             this.holder.appendChild(this.wrap);
-        }  
+        }
     },
 
     // private
     fireEvent : function(){
-        return this.node.fireEvent.apply(this.node, arguments);  
+        return this.node.fireEvent.apply(this.node, arguments);
     },
 
     // private
@@ -24924,9 +24924,9 @@
 
         if(this.node.disabled){
             this.addClass("x-tree-node-disabled");
-			if (this.checkbox) {
-				this.checkbox.disabled = true;
-			}            
+      if (this.checkbox) {
+        this.checkbox.disabled = true;
+      }
         }
         if(this.node.hidden){
             this.hide();
@@ -24960,7 +24960,7 @@
         this.node.hidden = false;
         if(this.wrap){
             this.wrap.style.display = "";
-        } 
+        }
     },
 
     // private
@@ -25027,8 +25027,8 @@
     // private
     onCheckChange : function(){
         var checked = this.checkbox.checked;
-		// fix for IE6
-		this.checkbox.defaultChecked = checked;
+    // fix for IE6
+    this.checkbox.defaultChecked = checked;
         this.node.attributes.checked = checked;
         this.fireEvent('checkchange', this.node, checked);
     },
@@ -25044,12 +25044,12 @@
     startDrop : function(){
         this.dropping = true;
     },
-    
+
     // delayed drop so the click event doesn't get fired on a drop
-    endDrop : function(){ 
+    endDrop : function(){
        setTimeout(function(){
            this.dropping = false;
-       }.createDelegate(this), 50); 
+       }.createDelegate(this), 50);
     },
 
     // private
@@ -25086,7 +25086,7 @@
     blur : function(){
         try{
             this.anchor.blur();
-        }catch(e){} 
+        }catch(e){}
     },
 
     // private
@@ -25101,7 +25101,7 @@
         }
         this.animating = true;
         this.updateExpandIcon();
-        
+
         ct.slideIn('t', {
            callback : function(){
                this.animating = false;
@@ -25148,12 +25148,12 @@
 
     // private
     getContainer : function(){
-        return this.ctNode;  
+        return this.ctNode;
     },
 
     // private
     getEl : function(){
-        return this.wrap;  
+        return this.wrap;
     },
 
     // private
@@ -25168,15 +25168,15 @@
 
     // private
     onRender : function(){
-        this.render();    
+        this.render();
     },
 
     // private
     render : function(bulkRender){
         var n = this.node, a = n.attributes;
-        var targetNode = n.parentNode ? 
+        var targetNode = n.parentNode ?
               n.parentNode.ui.getContainer() : n.ownerTree.innerCt.dom;
-        
+
         if(!this.rendered){
             this.rendered = true;
 
@@ -25193,7 +25193,7 @@
                    if(a.qtipTitle){
                        this.textNode.setAttribute("ext:qtitle", a.qtipTitle);
                    }
-               } 
+               }
             }else if(a.qtipCfg){
                 a.qtipCfg.target = Ext.id(this.textNode);
                 Ext.QuickTips.register(a.qtipCfg);
@@ -25233,7 +25233,7 @@
         }else{
             this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
         }
-        
+
         this.elNode = this.wrap.childNodes[0];
         this.ctNode = this.wrap.childNodes[1];
         var cs = this.elNode.childNodes;
@@ -25243,8 +25243,8 @@
         var index = 3;
         if(cb){
             this.checkbox = cs[3];
-			// fix for IE6
-			this.checkbox.defaultChecked = this.checkbox.checked;			
+      // fix for IE6
+      this.checkbox.defaultChecked = this.checkbox.checked;
             index++;
         }
         this.anchor = cs[index];
@@ -25255,12 +25255,12 @@
     getAnchor : function(){
         return this.anchor;
     },
-    
+
 
     getTextEl : function(){
         return this.textNode;
     },
-    
+
 
     getIconEl : function(){
         return this.iconNode;
@@ -25268,7 +25268,7 @@
 
 
     isChecked : function(){
-        return this.checkbox ? this.checkbox.checked : false; 
+        return this.checkbox ? this.checkbox.checked : false;
     },
 
     // private
@@ -25358,7 +25358,7 @@
         delete this.checkbox;
         delete this.anchor;
         delete this.textNode;
-        
+
         if (this.holder){
              delete this.wrap;
              Ext.removeNode(this.holder);
@@ -25390,11 +25390,11 @@
     Ext.apply(this, config);
 
     this.addEvents(
-        
+
         "beforeload",
-        
+
         "load",
-        
+
         "loadexception"
     );
 
@@ -25402,19 +25402,19 @@
 };
 
 Ext.extend(Ext.tree.TreeLoader, Ext.util.Observable, {
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
     uiProviders : {},
 
-    
+
     clearOnLoad : true,
 
-    
+
     load : function(node, callback){
         if(this.clearOnLoad){
             while(node.firstChild){
@@ -25490,7 +25490,7 @@
         }
     },
 
-    
+
     createNode : function(attr){
         // apply baseAttrs, nice idea Corey!
         if(this.baseAttrs){
@@ -25560,7 +25560,7 @@
     autoClear:false,
     remove:false,
 
-     
+
     filter : function(value, attr, startNode){
         attr = attr || "text";
         var f;
@@ -25583,9 +25583,9 @@
             throw 'Illegal filter type, must be string or regex';
         }
         this.filterBy(f, null, startNode);
-	},
-    
-    
+  },
+
+
     filterBy : function(fn, scope, startNode){
         startNode = startNode || this.tree.root;
         if(this.autoClear){
@@ -25616,11 +25616,11 @@
                        n.parentNode.removeChild(n);
                    }
                }
-           } 
+           }
         }
     },
-    
-    
+
+
     clear : function(){
         var t = this.tree;
         var af = this.filtered;
@@ -25632,25 +25632,25 @@
                 }
             }
         }
-        this.filtered = {}; 
+        this.filtered = {};
     }
 };
 
 
-Ext.tree.TreeSorter = function(tree, config){
-    
-	
-    
-    
-    
-    
-    
+Ext.tree.TreeSorter = function(tree, config){
+
+
+
+
+
+
+
     Ext.apply(this, config);
     tree.on("beforechildrenrendered", this.doSort, this);
     tree.on("append", this.updateSort, this);
     tree.on("insert", this.updateSort, this);
     tree.on("textchange", this.updateSortParent, this);
-    
+
     var dsc = this.dir && this.dir.toLowerCase() == "desc";
     var p = this.property || "text";
     var sortType = this.sortType;
@@ -25667,14 +25667,14 @@
                 return -1;
             }
         }
-    	var v1 = sortType ? sortType(n1) : (cs ? n1.attributes[p] : n1.attributes[p].toUpperCase());
-    	var v2 = sortType ? sortType(n2) : (cs ? n2.attributes[p] : n2.attributes[p].toUpperCase());
-    	if(v1 < v2){
-			return dsc ? +1 : -1;
-		}else if(v1 > v2){
-			return dsc ? -1 : +1;
+      var v1 = sortType ? sortType(n1) : (cs ? n1.attributes[p] : n1.attributes[p].toUpperCase());
+      var v2 = sortType ? sortType(n2) : (cs ? n2.attributes[p] : n2.attributes[p].toUpperCase());
+      if(v1 < v2){
+      return dsc ? +1 : -1;
+    }else if(v1 > v2){
+      return dsc ? -1 : +1;
         }else{
-	    	return 0;
+        return 0;
         }
     };
 };
@@ -25683,48 +25683,48 @@
     doSort : function(node){
         node.sort(this.sortFn);
     },
-    
+
     compareNodes : function(n1, n2){
         return (n1.text.toUpperCase() > n2.text.toUpperCase() ? 1 : -1);
     },
-    
+
     updateSort : function(tree, node){
         if(node.childrenRendered){
             this.doSort.defer(1, this, [node]);
         }
     },
-    
+
     updateSortParent : function(node){
-		var p = node.parentNode;
-		if(p && p.childrenRendered){
+    var p = node.parentNode;
+    if(p && p.childrenRendered){
             this.doSort.defer(1, this, [p]);
         }
     }
 };
 
 if(Ext.dd.DropZone){
-    
+
 Ext.tree.TreeDropZone = function(tree, config){
-    
+
     this.allowParentInsert = false;
-    
+
     this.allowContainerDrop = false;
-    
+
     this.appendOnly = false;
     Ext.tree.TreeDropZone.superclass.constructor.call(this, tree.innerCt, config);
-    
+
     this.tree = tree;
-    
+
     this.dragOverData = {};
     // private
     this.lastInsertClass = "x-tree-no-status";
 };
 
 Ext.extend(Ext.tree.TreeDropZone, Ext.dd.DropZone, {
-    
+
     ddGroup : "TreeDD",
 
-    
+
     expandDelay : 1000,
 
     // private
@@ -25774,7 +25774,7 @@
         overEvent.source = dd;
         overEvent.rawEvent = e;
         overEvent.dropNode = dropNode;
-        overEvent.cancel = false;  
+        overEvent.cancel = false;
         var result = this.tree.fireEvent("nodedragover", overEvent);
         return overEvent.cancel === false && result !== false;
     },
@@ -25815,14 +25815,14 @@
     onNodeOver : function(n, dd, e, data){
         var pt = this.getDropPoint(e, n, dd);
         var node = n.node;
-        
+
         // auto node expand check
         if(!this.expandProcId && pt == "append" && node.hasChildNodes() && !n.node.isExpanded()){
             this.queueExpand(node);
         }else if(pt != "append"){
             this.cancelExpand();
         }
-        
+
         // set the insert point style on the target node
         var returnCls = this.dropNotAllowed;
         if(this.isValidDropPoint(n, pt, dd, e, data)){
@@ -25956,7 +25956,7 @@
             data.node.ui.highlight();
         }
         this.hideProxy();
-    }    
+    }
 });
 
 }
@@ -25964,12 +25964,12 @@
 if(Ext.dd.DragZone){
 Ext.tree.TreeDragZone = function(tree, config){
     Ext.tree.TreeDragZone.superclass.constructor.call(this, tree.getTreeEl(), config);
-    
+
     this.tree = tree;
 };
 
 Ext.extend(Ext.tree.TreeDragZone, Ext.dd.DragZone, {
-    
+
     ddGroup : "TreeDD",
 
     // private
@@ -26012,7 +26012,7 @@
         sm.clearSelections();
         sm.select(this.dragData.node);
     },
-    
+
     // private
     afterRepair : function(){
         if (Ext.enableFx && this.tree.hlDrop) {
@@ -26038,21 +26038,21 @@
 };
 
 Ext.extend(Ext.tree.TreeEditor, Ext.Editor, {
-    
+
     alignment: "l-l",
     // inherit
     autoSize: false,
-    
+
     hideEl : false,
-    
+
     cls: "x-small-editor x-tree-editor",
-    
+
     shim:false,
     // inherit
     shadow:"frame",
-    
+
     maxWidth: 250,
-    
+
     editDelay : 350,
 
     initEditor : function(tree){
@@ -26079,9 +26079,9 @@
     // private
     triggerEdit : function(node, defer){
         this.completeEdit();
-		if(node.attributes.editable !== false){
-	       
-			this.editNode = node;
+    if(node.attributes.editable !== false){
+
+      this.editNode = node;
             if(this.tree.autoScroll){
                 node.ui.getEl().scrollIntoView(this.tree.body);
             }
@@ -26142,27 +26142,27 @@
     Ext.apply(this, config);
     this.id = this.id || Ext.id();
     this.addEvents(
-        
+
         'beforeshow',
-        
+
         'beforehide',
-        
+
         'show',
-        
+
         'hide',
-        
+
         'click',
-        
+
         'mouseover',
-        
+
         'mouseout',
-        
+
         'itemclick'
     );
     Ext.menu.MenuMgr.register(this);
     Ext.menu.Menu.superclass.constructor.call(this);
     var mis = this.items;
-    
+
 
     this.items = new Ext.util.MixedCollection();
     if(mis){
@@ -26171,19 +26171,19 @@
 };
 
 Ext.extend(Ext.menu.Menu, Ext.util.Observable, {
-    
-    
-    
+
+
+
     minWidth : 120,
-    
+
     shadow : "sides",
-    
+
     subMenuAlign : "tl-tr?",
-    
+
     defaultAlign : "tl-bl?",
-    
+
     allowOtherMenus : false,
-    
+
     ignoreParentClicks : false,
 
     // private
@@ -26332,12 +26332,12 @@
         this.fireEvent("mouseout", this, e, t);
     },
 
-    
+
     isVisible : function(){
         return this.el && !this.hidden;
     },
 
-    
+
     show : function(el, pos, parentMenu){
         this.parentMenu = parentMenu;
         if(!this.el){
@@ -26347,7 +26347,7 @@
         this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign), parentMenu, false);
     },
 
-    
+
     showAt : function(xy, parentMenu, _e){
         this.parentMenu = parentMenu;
         if(!this.el){
@@ -26378,7 +26378,7 @@
         }
     },
 
-    
+
     hide : function(deep){
         if(this.el && this.isVisible()){
             this.fireEvent("beforehide", this);
@@ -26395,7 +26395,7 @@
         }
     },
 
-    
+
     add : function(){
         var a = arguments, l = a.length, item;
         for(var i = 0; i < l; i++){
@@ -26418,7 +26418,7 @@
         return item;
     },
 
-    
+
     getEl : function(){
         if(!this.el){
             this.render();
@@ -26426,17 +26426,17 @@
         return this.el;
     },
 
-    
+
     addSeparator : function(){
         return this.addItem(new Ext.menu.Separator());
     },
 
-    
+
     addElement : function(el){
         return this.addItem(new Ext.menu.BaseItem(el));
     },
 
-    
+
     addItem : function(item){
         this.items.add(item);
         if(this.ul){
@@ -26449,7 +26449,7 @@
         return item;
     },
 
-    
+
     addMenuItem : function(config){
         if(!(config instanceof Ext.menu.Item)){
             if(typeof config.checked == "boolean"){ // must be check menu item config?
@@ -26461,12 +26461,12 @@
         return this.addItem(config);
     },
 
-    
+
     addText : function(text){
         return this.addItem(new Ext.menu.TextItem(text));
     },
 
-    
+
     insert : function(index, item){
         this.items.insert(index, item);
         if(this.ul){
@@ -26479,39 +26479,39 @@
         return item;
     },
 
-    
+
     remove : function(item){
         this.items.removeKey(item.id);
         item.destroy();
     },
 
-    
+
     removeAll : function(){
-    	if(this.items){
-	        var f;
-	        while(f = this.items.first()){
-	            this.remove(f);
-	        }
-    	}
+      if(this.items){
+          var f;
+          while(f = this.items.first()){
+              this.remove(f);
+          }
+      }
     },
 
-    
+
     destroy : function(){
         this.beforeDestroy();
         Ext.menu.MenuMgr.unregister(this);
         if (this.keyNav) {
-        	this.keyNav.disable();
+          this.keyNav.disable();
         }
         this.removeAll();
         if (this.ul) {
-        	this.ul.removeAllListeners();
+          this.ul.removeAllListeners();
         }
         if (this.el) {
-        	this.el.destroy();
+          this.el.destroy();
         }
     },
 
-	// private
+  // private
     beforeDestroy : Ext.emptyFn
 
 });
@@ -26659,9 +26659,9 @@
 
    return {
 
-       
+
        hideAll : function(){
-            hideAll();  
+            hideAll();
        },
 
        // private
@@ -26684,7 +26684,7 @@
            }
        },
 
-        
+
        get : function(menu){
            if(typeof menu == "string"){ // menu id
                if(!menus){  // not initialized, no menus to return
@@ -26766,11 +26766,11 @@
     Ext.menu.BaseItem.superclass.constructor.call(this, config);
 
     this.addEvents(
-        
+
         'click',
-        
+
         'activate',
-        
+
         'deactivate'
     );
 
@@ -26780,15 +26780,15 @@
 };
 
 Ext.extend(Ext.menu.BaseItem, Ext.Component, {
-    
-    
-    
+
+
+
     canActivate : false,
-    
+
     activeClass : "x-menu-item-active",
-    
+
     hideOnClick : true,
-    
+
     hideDelay : 100,
 
     // private
@@ -26799,7 +26799,7 @@
 
     // private
     render : function(container, parentMenu){
-        
+
         this.parentMenu = parentMenu;
         Ext.menu.BaseItem.superclass.render.call(this, container);
         this.container.menuItemId = this.id;
@@ -26814,7 +26814,7 @@
         container.dom.appendChild(this.el.dom);
     },
 
-    
+
     setHandler : function(handler, scope){
         if(this.handler){
             this.un("click", this.handler, this.scope);
@@ -26881,10 +26881,10 @@
 };
 
 Ext.extend(Ext.menu.TextItem, Ext.menu.BaseItem, {
-    
-    
+
+
     hideOnClick : false,
-    
+
     itemCls : "x-menu-text",
 
     // private
@@ -26902,9 +26902,9 @@
 };
 
 Ext.extend(Ext.menu.Separator, Ext.menu.BaseItem, {
-    
+
     itemCls : "x-menu-sep",
-    
+
     hideOnClick : false,
 
     // private
@@ -26925,17 +26925,17 @@
     }
 };
 Ext.extend(Ext.menu.Item, Ext.menu.BaseItem, {
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
     itemCls : "x-menu-item",
-    
+
     canActivate : true,
-    
+
     showDelay: 200,
     // doc'd in BaseItem
     hideDelay: 200,
@@ -26960,7 +26960,7 @@
         Ext.menu.Item.superclass.onRender.call(this, container, position);
     },
 
-    
+
     setText : function(text){
         this.text = text;
         if(this.rendered){
@@ -26971,7 +26971,7 @@
         }
     },
 
-    
+
     setIconClass : function(cls){
         var oldCls = this.iconCls;
         this.iconCls = cls;
@@ -26979,7 +26979,7 @@
             this.el.child('img.x-menu-item-icon').replaceClass(oldCls, this.iconCls);
         }
     },
-    
+
     //private
     beforeDestroy: function(){
         if (this.menu){
@@ -27069,25 +27069,25 @@
 Ext.menu.CheckItem = function(config){
     Ext.menu.CheckItem.superclass.constructor.call(this, config);
     this.addEvents(
-        
+
         "beforecheckchange" ,
-        
+
         "checkchange"
     );
-    
+
     if(this.checkHandler){
         this.on('checkchange', this.checkHandler, this.scope);
     }
     Ext.menu.MenuMgr.registerCheckable(this);
 };
 Ext.extend(Ext.menu.CheckItem, Ext.menu.Item, {
-    
-    
+
+
     itemCls : "x-menu-item x-menu-check-item",
-    
+
     groupClass : "x-menu-group-item",
 
-    
+
     checked: false,
 
     // private
@@ -27111,7 +27111,7 @@
         Ext.menu.CheckItem.superclass.destroy.apply(this, arguments);
     },
 
-    
+
     setChecked : function(state, suppressEvent){
         if(this.checked != state && this.fireEvent("beforecheckchange", this, state) !== false){
             if(this.container){
@@ -27177,10 +27177,10 @@
 
 Ext.menu.DateItem = function(config){
     Ext.menu.DateItem.superclass.constructor.call(this, new Ext.DatePicker(config), config);
-    
+
     this.picker = this.component;
     this.addEvents('select');
-    
+
     this.picker.on("render", function(picker){
         picker.getEl().swallowEvent("click");
         picker.container.addClass("x-menu-date-item");
@@ -27199,7 +27199,7 @@
 
 Ext.menu.ColorItem = function(config){
     Ext.menu.ColorItem.superclass.constructor.call(this, new Ext.ColorPalette(config), config);
-    
+
     this.palette = this.component;
     this.relayEvents(this.palette, ["select"]);
     if(this.selectHandler){
@@ -27213,9 +27213,9 @@
     this.plain = true;
     var di = new Ext.menu.DateItem(config);
     this.add(di);
-    
+
     this.picker = di.picker;
-    
+
     this.relayEvents(di, ["select"]);
 
     this.on('beforeshow', function(){
@@ -27238,9 +27238,9 @@
     this.plain = true;
     var ci = new Ext.menu.ColorItem(config);
     this.add(ci);
-    
+
     this.palette = ci.palette;
-    
+
     this.relayEvents(ci, ["select"]);
 };
 Ext.extend(Ext.menu.ColorMenu, Ext.menu.Menu, {
@@ -27251,43 +27251,43 @@
 });
 
 Ext.form.Field = Ext.extend(Ext.BoxComponent,  {
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
     invalidClass : "x-form-invalid",
-    
+
     invalidText : "The value in this field is invalid",
-    
+
     focusClass : "x-form-focus",
-    
+
     validationEvent : "keyup",
-    
+
     validateOnBlur : true,
-    
+
     validationDelay : 250,
-    
+
     defaultAutoCreate : {tag: "input", type: "text", size: "20", autocomplete: "off"},
-    
+
     fieldClass : "x-form-field",
-    
+
     msgTarget : 'qtip',
-    
+
     msgFx : 'normal',
-    
+
     readOnly : false,
-    
+
     disabled : false,
-    
+
     mandatory : false,
 
     // private
@@ -27296,26 +27296,26 @@
     // private
     hasFocus : false,
 
-	// private
-	initComponent : function(){
+  // private
+  initComponent : function(){
         Ext.form.Field.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'focus',
-            
+
             'blur',
-            
+
             'specialkey',
-            
+
             'change',
-            
+
             'invalid',
-            
+
             'valid'
         );
     },
 
-    
+
     getName: function(){
          return this.rendered && this.el.dom.name ? this.el.dom.name : (this.hiddenName || '');
     },
@@ -27361,7 +27361,7 @@
         this.originalValue = this.getValue();
     },
 
-    
+
     isDirty : function() {
         if(this.disabled) {
             return false;
@@ -27383,7 +27383,7 @@
         }
     },
 
-    
+
     reset : function(){
         this.setValue(this.originalValue);
         this.clearInvalid();
@@ -27431,7 +27431,7 @@
         this.fireEvent("blur", this);
     },
 
-    
+
     isValid : function(preventMark){
         if(this.disabled){
             return true;
@@ -27443,7 +27443,7 @@
         return v;
     },
 
-    
+
     validate : function(){
         if(this.disabled || this.validateValue(this.processValue(this.getRawValue()))){
             this.clearInvalid();
@@ -27463,7 +27463,7 @@
         return true;
     },
 
-    
+
     markInvalid : function(msg){
         if(!this.rendered || this.preventMark){ // not rendered
             return;
@@ -27530,7 +27530,7 @@
         this.errorIcon.alignTo(this.el, 'tl-tr', [2, 0]);
     },
 
-    
+
     clearInvalid : function(){
         if(!this.rendered || this.preventMark){ // not rendered
             return;
@@ -27564,7 +27564,7 @@
         this.fireEvent('valid', this);
     },
 
-    
+
     getRawValue : function(){
         var v = this.rendered ? this.el.getValue() : Ext.value(this.value, '');
         if(v === this.emptyText){
@@ -27573,7 +27573,7 @@
         return v;
     },
 
-    
+
     getValue : function(){
         if(!this.rendered) {
             return this.value;
@@ -27585,12 +27585,12 @@
         return v;
     },
 
-    
+
     setRawValue : function(v){
         return this.el.dom.value = (v === null || v === undefined ? '' : v);
     },
 
-    
+
     setValue : function(v){
         this.value = v;
         if(this.rendered){
@@ -27632,10 +27632,10 @@
         return w;
     }
 
-    
-    
 
-    
+
+
+
 });
 
 Ext.form.MessageTargets = {
@@ -27756,58 +27756,58 @@
 
 
 Ext.form.TextField = Ext.extend(Ext.form.Field,  {
-    
-    
-    
+
+
+
     grow : false,
-    
+
     growMin : 30,
-    
+
     growMax : 800,
-    
+
     vtype : null,
-    
+
     maskRe : null,
-    
+
     disableKeyFilter : false,
-    
+
     allowBlank : true,
-    
+
     minLength : 0,
-    
+
     maxLength : Number.MAX_VALUE,
-    
+
     minLengthText : "The minimum length for this field is {0}",
-    
+
     maxLengthText : "The maximum length for this field is {0}",
-    
+
     selectOnFocus : false,
-    
+
     blankText : "This field is required",
-    
+
     validator : null,
-    
+
     regex : null,
-    
+
     regexText : "",
-    
+
     emptyText : null,
-    
+
     emptyClass : 'x-form-empty-field',
 
-    
+
 
     initComponent : function(){
         Ext.form.TextField.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'autosize',
 
-            
+
             'keydown',
-            
+
             'keyup',
-            
+
             'keypress'
         );
     },
@@ -27867,7 +27867,7 @@
             this.validationTask.delay(this.validationDelay);
         }
     },
-    
+
     //private
     onDisable: function(){
         Ext.form.TextField.superclass.onDisable.call(this);
@@ -27875,7 +27875,7 @@
             this.el.dom.unselectable = 'on';
         }
     },
-    
+
     //private
     onEnable: function(){
         Ext.form.TextField.superclass.onEnable.call(this);
@@ -27906,7 +27906,7 @@
         this.fireEvent('keypress', this, e);
     },
 
-    
+
     reset : function(){
         Ext.form.TextField.superclass.reset.call(this);
         this.applyEmptyText();
@@ -27964,7 +27964,7 @@
         this.autoSize();
     },
 
-    
+
     validateValue : function(value){
         if(value.length < 1 || value === this.emptyText){ // if it's blank
              if(this.allowBlank){
@@ -28004,7 +28004,7 @@
         return true;
     },
 
-    
+
     selectText : function(start, end){
         var v = this.getRawValue();
         var doFocus = false;
@@ -28013,12 +28013,12 @@
             end = end === undefined ? v.length : end;
             var d = this.el.dom;
             if(d.setSelectionRange){
-            	var position = this.getPosition();
-            	var size = this.getSize();
-            	if (position[0] != 0 || position[1] != 0 
-            			|| size.width != 0 || size.height != 0) {
-            		d.setSelectionRange(start, end);
-            	}
+              var position = this.getPosition();
+              var size = this.getSize();
+              if (position[0] != 0 || position[1] != 0
+                  || size.width != 0 || size.height != 0) {
+                d.setSelectionRange(start, end);
+              }
             }else if(d.createTextRange){
                 var range = d.createTextRange();
                 range.moveStart("character", start);
@@ -28034,7 +28034,7 @@
         }
     },
 
-    
+
     autoSize : function(){
         if(!this.grow || !this.rendered){
             return;
@@ -28059,13 +28059,13 @@
 
 
 Ext.form.TriggerField = Ext.extend(Ext.form.TextField,  {
-    
-    
+
+
     defaultAutoCreate : {tag: "input", type: "text", size: "16", autocomplete: "off"},
-    
+
     hideTrigger:false,
 
-    
+
     autoSize: Ext.emptyFn,
     // private
     monitorTab : true,
@@ -28195,7 +28195,7 @@
         Ext.form.TriggerField.superclass.onBlur.call(this);
     },
 
-    beforeBlur : Ext.emptyFn, 
+    beforeBlur : Ext.emptyFn,
 
     // private
     // This should be overriden by any subclass that needs to check whether or not the field can be blurred.
@@ -28233,12 +28233,12 @@
         this.wrap.dom.style.display = 'none';
     },
 
-    
+
     onTriggerClick : Ext.emptyFn
 
-    
-    
-    
+
+
+
 });
 
 // TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class
@@ -28292,18 +28292,18 @@
 Ext.reg('trigger', Ext.form.TriggerField);
 
 Ext.form.TextArea = Ext.extend(Ext.form.TextField,  {
-    
+
     growMin : 60,
-    
+
     growMax: 1000,
     growAppend : '&#160;\n&#160;',
     growPad : 0,
 
     enterIsSpecial : false,
 
-    
+
     preventScrollbars: false,
-    
+
 
     // private
     onRender : function(ct, position){
@@ -28347,7 +28347,7 @@
         Ext.form.TextArea.superclass.onKeyUp.call(this, e);
     },
 
-    
+
     autoSize : function(){
         if(!this.grow || !this.textSizeEl){
             return;
@@ -28380,28 +28380,28 @@
 Ext.reg('textarea', Ext.form.TextArea);
 
 Ext.form.NumberField = Ext.extend(Ext.form.TextField,  {
-    
-    
+
+
     fieldClass: "x-form-field x-form-num-field",
-    
+
     allowDecimals : true,
-    
+
     decimalSeparator : ".",
-    
+
     decimalPrecision : 2,
-    
+
     allowNegative : true,
-    
+
     minValue : Number.NEGATIVE_INFINITY,
-    
+
     maxValue : Number.MAX_VALUE,
-    
+
     minText : "The minimum value for this field is {0}",
-    
+
     maxText : "The maximum value for this field is {0}",
-    
+
     nanText : "{0} is not a valid number",
-    
+
     baseChars : "0123456789",
 
     // private
@@ -28458,7 +28458,7 @@
     },
 
     setValue : function(v){
-    	v = typeof v == 'number' ? v : parseFloat(String(v).replace(this.decimalSeparator, "."));
+      v = typeof v == 'number' ? v : parseFloat(String(v).replace(this.decimalSeparator, "."));
         v = isNaN(v) ? '' : String(v).replace(".", this.decimalSeparator);
         Ext.form.NumberField.superclass.setValue.call(this, v);
     },
@@ -28488,29 +28488,29 @@
 Ext.reg('numberfield', Ext.form.NumberField);
 
 Ext.form.DateField = Ext.extend(Ext.form.TriggerField,  {
-    
+
     format : "m/d/Y",
-    
+
     altFormats : "m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d",
-    
+
     disabledDaysText : "Disabled",
-    
+
     disabledDatesText : "Disabled",
-    
+
     minText : "The date in this field must be equal to or after {0}",
-    
+
     maxText : "The date in this field must be equal to or before {0}",
-    
+
     invalidText : "{0} is not a valid date - it must be in the format {1}",
-    
+
     triggerClass : 'x-form-date-trigger',
-    
+
     showToday : true,
-    
-    
-    
-    
-    
+
+
+
+
+
 
     // private
     defaultAutoCreate : {tag: "input", type: "text", size: "10", autocomplete: "off"},
@@ -28529,19 +28529,19 @@
         } else {
             // set time to 12 noon, then clear the time
             var parsedDate = Date.parseDate(value + ' ' + this.initTime, format + ' ' + this.initTimeFormat);
-            
+
             if (parsedDate) return parsedDate.clearTime();
         }
     },
 
     initComponent : function(){
         Ext.form.DateField.superclass.initComponent.call(this);
-        
+
         this.addEvents(
-            
+
             'select'
         );
-        
+
         if(typeof this.minValue == "string"){
             this.minValue = this.parseDate(this.minValue);
         }
@@ -28576,7 +28576,7 @@
         }
     },
 
-    
+
     setDisabledDates : function(dd){
         this.disabledDates = dd;
         this.initDisabledDays();
@@ -28585,7 +28585,7 @@
         }
     },
 
-    
+
     setDisabledDays : function(dd){
         this.disabledDays = dd;
         if(this.menu){
@@ -28593,7 +28593,7 @@
         }
     },
 
-    
+
     setMinValue : function(dt){
         this.minValue = (typeof dt == "string" ? this.parseDate(dt) : dt);
         if(this.menu){
@@ -28601,7 +28601,7 @@
         }
     },
 
-    
+
     setMaxValue : function(dt){
         this.maxValue = (typeof dt == "string" ? this.parseDate(dt) : dt);
         if(this.menu){
@@ -28636,10 +28636,10 @@
         if(this.disabledDays){
             var day = value.getDay();
             for(var i = 0; i < this.disabledDays.length; i++) {
-            	if(day === this.disabledDays[i]){
-            	    this.markInvalid(this.disabledDaysText);
+              if(day === this.disabledDays[i]){
+                  this.markInvalid(this.disabledDaysText);
                     return false;
-            	}
+              }
             }
         }
         var fvalue = this.formatDate(value);
@@ -28656,12 +28656,12 @@
         return !this.menu || !this.menu.isVisible();
     },
 
-    
+
     getValue : function(){
         return this.parseDate(Ext.form.DateField.superclass.getValue.call(this)) || "";
     },
 
-    
+
     setValue : function(date){
         Ext.form.DateField.superclass.setValue.call(this, this.formatDate(this.parseDate(date)));
     },
@@ -28675,13 +28675,13 @@
         af = this.altFormats,
         afa = this.altFormatsArray;
 
-	    if (!v && af) {
-	        afa = afa || af.split("|");
-	
-	        for (var i = 0, len = afa.length; i < len && !v; i++) {
-	            v = this.safeParse(value, afa[i]);
-	        }
-	    }
+      if (!v && af) {
+          afa = afa || af.split("|");
+
+          for (var i = 0, len = afa.length; i < len && !v; i++) {
+              v = this.safeParse(value, afa[i]);
+          }
+      }
         return v;
     },
 
@@ -28719,7 +28719,7 @@
         }
     },
 
-    
+
     // private
     // Implements the default empty TriggerField.onTriggerClick function to display the DatePicker
     onTriggerClick : function(){
@@ -28756,93 +28756,93 @@
         }
     }
 
-    
-    
-    
-    
+
+
+
+
 });
 Ext.reg('datefield', Ext.form.DateField);
 
 Ext.form.ComboBox = Ext.extend(Ext.form.TriggerField, {
-    
-    
-    
-    
-    
+
+
+
+
+
 
     // private
     defaultAutoCreate : {tag: "input", type: "text", size: "24", autocomplete: "off"},
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
     listClass: '',
-    
+
     selectedClass: 'x-combo-selected',
-    
+
     triggerClass : 'x-form-arrow-trigger',
-    
+
     shadow:'sides',
-    
+
     listAlign: 'tl-bl?',
-    
+
     maxHeight: 300,
-    
+
     minHeight: 90,
-    
+
     triggerAction: 'query',
-    
+
     minChars : 4,
-    
+
     typeAhead: false,
-    
+
     queryDelay: 500,
-    
+
     pageSize: 0,
-    
+
     selectOnFocus:false,
-    
+
     queryParam: 'query',
-    
+
     loadingText: 'Loading...',
-    
+
     resizable: false,
-    
+
     handleHeight : 8,
-    
+
     editable: true,
-    
+
     allQuery: '',
-    
+
     mode: 'remote',
-    
+
     minListWidth : 70,
-    
+
     forceSelection:false,
-    
+
     typeAheadDelay : 250,
-    
 
-    
+
+
     lazyInit : true,
 
-    
+
 
     // private
     initComponent : function(){
         Ext.form.ComboBox.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'expand',
-            
+
             'collapse',
-            
+
             'beforeselect',
-            
+
             'select',
-            
+
             'beforequery'
         );
         if(this.transform){
@@ -28982,12 +28982,12 @@
             }
 
             if(!this.tpl){
-                
+
                 this.tpl = '<tpl for="."><div class="'+cls+'-item">{' + this.displayField + '}</div></tpl>';
-                
+
             }
 
-            
+
             this.view = new Ext.DataView({
                 applyTo: this.innerList,
                 tpl: this.tpl,
@@ -29014,8 +29014,8 @@
             }
         }
     },
-    
-    
+
+
     getStore : function(){
         return this.store;
     },
@@ -29163,7 +29163,7 @@
         }
     },
 
-    
+
     setEditable : function(value){
         if(value == this.editable){
             return;
@@ -29241,7 +29241,7 @@
         }
     },
 
-    
+
     getValue : function(){
         if(this.valueField){
             return typeof this.value != 'undefined' ? this.value : '';
@@ -29250,7 +29250,7 @@
         }
     },
 
-    
+
     clearValue : function(){
         if(this.hiddenField){
             this.hiddenField.value = '';
@@ -29261,7 +29261,7 @@
         this.value = '';
     },
 
-    
+
     setValue : function(v){
         var text = v;
         if(this.valueField){
@@ -29346,12 +29346,12 @@
         this.collapse();
     },
 
-    
+
     isExpanded : function(){
         return this.list && this.list.isVisible();
     },
 
-    
+
     selectByValue : function(v, scrollIntoView){
         if(v !== undefined && v !== null){
             var r = this.findRecord(this.valueField || this.displayField, v);
@@ -29363,7 +29363,7 @@
         return false;
     },
 
-    
+
     select : function(index, scrollIntoView){
         this.selectedIndex = index;
         this.view.select(index);
@@ -29426,7 +29426,7 @@
         }
     },
 
-    
+
     doQuery : function(q, forceAll){
         if(q === undefined || q === null){
             q = '';
@@ -29478,7 +29478,7 @@
         return p;
     },
 
-    
+
     collapse : function(){
         if(!this.isExpanded()){
             return;
@@ -29496,7 +29496,7 @@
         }
     },
 
-    
+
     expand : function(){
         if(this.isExpanded() || !this.hasFocus){
             return;
@@ -29509,7 +29509,7 @@
         this.fireEvent('expand', this);
     },
 
-    
+
     // private
     // Implements the default empty TriggerField.onTriggerClick function
     onTriggerClick : function(){
@@ -29530,33 +29530,33 @@
         }
     }
 
-    
-    
-    
-    
+
+
+
+
 
 });
 Ext.reg('combo', Ext.form.ComboBox);
 
 Ext.form.Checkbox = Ext.extend(Ext.form.Field,  {
-    
+
     checkedCls: 'x-form-check-checked',
-    
+
     focusCls: 'x-form-check-focus',
-    
+
     overCls: 'x-form-check-over',
-    
+
     mouseDownCls: 'x-form-check-down',
-    
+
     tabIndex: 0,
-    
+
     checked: false,
-    
+
     defaultAutoCreate: {tag: 'input', type: 'checkbox', autocomplete: 'off'},
-    
-    
-    
-    
+
+
+
+
 
 
     // private
@@ -29566,7 +29566,7 @@
     initComponent : function(){
         Ext.form.Checkbox.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             'check'
         );
     },
@@ -29600,10 +29600,10 @@
         });
         this.wrap = this.innerWrap.wrap({cls: this.baseCls+'-wrap'});
         this.imageEl = this.innerWrap.createChild({
-			tag: 'img',
-			src: Ext.BLANK_IMAGE_URL,
-			cls: this.baseCls
-		});
+      tag: 'img',
+      src: Ext.BLANK_IMAGE_URL,
+      cls: this.baseCls
+    });
 
 
         if(this.boxLabel){
@@ -29628,7 +29628,7 @@
         }
         this.originalValue = this.checked;
     },
-    
+
     // private
     afterRender : function(){
         Ext.form.Checkbox.superclass.afterRender.call(this);
@@ -29675,14 +29675,14 @@
 
     // private
     onClick : function(e){
-    	if (e.getTarget().htmlFor != this.el.dom.id) {
-			if (e.getTarget() !== this.el.dom) {
-				this.el.focus();
-			}
-			if (!this.disabled && !this.readOnly) {
-				this.toggleValue();
-			}
-    	}
+      if (e.getTarget().htmlFor != this.el.dom.id) {
+      if (e.getTarget() !== this.el.dom) {
+        this.el.focus();
+      }
+      if (!this.disabled && !this.readOnly) {
+        this.toggleValue();
+      }
+      }
         //e.stopEvent();
     },
 
@@ -29708,7 +29708,7 @@
 //            this.resizeEl = Ext.isSafari ? this.wrap : (this.wrap.up('.x-form-element', 5) || this.wrap);
 //        }
 //        return this.resizeEl;
-    	return this.wrap;
+      return this.wrap;
     },
 
     // private
@@ -29721,15 +29721,15 @@
         return this.wrap;
     },
 
-    
+
     markInvalid : Ext.emptyFn,
-    
+
     clearInvalid : Ext.emptyFn,
 
     // private
     initValue : Ext.emptyFn,
 
-    
+
     getValue : function(){
         if(this.rendered){
             return this.el.dom.checked;
@@ -29737,11 +29737,11 @@
         return this.checked;
     },
 
-    
+
     setValue : function(v) {
         var checked = this.checked;
         this.checked = (v === true || v === 'true' || v == '1' || String(v).toLowerCase() == 'on');
-        
+
         if(this.rendered){
             this.el.dom.checked = this.checked;
             this.el.dom.defaultChecked = this.checked;
@@ -29757,30 +29757,30 @@
         }
     }
 
-    
-    
-    
+
+
+
 });
 Ext.reg('checkbox', Ext.form.Checkbox);
 
 
 Ext.form.CheckboxGroup = Ext.extend(Ext.form.Field, {
-    
-    
+
+
     columns : 'auto',
-    
+
     vertical : false,
-    
+
     allowBlank : true,
-    
+
     blankText : "You must select at least one item in this group",
-    
+
     // private
     defaultType : 'checkbox',
-    
+
     // private
     groupCls: 'x-form-check-group',
-    
+
     // private
     onRender : function(ct, position){
         if(!this.el){
@@ -29799,11 +29799,11 @@
                     anchor: '100%'
                 }
             }
-            
+
             if(this.items[0].items){
-                
+
                 // The container has standard ColumnLayout configs, so pass them in directly
-                
+
                 Ext.apply(panelCfg, {
                     layoutConfig: {columns: this.items.length},
                     defaults: this.defaults,
@@ -29812,14 +29812,14 @@
                 for(var i=0, len=this.items.length; i<len; i++){
                     Ext.applyIf(this.items[i], colCfg);
                 };
-                
+
             }else{
-                
+
                 // The container has field item configs, so we have to generate the column
                 // panels first then move the items into the columns as needed.
-                
+
                 var numCols, cols = [];
-                
+
                 if(typeof this.columns == 'string'){ // 'auto' so create a col per item
                     this.columns = this.items.length;
                 }
@@ -29830,9 +29830,9 @@
                     }
                     this.columns = cs;
                 }
-                
+
                 numCols = this.columns.length;
-                
+
                 // Generate the column configs with the correct width setting
                 for(var i=0; i<numCols; i++){
                     var cc = Ext.apply({items:[]}, colCfg);
@@ -29842,7 +29842,7 @@
                     }
                     cols.push(cc);
                 };
-                
+
                 // Distribute the original items into the columns
                 if(this.vertical){
                     var rows = Math.ceil(this.items.length / numCols), ri = 0;
@@ -29864,33 +29864,33 @@
                         cols[ci].items.push(this.items[i]);
                     };
                 }
-                
+
                 Ext.apply(panelCfg, {
                     layoutConfig: {columns: numCols},
                     items: cols
                 });
             }
-            
+
             this.panel = new Ext.Panel(panelCfg);
             this.el = this.panel.getEl();
-            
+
             if(this.forId && this.itemCls){
                 var l = this.el.up(this.itemCls).child('label', true);
                 if(l){
                     l.setAttribute('htmlFor', this.forId);
                 }
             }
-            
+
             var fields = this.panel.findBy(function(c){
                 return c.isFormField;
             }, this);
-            
+
             this.items = new Ext.util.MixedCollection();
             this.items.addAll(fields);
         }
         Ext.form.CheckboxGroup.superclass.onRender.call(this, ct, position);
     },
-    
+
     // private
     validateValue : function(value){
         if(!this.allowBlank){
@@ -29907,7 +29907,7 @@
         }
         return true;
     },
-    
+
     // private
     onDisable : function(){
         this.items.each(function(item){
@@ -29921,13 +29921,13 @@
             item.enable();
         })
     },
-    
+
     // private
     onResize : function(w, h){
         this.panel.setSize(w, h);
         this.panel.doLayout();
     },
-    
+
     // inherit docs from Field
     reset : function(){
         Ext.form.CheckboxGroup.superclass.reset.call(this);
@@ -29937,19 +29937,19 @@
             }
         }, this);
     },
-    
-    
-    
+
+
+
     initValue : Ext.emptyFn,
-    
+
     getValue : Ext.emptyFn,
-    
+
     getRawValue : Ext.emptyFn,
-    
+
     setValue : Ext.emptyFn,
-    
+
     setRawValue : Ext.emptyFn
-    
+
 });
 
 Ext.reg('checkboxgroup', Ext.form.CheckboxGroup);
@@ -29961,13 +29961,13 @@
     // private
     baseCls: 'x-form-radio',
     checkedCls: 'x-form-radio-checked',
-    
-    
+
+
     getGroupValue : function(){
         var c = this.getParent().child('input[name='+this.el.dom.name+']:checked', true);
         return c ? c.value : null;
     },
-    
+
     // private
     getParent : function(){
         return this.el.up('form') || Ext.getBody();
@@ -29986,8 +29986,8 @@
             }, this);
         }
     },
-    
-    
+
+
     setValue : function(v){
         if(typeof v=='boolean') {
             Ext.form.Radio.superclass.setValue.call(this, v);
@@ -29998,25 +29998,25 @@
             };
         }
     },
-    
-    
+
+
     markInvalid : Ext.emptyFn,
-    
+
     clearInvalid : Ext.emptyFn
-    
+
 });
 Ext.reg('radio', Ext.form.Radio);
 
 
 Ext.form.RadioGroup = Ext.extend(Ext.form.CheckboxGroup, {
-    
+
     allowBlank : true,
-    
+
     blankText : "You must select one item in this group",
-    
+
     // private
     defaultType : 'radio',
-    
+
     // private
     groupCls: 'x-form-radio-group'
 });
@@ -30051,16 +30051,16 @@
 
 Ext.form.BasicForm = function(el, config){
     Ext.apply(this, config);
-    
+
     this.items = new Ext.util.MixedCollection(false, function(o){
         return o.id || (o.id = Ext.id());
     });
     this.addEvents(
-        
+
         'beforeaction',
-        
+
         'actionfailed',
-        
+
         'actioncomplete'
     );
 
@@ -30071,23 +30071,23 @@
 };
 
 Ext.extend(Ext.form.BasicForm, Ext.util.Observable, {
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
     timeout: 30,
 
     // private
     activeAction : null,
 
-    
+
     trackResetOnLoad : false,
 
-    
-    
+
+
 
     // private
     initEl : function(el){
@@ -30099,7 +30099,7 @@
         this.el.addClass('x-form');
     },
 
-    
+
     getEl: function(){
         return this.el;
     },
@@ -30121,7 +30121,7 @@
         this.purgeListeners();
     },
 
-    
+
     isValid : function(){
         var valid = true;
         this.items.each(function(f){
@@ -30132,7 +30132,7 @@
         return valid;
     },
 
-    
+
     isDirty : function(){
         var dirty = false;
         this.items.each(function(f){
@@ -30144,7 +30144,7 @@
         return dirty;
     },
 
-    
+
     doAction : function(action, options){
         if(typeof action == 'string'){
             action = new Ext.form.Action.ACTION_TYPES[action](this, options);
@@ -30156,7 +30156,7 @@
         return this;
     },
 
-    
+
     submit : function(options){
         if(this.standardSubmit){
             var v = this.isValid();
@@ -30169,13 +30169,13 @@
         return this;
     },
 
-    
+
     load : function(options){
         this.doAction('load', options);
         return this;
     },
 
-    
+
     updateRecord : function(record){
         record.beginEdit();
         var fs = record.fields;
@@ -30189,7 +30189,7 @@
         return this;
     },
 
-    
+
     loadRecord : function(record){
         this.setValues(record.data);
         return this;
@@ -30236,7 +30236,7 @@
         }
     },
 
-    
+
     findField : function(id){
         var field = this.items.get(id);
         if(!field){
@@ -30251,7 +30251,7 @@
     },
 
 
-    
+
     markInvalid : function(errors){
         if(Ext.isArray(errors)){
             for(var i = 0, len = errors.length; i < len; i++){
@@ -30272,7 +30272,7 @@
         return this;
     },
 
-    
+
     setValues : function(values){
         if(Ext.isArray(values)){ // array of objects
             for(var i = 0, len = values.length; i < len; i++){
@@ -30299,7 +30299,7 @@
         return this;
     },
 
-    
+
     getValues : function(asString){
         var fs = Ext.lib.Ajax.serializeForm(this.el.dom);
         if(asString === true){
@@ -30308,7 +30308,7 @@
         return Ext.urlDecode(fs);
     },
 
-    
+
     clearInvalid : function(){
         this.items.each(function(f){
            f.clearInvalid();
@@ -30316,7 +30316,7 @@
         return this;
     },
 
-    
+
     reset : function(){
         this.items.each(function(f){
             f.reset();
@@ -30324,20 +30324,20 @@
         return this;
     },
 
-    
+
     add : function(){
         this.items.addAll(Array.prototype.slice.call(arguments, 0));
         return this;
     },
 
 
-    
+
     remove : function(field){
         this.items.remove(field);
         return this;
     },
 
-    
+
     render : function(){
         this.items.each(function(f){
             if(f.isFormField && !f.rendered && document.getElementById(f.id)){ // if the element exists
@@ -30347,7 +30347,7 @@
         return this;
     },
 
-    
+
     applyToFields : function(o){
         this.items.each(function(f){
            Ext.apply(f, o);
@@ -30355,7 +30355,7 @@
         return this;
     },
 
-    
+
     applyIfToFields : function(o){
         this.items.each(function(f){
            Ext.applyIf(f, o);
@@ -30368,26 +30368,26 @@
 Ext.BasicForm = Ext.form.BasicForm;
 
 Ext.FormPanel = Ext.extend(Ext.Panel, {
-	
-    
-    
-    
-    
+
+
+
+
+
     buttonAlign:'center',
 
-    
+
     minButtonWidth:75,
 
-    
+
     labelAlign:'left',
 
-    
+
     monitorValid : false,
 
-    
+
     monitorPoll : 200,
 
-    
+
     layout: 'form',
 
     // private
@@ -30409,7 +30409,7 @@
         this.initItems();
 
         this.addEvents(
-            
+
             'clientvalidation'
         );
 
@@ -30448,7 +30448,7 @@
         return this.form.el;
     },
 
-    
+
     getForm : function(){
         return this.form;
     },
@@ -30460,7 +30460,7 @@
         Ext.FormPanel.superclass.onRender.call(this, ct, position);
         this.form.initEl(this.body);
     },
-    
+
     // private
     beforeDestroy: function(){
         Ext.FormPanel.superclass.beforeDestroy.call(this);
@@ -30472,28 +30472,28 @@
     initEvents : function(){
         Ext.FormPanel.superclass.initEvents.call(this);
         this.items.on('remove', this.onRemove, this);
-		this.items.on('add', this.onAdd, this);
+    this.items.on('add', this.onAdd, this);
         if(this.monitorValid){ // initialize after render
             this.startMonitoring();
         }
     },
-    
+
     // private
-	onAdd : function(ct, c) {
-		if (c.isFormField) {
-			this.form.add(c);
-		}
-	},
-	
-	// private
-	onRemove : function(c) {
-		if (c.isFormField) {
-			Ext.destroy(c.container.up('.x-form-item'));
-			this.form.remove(c);
-		}
-	},
+  onAdd : function(ct, c) {
+    if (c.isFormField) {
+      this.form.add(c);
+    }
+  },
+
+  // private
+  onRemove : function(c) {
+    if (c.isFormField) {
+      Ext.destroy(c.container.up('.x-form-item'));
+      this.form.remove(c);
+    }
+  },
+
 
-    
     startMonitoring : function(){
         if(!this.bound){
             this.bound = true;
@@ -30505,14 +30505,14 @@
         }
     },
 
-    
+
     stopMonitoring : function(){
         this.bound = false;
     },
 
-    
+
     load : function(){
-        this.form.load.apply(this.form, arguments);  
+        this.form.load.apply(this.form, arguments);
     },
 
     // private
@@ -30565,15 +30565,15 @@
 
 
 Ext.form.FieldSet = Ext.extend(Ext.Panel, {
-    
-    
-    
-    
-    
+
+
+
+
+
     baseCls:'x-fieldset',
-    
+
     layout: 'form',
-    
+
     animCollapse: false,
 
     // private
@@ -30615,11 +30615,11 @@
         Ext.form.FieldSet.superclass.onExpand.call(this, doAnim, animArg);
     },
 
-    
+
     onCheckClick : function(){
         this[this.checkbox.dom.checked ? 'expand' : 'collapse']();
     },
-    
+
     // private
     beforeDestroy : function(){
         if(this.checkbox){
@@ -30628,43 +30628,43 @@
         Ext.form.FieldSet.superclass.beforeDestroy.call(this);
     }
 
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 });
 Ext.reg('fieldset', Ext.form.FieldSet);
 
@@ -30672,27 +30672,27 @@
 
 
 Ext.form.HtmlEditor = Ext.extend(Ext.form.Field, {
-    
+
     enableFormat : true,
-    
+
     enableFontSize : true,
-    
+
     enableColors : true,
-    
+
     enableAlignments : true,
-    
+
     enableLists : true,
-    
+
     enableSourceEdit : true,
-    
+
     enableLinks : true,
-    
+
     enableFont : true,
-    
+
     createLinkText : 'Please enter the URL for the link:',
-    
+
     defaultLinkValue : 'http:/'+'/',
-    
+
     fontFamilies : [
         'Arial',
         'Courier New',
@@ -30720,19 +30720,19 @@
     // private
     initComponent : function(){
         this.addEvents(
-            
+
             'initialize',
-            
+
             'activate',
-             
+
             'beforesync',
-             
+
             'beforepush',
-             
+
             'sync',
-             
+
             'push',
-             
+
             'editmodechange'
         )
     },
@@ -30752,12 +30752,12 @@
         }
         return buf.join('');
     },
-    
-    
+
+
     createToolbar : function(editor){
-        
+
         var tipsEnabled = Ext.QuickTips && Ext.QuickTips.isEnabled();
-        
+
         function btn(id, toggle, handler){
             return {
                 itemId : id,
@@ -30900,7 +30900,7 @@
         this.tb = tb;
     },
 
-    
+
     getDocMarkup : function(){
         return '<html><head><style type="text/css">body{border:0;margin:0;padding:3px;height:98%;cursor:text;}</style></head><body></body></html>';
     },
@@ -31023,7 +31023,7 @@
         }
     },
 
-    
+
     toggleSourceEdit : function(sourceEditMode){
         if(sourceEditMode === undefined){
             sourceEditMode = !this.sourceEditMode;
@@ -31091,10 +31091,10 @@
         this.originalValue = this.getValue();
     },
 
-    
+
     markInvalid : Ext.emptyFn,
-    
-    
+
+
     clearInvalid : Ext.emptyFn,
 
     // docs inherit from Field
@@ -31103,7 +31103,7 @@
         this.pushValue();
     },
 
-    
+
     cleanHtml : function(html){
         html = String(html);
         if(html.length > 5){
@@ -31117,7 +31117,7 @@
         return html;
     },
 
-    
+
     syncValue : function(){
         if(this.initialized){
             var bd = this.getEditorBody();
@@ -31136,7 +31136,7 @@
             }
         }
     },
-    
+
     //docs inherit from Field
     getValue : function() {
         this.syncValue();
@@ -31144,7 +31144,7 @@
     },
 
 
-    
+
     pushValue : function(){
         if(this.initialized){
             var v = this.el.dom.value;
@@ -31293,7 +31293,7 @@
     },
 
 
-    
+
     updateToolbar: function(){
 
         if(!this.activated){
@@ -31323,7 +31323,7 @@
             btns.insertorderedlist.toggle(doc.queryCommandState('insertorderedlist'));
             btns.insertunorderedlist.toggle(doc.queryCommandState('insertunorderedlist'));
         }
-        
+
         Ext.menu.MenuMgr.hideAll();
 
         this.syncValue();
@@ -31334,7 +31334,7 @@
         this.relayCmd(btn.itemId);
     },
 
-    
+
     relayCmd : function(cmd, value){
         (function(){
             this.focus();
@@ -31343,7 +31343,7 @@
         }).defer(10, this);
     },
 
-    
+
     execCmd : function(cmd, value){
         this.doc.execCommand(cmd, false, value === undefined ? null : value);
         this.syncValue();
@@ -31376,7 +31376,7 @@
         }
     },
 
-    
+
     insertAtCursor : function(text){
         if(!this.activated){
             return;
@@ -31448,12 +31448,12 @@
         }
     }(),
 
-    
+
     getToolbar : function(){
         return this.tb;
     },
 
-    
+
     buttonTips : {
         bold : {
             title: 'Bold (Ctrl+B)',
@@ -31527,59 +31527,59 @@
         }
     }
 
-    // hide stuff that is not compatible
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+    // hide stuff that is not compatible
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 });
 Ext.reg('htmleditor', Ext.form.HtmlEditor);
 
 Ext.form.TimeField = Ext.extend(Ext.form.ComboBox, {
-    
+
     minValue : null,
-    
+
     maxValue : null,
-    
+
     minText : "The time in this field must be equal to or after {0}",
-    
+
     maxText : "The time in this field must be equal to or before {0}",
-    
+
     invalidText : "{0} is not a valid time",
-    
+
     format : "g:i A",
-    
+
     altFormats : "g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H",
-    
+
     increment: 15,
 
     // private override
@@ -31588,12 +31588,12 @@
     triggerAction: 'all',
     // private override
     typeAhead: false,
-    
+
     // private - This is the date to use when generating time values in the absence of either minValue
-    // or maxValue.  Using the current date causes DST issues on DST boundary dates, so this is an 
+    // or maxValue.  Using the current date causes DST issues on DST boundary dates, so this is an
     // arbitrary "safe" date that can be any date aside from DST boundary dates.
     initDate: '1/1/2008',
-    
+
     // in the absence of a time value, a default value of 12 noon will be used
     // (note: 12 noon was chosen because it steers well clear of all DST timezone changes)
     initTime: '12', // 24 hour format
@@ -31608,7 +31608,7 @@
         } else {
             // set time to 12 noon, then clear the time
             var parsedDate = Date.parseDate(value + ' ' + this.initTime, format + ' ' + this.initTimeFormat);
-            
+
             if (parsedDate) return parsedDate.clearTime();
         }
     },
@@ -31670,17 +31670,17 @@
         }
     }
 
-    
-    
-    
-    
+
+
+
+
 });
 Ext.reg('timefield', Ext.form.TimeField);
 
 Ext.form.Label = Ext.extend(Ext.BoxComponent, {
-    
-    
-    
+
+
+
 
     // private
     onRender : function(ct, position){
@@ -31694,8 +31694,8 @@
         }
         Ext.form.Label.superclass.onRender.call(this, ct, position);
     },
-    
-    
+
+
     setText: function(t, encode){
         this.text = t;
         if(this.rendered){
@@ -31804,7 +31804,7 @@
 
     // private
     createCallback : function(opts){
-		var opts = opts || {};
+    var opts = opts || {};
         return {
             success: this.success,
             failure: this.failure,
@@ -31821,8 +31821,8 @@
 };
 
 Ext.extend(Ext.form.Action.Submit, Ext.form.Action, {
-    
-    
+
+
     type : 'submit',
 
     // private
@@ -31946,91 +31946,91 @@
 
     // All these messages and functions are configurable
     return {
-        
+
         'email' : function(v){
             return email.test(v);
         },
-        
+
         'emailText' : 'This field should be an e-mail address in the format "user@domain.com"',
-        
+
         'emailMask' : /[a-z0-9_\.\-@]/i,
 
-        
+
         'url' : function(v){
             return url.test(v);
         },
-        
+
         'urlText' : 'This field should be a URL in the format "http:/'+'/www.domain.com"',
-        
-        
+
+
         'alpha' : function(v){
             return alpha.test(v);
         },
-        
+
         'alphaText' : 'This field should only contain letters and _',
-        
+
         'alphaMask' : /[a-z_]/i,
 
-        
+
         'alphanum' : function(v){
             return alphanum.test(v);
         },
-        
+
         'alphanumText' : 'This field should only contain letters, numbers and _',
-        
+
         'alphanumMask' : /[a-z0-9_]/i
     };
 }();
 
 Ext.grid.GridPanel = Ext.extend(Ext.Panel, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
     ddText : "{0} selected row{1}",
-    
+
     minColumnWidth : 25,
-    
+
     trackMouseOver : true,
-    
+
     enableDragDrop : false,
-    
+
     enableColumnMove : true,
-    
+
     enableColumnHide : true,
-    
+
     enableHdMenu : true,
-    
+
     stripeRows : false,
-    
+
     autoExpandColumn : false,
-    
+
     autoExpandMin : 50,
-    
+
     autoExpandMax : 1000,
-    
+
     view : null,
-    
+
     loadMask : false,
 
-    
+
     deferRowRender : true,
 
     // private
     rendered : false,
     // private
     viewReady: false,
-    
+
     stateEvents: ["columnmove", "columnresize", "sortchange"],
 
     // private
@@ -32063,58 +32063,58 @@
 
         this.addEvents(
             // raw events
-            
+
             "click",
-            
+
             "dblclick",
-            
+
             "contextmenu",
-            
+
             "mousedown",
-            
+
             "mouseup",
-            
+
             "mouseover",
-            
+
             "mouseout",
-            
+
             "keypress",
-            
+
             "keydown",
 
             // custom events
-            
+
             "cellmousedown",
-            
+
             "rowmousedown",
-            
+
             "headermousedown",
 
-            
+
             "cellclick",
-            
+
             "celldblclick",
-            
+
             "rowclick",
-            
+
             "rowdblclick",
-            
+
             "headerclick",
-            
+
             "headerdblclick",
-            
+
             "rowcontextmenu",
-            
+
             "cellcontextmenu",
-            
+
             "headercontextmenu",
-            
+
             "bodyscroll",
-            
+
             "columnresize",
-            
+
             "columnmove",
-            
+
             "sortchange"
         );
     },
@@ -32155,6 +32155,7 @@
     initStateEvents : function(){
         Ext.grid.GridPanel.superclass.initStateEvents.call(this);
         this.colModel.on('hiddenchange', this.saveState, this, {delay: 100});
+        this.colModel.on('columnfilterchanged', this.saveState, this, {delay: 100});
     },
 
     applyState : function(state){
@@ -32209,7 +32210,7 @@
         this.viewReady = true;
     },
 
-    
+
     reconfigure : function(store, colModel){
         if(this.loadMask){
             this.loadMask.destroy();
@@ -32341,7 +32342,7 @@
         }
     },
 
-    
+
     getGridEl : function(){
         return this.body;
     },
@@ -32349,7 +32350,7 @@
     // private for compatibility, overridden by editor grid
     stopEditing : Ext.emptyFn,
 
-    
+
     getSelectionModel : function(){
         if(!this.selModel){
             this.selModel = new Ext.grid.RowSelectionModel(
@@ -32358,78 +32359,78 @@
         return this.selModel;
     },
 
-    
+
     getStore : function(){
         return this.store;
     },
 
-    
+
     getColumnModel : function(){
         return this.colModel;
     },
 
-    
+
     getView : function(){
         if(!this.view){
             this.view = new Ext.grid.GridView(this.viewConfig);
         }
         return this.view;
     },
-    
+
     getDragDropText : function(){
         var count = this.selModel.getCount();
         return String.format(this.ddText, count, count == 1 ? '' : 's');
     }
 
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
 
 
 
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 });
 Ext.reg('grid', Ext.grid.GridPanel);
 
@@ -32437,62 +32438,66 @@
     Ext.apply(this, config);
     // These events are only used internally by the grid components
     this.addEvents(
-      
+
       "beforerowremoved",
-      
+
       "beforerowsinserted",
-      
+
       "beforerefresh",
-      
+
       "rowremoved",
-      
+
       "rowsinserted",
-      
+
       "rowupdated",
-      
+
       "refresh"
   );
     Ext.grid.GridView.superclass.constructor.call(this);
 };
 
 Ext.extend(Ext.grid.GridView, Ext.util.Observable, {
-    
-    
-    
-    
-    
+
+
+
+
+
     deferEmptyText: true,
-    
+
     scrollOffset: 19,
-    
+
     autoFill: false,
-    
+
     forceFit: false,
-    
+
     sortClasses : ["sort-asc", "sort-desc"],
-    
+
     sortAscText : "Sort Ascending",
-    
+
     sortDescText : "Sort Descending",
-    
+
     columnsText : "Columns",
 
+    filterText : "Filters",
+
+    filterMenu : null,
+
     // private
     borderWidth: 2,
     tdClass: 'x-grid3-cell',
     hdCls: 'x-grid3-hd',
 
-    
+
     cellSelectorDepth: 4,
-    
+
     rowSelectorDepth: 10,
 
-    
+
     cellSelector: 'td.x-grid3-cell',
-    
+
     rowSelector: 'div.x-grid3-row',
 
-    
+
 
     // private
     initTemplates : function(){
@@ -32594,7 +32599,7 @@
         if(this.forceFit){
             this.scroller.setStyle('overflow-x', 'hidden');
         }
-        
+
         this.mainBody = new E(this.scroller.dom.firstChild);
 
         this.focusEl = new E(this.scroller.dom.childNodes[1]);
@@ -32704,7 +32709,7 @@
         Ext.removeNode(this.getRow(row));
         this.syncFocusEl(row);
     },
-    
+
     // private
     removeRows : function(firstRow, lastRow){
         var bd = this.mainBody.dom;
@@ -32729,7 +32734,7 @@
         sb.scrollTop = state.top;
     },
 
-    
+
     scrollToTop : function(){
         this.scroller.dom.scrollTop = 0;
         this.scroller.dom.scrollLeft = 0;
@@ -32908,10 +32913,10 @@
 
     afterRender: function(){
         // check that the grid component is still in the dom
-        if (this.mainBody == null 
-        		|| this.mainBody.dom == null 
-        		|| this.mainBody.dom.parentNode == null 
-        		|| this.mainBody.dom.parentNode.parentNode == null) {
+        if (this.mainBody == null
+            || this.mainBody.dom == null
+            || this.mainBody.dom.parentNode == null
+            || this.mainBody.dom.parentNode.parentNode == null) {
             // we've been removed from the dom, so don't do any further work
             return;
         }
@@ -32958,21 +32963,33 @@
         }
 
         if(g.enableHdMenu !== false){
+
+            this.hmenu = new Ext.menu.Menu({id: g.id + "-hctx"});
+
             if(g.enableColumnHide !== false){
                 this.colMenu = new Ext.menu.Menu({id:g.id + "-hcols-menu"});
                 this.colMenu.on("beforeshow", this.beforeColMenuShow, this);
                 this.colMenu.on("itemclick", this.handleHdMenuClick, this);
+
+                this.filterMenu = new Ext.menu.Menu({id:g.id + "-hfilter-menu"});
+                this.filterMenu.on("beforeshow", this.beforeFilterMenuShow, this);
+                this.filterMenu.on("itemclick", this.handleHdMenuClick, this);
+
             }
-            this.hmenu = new Ext.menu.Menu({id: g.id + "-hctx"});
+
             this.hmenu.add(
                 {id:"asc", text: this.sortAscText, cls: "xg-hmenu-sort-asc"},
                 {id:"desc", text: this.sortDescText, cls: "xg-hmenu-sort-desc"}
             );
-            if(g.enableColumnHide !== false){
+            if(g.enableColumnHide !== false) {
                 this.hmenu.add('-',
                     {id:"columns", text: this.columnsText, menu: this.colMenu, iconCls: 'x-cols-icon'}
                 );
             }
+
+             //ensure this only happens once
+          this.hmenu.add({id:"filters", text: this.filterText, menu: this.filterMenu, iconCls: 'x-cols-icon'});
+
             this.hmenu.on("itemclick", this.handleHdMenuClick, this);
 
             //g.on("headercontextmenu", this.handleHdCtx, this);
@@ -33063,7 +33080,7 @@
         // template method
     },
 
-    
+
     // private
     init: function(grid){
         this.grid = grid;
@@ -33125,14 +33142,14 @@
         this.innerHd.firstChild.innerHTML = this.renderHeaders();
     },
 
-    
+
     focusRow : function(row){
         this.focusCell(row, 0, false);
     },
 
-    
+
     focusCell : function(row, col, hscroll){
-		this.syncFocusEl(this.ensureVisible(row, col, hscroll));
+    this.syncFocusEl(this.ensureVisible(row, col, hscroll));
         if(Ext.isGecko){
             this.focusEl.focus();
         }else{
@@ -33140,8 +33157,8 @@
         }
     },
 
-	resolveCell : function(row, col, hscroll){
-		if(typeof row != "number"){
+  resolveCell : function(row, col, hscroll){
+    if(typeof row != "number"){
             row = row.rowIndex;
         }
         if(!this.ds){
@@ -33160,35 +33177,35 @@
             cellEl = this.getCell(row, col);
         }
 
-		return {row: rowEl, cell: cellEl};
-	},
+    return {row: rowEl, cell: cellEl};
+  },
 
-	getResolvedXY : function(resolved){
-		if(!resolved){
-			return null;
-		}
-		var s = this.scroller.dom, c = resolved.cell, r = resolved.row;
-		return c ? Ext.fly(c).getXY() : [this.el.getX(), Ext.fly(r).getY()];
-	},
-
-	syncFocusEl : function(row, col, hscroll){
-		var xy = row;
-		if(!Ext.isArray(xy)){
-			row = Math.min(row, Math.max(0, this.getRows().length-1));
-        	xy = this.getResolvedXY(this.resolveCell(row, col, hscroll));
-		}
+  getResolvedXY : function(resolved){
+    if(!resolved){
+      return null;
+    }
+    var s = this.scroller.dom, c = resolved.cell, r = resolved.row;
+    return c ? Ext.fly(c).getXY() : [this.el.getX(), Ext.fly(r).getY()];
+  },
+
+  syncFocusEl : function(row, col, hscroll){
+    var xy = row;
+    if(!Ext.isArray(xy)){
+      row = Math.min(row, Math.max(0, this.getRows().length-1));
+          xy = this.getResolvedXY(this.resolveCell(row, col, hscroll));
+    }
         this.focusEl.setXY(xy||this.scroller.getXY());
     },
 
-	ensureVisible : function(row, col, hscroll){
+  ensureVisible : function(row, col, hscroll){
         var resolved = this.resolveCell(row, col, hscroll);
-		if(!resolved || !resolved.row){
-			return;
-		}
+    if(!resolved || !resolved.row){
+      return;
+    }
 
-		var rowEl = resolved.row, cellEl = resolved.cell;
+    var rowEl = resolved.row, cellEl = resolved.cell;
 
-		var c = this.scroller.dom;
+    var c = this.scroller.dom;
 
         var ctop = 0;
         var p = rowEl, stop = this.el.dom;
@@ -33204,7 +33221,7 @@
         var stop = parseInt(c.scrollTop, 10);
         var sbot = stop + ch;
 
-		if(ctop < stop){
+    if(ctop < stop){
           c.scrollTop = ctop;
         }else if(cbot > sbot){
             c.scrollTop = cbot-ch;
@@ -33425,7 +33442,7 @@
         this.fireEvent("rowupdated", this, index, record);
     },
 
-    
+
     refresh : function(headersToo){
         this.fireEvent("beforerefresh", this);
         this.grid.stopEditing(true);
@@ -33499,16 +33516,16 @@
                 delete Ext.dd.DDM.ids['gridHeader' + this.grid.getGridEl().id];
             }
         }
-        
+
         if(this.dragZone){
             this.dragZone.unreg();
         }
-        
+
         Ext.fly(this.innerHd).removeAllListeners();
         Ext.removeNode(this.innerHd);
-        
-        Ext.destroy(this.resizeMarker, this.resizeProxy, this.focusEl, this.mainBody, 
-                    this.scroller, this.mainHd, this.mainWrap, this.dragZone, 
+
+        Ext.destroy(this.resizeMarker, this.resizeProxy, this.focusEl, this.mainBody,
+                    this.scroller, this.mainHd, this.mainWrap, this.dragZone,
                     this.splitZone, this.columnDrag, this.columnDrop);
 
         this.initData(null, null);
@@ -33526,12 +33543,12 @@
         if(this.autoFill){
             var ct = this.grid.ownerCt;
             if (ct && ct.getLayout()){
-                ct.on('afterlayout', function(){ 
+                ct.on('afterlayout', function(){
                     this.fitColumns(true, true);
-                    this.updateHeaders(); 
-                }, this, {single: true}); 
-            }else{ 
-                this.fitColumns(true, true); 
+                    this.updateHeaders();
+                }, this, {single: true});
+            }else{
+                this.fitColumns(true, true);
             }
         }else if(this.forceFit){
             this.fitColumns(true, false);
@@ -33542,7 +33559,7 @@
         this.renderUI();
     },
 
-    
+
     // private
     initData : function(ds, cm){
         if(this.ds){
@@ -33655,7 +33672,7 @@
         this.refresh(true);
     },
 
-    
+
     // private
     initUI : function(grid){
         grid.on("headerclick", this.onHeaderClick, this);
@@ -33743,6 +33760,7 @@
     handleHdMenuClick : function(item){
         var index = this.hdCtxIndex;
         var cm = this.cm, ds = this.ds;
+
         switch(item.id){
             case "asc":
                 ds.sort(cm.getDataIndex(index), "ASC");
@@ -33751,13 +33769,38 @@
                 ds.sort(cm.getDataIndex(index), "DESC");
                 break;
             default:
-                index = cm.getIndexById(item.id.substr(4));
-                if(index != -1){
-                    if(item.checked && cm.getColumnsBy(this.isHideableColumn, this).length <= 1){
-                        this.onDenyColumnHide();
-                        return false;
+              var id = item.id.substr(4);
+              //filters support a multipart id also containing the index and the selected value, we must split twice to get this
+              if(id.split(":",2).length == 2) {
+                var values = id.split(":");
+
+                //i.e. its been clicked and will be deselected afterwards
+                if(item.checked) {
+                  //we'll check if its populated and null it out
+                  if(!cm.checkIsLastFilter(values[0])) {
+                    cm.removeSelectedGroupableValue(values[0], values[1]);
+                  } else {
+                    //force it back to checked
+                    item.setValue(true);
+                  }
+
+                } else {
+                  //if its not populated lets add the value to the appropriate index
+                  cm.addSelectedGroupableValue(values[0], values[1]);
+                }
+
+                this.grid.fireEvent("columnfilterchanged", values[0]);
+
+              }
+              else {
+                    index = cm.getIndexById(id);
+                    if(index != -1){
+                        if(item.checked && cm.getColumnsBy(this.isHideableColumn, this).length <= 1){
+                            this.onDenyColumnHide();
+                            return false;
+                        }
+                        cm.setHidden(index, item.checked);
                     }
-                    cm.setHidden(index, item.checked);
                 }
         }
         return true;
@@ -33785,6 +33828,40 @@
         }
     },
 
+    beforeFilterMenuShow :function(){
+      var cm = this.cm;
+      this.filterMenu.removeAll();
+      var indices = cm.findFilterIndices();
+
+      if(indices != null) {
+        for(var i = 0; i < indices.length; i++) {
+          if(cm.getSelectionId(indices[i]) == indices[i]) {
+            var groupables = cm.getGroupableValues(indices[i]);
+            var selectables = cm.getSelectedGroupableValues(indices[i]);
+              for(var j = 0; j < groupables.length; j++){
+                    this.filterMenu.add(new Ext.menu.CheckItem({
+
+                           id: "col-" + indices[i] + ":" + j,
+                           text: groupables[j],
+                           checked: this.getFilterMatch(j, selectables),
+                           hideOnClick:false,
+                           disabled: false
+                      }));
+                }
+            }
+        }
+        }
+    },
+
+    getFilterMatch : function(match, potentials){
+      for(var x in potentials) {
+        if(potentials[x] == match) {
+              return true;
+        }
+      }
+      return false;
+    },
+
     // private
     handleHdDown : function(e, t){
         if(Ext.fly(t).hasClass('x-grid3-hd-btn')){
@@ -33794,8 +33871,10 @@
             var index = this.getCellIndex(hd);
             this.hdCtxIndex = index;
             var ms = this.hmenu.items, cm = this.cm;
+            cm.setSelectionId(this.hdCtxIndex);
             ms.get("asc").setDisabled(!cm.isSortable(index));
             ms.get("desc").setDisabled(!cm.isSortable(index));
+            ms.get("filters").setVisible(cm.getGroupableValues(index).length != 0);
             this.hmenu.on("hide", function(){
                 Ext.fly(hd).removeClass('x-grid3-hd-menu-open');
             }, this, {single:true});
@@ -33950,26 +34029,26 @@
 
 
 Ext.grid.GroupingView = Ext.extend(Ext.grid.GridView, {
-    
+
     hideGroupedColumn:false,
-    
+
     showGroupName:true,
-    
+
     startCollapsed:false,
-    
+
     enableGrouping:true,
-    
+
     enableGroupingMenu:true,
-    
+
     enableNoGroups:true,
-    
+
     emptyGroupText : '(None)',
-    
+
     ignoreAdd: false,
-    
+
     groupTextTpl : '{text}',
-    
-    
+
+
 
     // private
     gidSeed : 1000,
@@ -34046,7 +34125,7 @@
         var s = this.hmenu.items.get('showGroups');
         if(s){
            s.setDisabled(!field && this.cm.config[this.hdCtxIndex].groupable === false);
-			s.setChecked(!!field, true);
+      s.setChecked(!!field, true);
         }
     },
 
@@ -34091,7 +34170,7 @@
         }
     },
 
-    
+
     toggleGroup : function(group, expanded){
         this.grid.stopEditing(true);
         group = Ext.getDom(group);
@@ -34103,7 +34182,7 @@
         gel[expanded ? 'removeClass' : 'addClass']('x-grid-group-collapsed');
     },
 
-    
+
     toggleAllGroups : function(expanded){
         var groups = this.getGroups();
         for(var i = 0, len = groups.length; i < len; i++){
@@ -34111,12 +34190,12 @@
         }
     },
 
-    
+
     expandAllGroups : function(){
         this.toggleAllGroups(true);
     },
 
-    
+
     collapseAllGroups : function(){
         this.toggleAllGroups(false);
     },
@@ -34200,10 +34279,10 @@
                 g = this.getGroup(gvalue, r, groupRenderer, rowIndex, colIndex, ds);
             if(!curGroup || curGroup.group != g){
                 gid = gidPrefix + '-gp-' + groupField + '-' + Ext.util.Format.htmlEncode(g);
-               	// if state is defined use it, however state is in terms of expanded
-				// so negate it, otherwise use the default.
-				var isCollapsed  = typeof this.state[gid] !== 'undefined' ? !this.state[gid] : this.startCollapsed;
-				var gcls = isCollapsed ? 'x-grid-group-collapsed' : '';	
+                 // if state is defined use it, however state is in terms of expanded
+        // so negate it, otherwise use the default.
+        var isCollapsed  = typeof this.state[gid] !== 'undefined' ? !this.state[gid] : this.startCollapsed;
+        var gcls = isCollapsed ? 'x-grid-group-collapsed' : '';
                 curGroup = {
                     group: g,
                     gvalue: gvalue,
@@ -34233,7 +34312,7 @@
         return buf.join('');
     },
 
-    
+
     getGroupId : function(value){
         var gidPrefix = this.grid.getGridEl().id;
         var groupField = this.getGroupField();
@@ -34317,9 +34396,9 @@
         }
     },
 
-    
+
     groupByText: 'Group By This Field',
-    
+
     showGroupsText: 'Show in Groups'
 });
 // private
@@ -34608,7 +34687,7 @@
 Ext.extend(Ext.grid.GridDragZone, Ext.dd.DragZone, {
     ddGroup : "GridDD",
 
-    
+
     getDragData : function(e){
         var t = Ext.lib.Event.getTarget(e);
         var rowIndex = this.view.findRowIndex(t);
@@ -34622,7 +34701,7 @@
         return false;
     },
 
-    
+
     onInitDrag : function(e){
         var data = this.dragData;
         this.ddel.innerHTML = this.grid.getDragDropText();
@@ -34630,12 +34709,12 @@
         // fire start drag?
     },
 
-    
+
     afterRepair : function(){
         this.dragging = false;
     },
 
-    
+
     getRepairXY : function(e, data){
         return false;
     },
@@ -34656,13 +34735,15 @@
 
 
 Ext.grid.ColumnModel = function(config){
-    
+
     this.defaultWidth = 100;
 
-    
+
     this.defaultSortable = false;
 
-    
+    this.selectionId = null;
+
+
     if(config.columns){
         Ext.apply(this, config);
         this.setConfig(config.columns, true);
@@ -34670,44 +34751,101 @@
         this.setConfig(config, true);
     }
     this.addEvents(
-        
+
         "widthchange",
-        
+
         "headerchange",
-        
+
         "hiddenchange",
-        
+
+        "columnfilterchanged",
+
         "columnmoved",
         // deprecated - to be removed
         "columnlockchange",
-        
+
         "configchange"
     );
     Ext.grid.ColumnModel.superclass.constructor.call(this);
 };
 Ext.extend(Ext.grid.ColumnModel, Ext.util.Observable, {
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
-    
 
-    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    getGroupableValues : function(index){
+      if(this.config[index].groupableValues != null) {
+         return this.config[index].groupableValues;
+      }
+      return [];
+    },
+
+    getSelectedGroupableValues : function(index){
+      if(this.config[index].selectedGroupableValues != null) {
+        return this.config[index].selectedGroupableValues;
+      }
+      return [];
+    },
+
+    addSelectedGroupableValue : function(index, valueIndex){
+        if(this.config[index].selectedGroupableValues != null) {
+            var values = this.config[index].selectedGroupableValues;
+            for(var x in values) {
+                if(values[x] == valueIndex) {
+                    return;
+                }
+            }
+            var pos = values.length;
+            values[pos] = valueIndex;
+        }
+    },
+
+    checkIsLastFilter : function(index){
+      if(this.config[index].selectedGroupableValues != null) {
+            var values = this.config[index].selectedGroupableValues;
+            if(values.length == 1) {
+                //there is no point removing the last filter so we stop them doing this
+                return true;
+            }
+        }
+        return false;
+    },
+
+    removeSelectedGroupableValue : function(index, valueIndex){
+        if(this.config[index].selectedGroupableValues != null) {
+            var values = this.config[index].selectedGroupableValues;
+            if(Ext.isArray(values)) {
+                values.remove(valueIndex);
+            }
+        }
+    },
+
+    setSelectionId : function(index){
+        this.selectionId = index;
+    },
+
+    getSelectionId : function() {
+      return this.selectionId;
+    },
+
     getColumnId : function(index){
         return this.config[index].id;
     },
 
-    
+
     setConfig : function(config, initial){
         if(!initial){ // cleanup
             delete this.totalWidth;
@@ -34739,12 +34877,12 @@
         }
     },
 
-    
+
     getColumnById : function(id){
         return this.lookup[id];
     },
 
-    
+
     getIndexById : function(id){
         for(var i = 0, len = this.config.length; i < len; i++){
             if(this.config[i].id == id){
@@ -34754,7 +34892,7 @@
         return -1;
     },
 
-    
+
     moveColumn : function(oldIndex, newIndex){
         var c = this.config[oldIndex];
         this.config.splice(oldIndex, 1);
@@ -34799,7 +34937,7 @@
         }
     },
 
-    
+
     getColumnCount : function(visibleOnly){
         if(visibleOnly === true){
             var c = 0;
@@ -34813,7 +34951,7 @@
         return this.config.length;
     },
 
-    
+
     getColumnsBy : function(fn, scope){
         var r = [];
         for(var i = 0, len = this.config.length; i < len; i++){
@@ -34825,7 +34963,7 @@
         return r;
     },
 
-    
+
     isSortable : function(col){
         if(typeof this.config[col].sortable == "undefined"){
             return this.defaultSortable;
@@ -34833,12 +34971,12 @@
         return this.config[col].sortable;
     },
 
-    
+
     isMenuDisabled : function(col){
         return !!this.config[col].menuDisabled;
     },
 
-    
+
     getRenderer : function(col){
         if(!this.config[col].renderer){
             return Ext.grid.ColumnModel.defaultRenderer;
@@ -34846,17 +34984,17 @@
         return this.config[col].renderer;
     },
 
-    
+
     setRenderer : function(col, fn){
         this.config[col].renderer = fn;
     },
 
-    
+
     getColumnWidth : function(col){
         return this.config[col].width || this.defaultWidth;
     },
 
-    
+
     setColumnWidth : function(col, width, suppressEvent){
         this.config[col].width = width;
         this.totalWidth = null;
@@ -34865,7 +35003,7 @@
         }
     },
 
-    
+
     getTotalWidth : function(includeHidden){
         if(!this.totalWidth){
             this.totalWidth = 0;
@@ -34878,37 +35016,37 @@
         return this.totalWidth;
     },
 
-    
+
     getColumnHeader : function(col){
         return this.config[col].header;
     },
 
-    
+
     setColumnHeader : function(col, header){
         this.config[col].header = header;
         this.fireEvent("headerchange", this, col, header);
     },
 
-    
+
     getColumnTooltip : function(col){
             return this.config[col].tooltip;
     },
-    
+
     setColumnTooltip : function(col, tooltip){
             this.config[col].tooltip = tooltip;
     },
 
-    
+
     getDataIndex : function(col){
         return this.config[col].dataIndex;
     },
 
-    
+
     setDataIndex : function(col, dataIndex){
         this.config[col].dataIndex = dataIndex;
     },
 
-    
+
     findColumnIndex : function(dataIndex){
         var c = this.config;
         for(var i = 0, len = c.length; i < len; i++){
@@ -34919,38 +35057,51 @@
         return -1;
     },
 
-    
+    findFilterIndices : function(){
+        var c = this.config;
+        var values = [];
+        var j = 0;
+        for(var i = 0, len = c.length; i < len; i++){
+            if(c[i].groupableValues != null){
+                values[j] = i;
+                j++;
+          }
+        }
+        return values;
+    },
+
+
     isCellEditable : function(colIndex, rowIndex){
         return (this.config[colIndex].editable || (typeof this.config[colIndex].editable == "undefined" && this.config[colIndex].editor)) ? true : false;
     },
 
-    
+
     getCellEditor : function(colIndex, rowIndex){
         return this.config[colIndex].editor;
     },
 
-    
+
     setEditable : function(col, editable){
         this.config[col].editable = editable;
     },
 
 
-    
+
     isHidden : function(colIndex){
         return this.config[colIndex].hidden;
     },
 
 
-    
+
     isFixed : function(colIndex){
         return this.config[colIndex].fixed;
     },
 
-    
+
     isResizable : function(colIndex){
         return colIndex >= 0 && this.config[colIndex].resizable !== false && this.config[colIndex].fixed !== true;
     },
-    
+
     setHidden : function(colIndex, hidden){
         var c = this.config[colIndex];
         if(c.hidden !== hidden){
@@ -34960,7 +35111,7 @@
         }
     },
 
-    
+
     setEditor : function(col, editor){
         this.config[col].editor = editor;
     }
@@ -34983,23 +35134,23 @@
 };
 
 Ext.extend(Ext.grid.AbstractSelectionModel, Ext.util.Observable,  {
-    
+
     init : function(grid){
         this.grid = grid;
         this.initEvents();
     },
 
-    
+
     lock : function(){
         this.locked = true;
     },
 
-    
+
     unlock : function(){
         this.locked = false;
     },
 
-    
+
     isLocked : function(){
         return this.locked;
     }
@@ -35015,24 +35166,24 @@
     this.lastActive = false;
 
     this.addEvents(
-        
-	    "selectionchange",
-        
-	    "beforerowselect",
-        
-	    "rowselect",
-        
-	    "rowdeselect"
+
+      "selectionchange",
+
+      "beforerowselect",
+
+      "rowselect",
+
+      "rowdeselect"
     );
 
     Ext.grid.RowSelectionModel.superclass.constructor.call(this);
 };
 
 Ext.extend(Ext.grid.RowSelectionModel, Ext.grid.AbstractSelectionModel,  {
-    
+
     singleSelect : false,
 
-	
+
     // private
     initEvents : function(){
 
@@ -35115,7 +35266,7 @@
         }
     },
 
-    
+
     selectRecords : function(records, keepExisting){
         if(!keepExisting){
             this.clearSelections();
@@ -35126,63 +35277,63 @@
         }
     },
 
-    
+
     getCount : function(){
         return this.selections.length;
     },
 
-    
+
     selectFirstRow : function(){
         this.selectRow(0);
     },
 
-    
+
     selectLastRow : function(keepExisting){
         this.selectRow(this.grid.store.getCount() - 1, keepExisting);
     },
 
-    
+
     selectNext : function(keepExisting){
         if(this.hasNext()){
             this.selectRow(this.last+1, keepExisting);
             this.grid.getView().focusRow(this.last);
-			return true;
+      return true;
         }
-		return false;
+    return false;
     },
 
-    
+
     selectPrevious : function(keepExisting){
         if(this.hasPrevious()){
             this.selectRow(this.last-1, keepExisting);
             this.grid.getView().focusRow(this.last);
-			return true;
+      return true;
         }
-		return false;
+    return false;
     },
 
-    
+
     hasNext : function(){
         return this.last !== false && (this.last+1) < this.grid.store.getCount();
     },
 
-    
+
     hasPrevious : function(){
         return !!this.last;
     },
 
 
-    
+
     getSelections : function(){
         return [].concat(this.selections.items);
     },
 
-    
+
     getSelected : function(){
         return this.selections.itemAt(0);
     },
 
-    
+
     each : function(fn, scope){
         var s = this.getSelections();
         for(var i = 0, len = s.length; i < len; i++){
@@ -35193,7 +35344,7 @@
         return true;
     },
 
-    
+
     clearSelections : function(fast){
         if(this.isLocked()) return;
         if(fast !== true){
@@ -35210,7 +35361,7 @@
     },
 
 
-    
+
     selectAll : function(){
         if(this.isLocked()) return;
         this.selections.clear();
@@ -35219,18 +35370,18 @@
         }
     },
 
-    
+
     hasSelection : function(){
         return this.selections.length > 0;
     },
 
-    
+
     isSelected : function(index){
         var r = typeof index == "number" ? this.grid.store.getAt(index) : index;
         return (r && this.selections.key(r.id) ? true : false);
     },
 
-    
+
     isIdSelected : function(id){
         return (this.selections.key(id) ? true : false);
     },
@@ -35257,7 +35408,7 @@
         }
     },
 
-    
+
     selectRows : function(rows, keepExisting){
         if(!keepExisting){
             this.clearSelections();
@@ -35267,7 +35418,7 @@
         }
     },
 
-    
+
     selectRange : function(startRow, endRow, keepExisting){
         if(this.isLocked()) return;
         if(!keepExisting){
@@ -35284,7 +35435,7 @@
         }
     },
 
-    
+
     deselectRange : function(startRow, endRow, preventViewNotify){
         if(this.isLocked()) return;
         for(var i = startRow; i <= endRow; i++){
@@ -35292,7 +35443,7 @@
         }
     },
 
-    
+
     selectRow : function(index, keepExisting, preventViewNotify){
         if(this.isLocked() || (index < 0 || index >= this.grid.store.getCount()) || this.isSelected(index)) return;
         var r = this.grid.store.getAt(index);
@@ -35310,7 +35461,7 @@
         }
     },
 
-    
+
     deselectRow : function(index, preventViewNotify){
         if(this.isLocked()) return;
         if(this.last == index){
@@ -35357,13 +35508,13 @@
         }else if(k == e.ENTER){
             e.stopEvent();
             ed.completeEdit();
-			if(this.moveEditorOnEnter !== false){
-				if(shift){
-					newCell = g.walkCells(ed.row - 1, ed.col, -1, this.acceptsNav, this);
-				}else{
-					newCell = g.walkCells(ed.row + 1, ed.col, 1, this.acceptsNav, this);
-				}
-			}
+      if(this.moveEditorOnEnter !== false){
+        if(shift){
+          newCell = g.walkCells(ed.row - 1, ed.col, -1, this.acceptsNav, this);
+        }else{
+          newCell = g.walkCells(ed.row + 1, ed.col, 1, this.acceptsNav, this);
+        }
+      }
         }else if(k == e.ESC){
             ed.cancelEdit();
         }
@@ -35379,12 +35530,12 @@
     this.selection = null;
 
     this.addEvents(
-        
-	    "beforecellselect",
-        
-	    "cellselect",
-        
-	    "selectionchange"
+
+      "beforecellselect",
+
+      "cellselect",
+
+      "selectionchange"
     );
 
     Ext.grid.CellSelectionModel.superclass.constructor.call(this);
@@ -35392,7 +35543,7 @@
 
 Ext.extend(Ext.grid.CellSelectionModel, Ext.grid.AbstractSelectionModel,  {
 
-    
+
     initEvents : function(){
         this.grid.on("cellmousedown", this.handleMouseDown, this);
         this.grid.getGridEl().on(Ext.isIE || Ext.isSafari3 ? "keydown" : "keypress", this.handleKeyDown, this);
@@ -35406,29 +35557,29 @@
         }
     },
 
-	//private
+  //private
     beforeEdit : function(e){
         this.select(e.row, e.column, false, true, e.record);
     },
 
-	//private
+  //private
     onRowUpdated : function(v, index, r){
         if(this.selection && this.selection.record == r){
             v.onCellSelect(index, this.selection.cell[1]);
         }
     },
 
-	//private
+  //private
     onViewChange : function(){
         this.clearSelections(true);
     },
 
-	
+
     getSelectedCell : function(){
         return this.selection ? this.selection.cell : null;
     },
 
-    
+
     clearSelections : function(preventNotify){
         var s = this.selection;
         if(s){
@@ -35440,12 +35591,12 @@
         }
     },
 
-    
+
     hasSelection : function(){
         return this.selection ? true : false;
     },
 
-    
+
     handleMouseDown : function(g, row, cell, e){
         if(e.button !== 0 || this.isLocked()){
             return;
@@ -35453,7 +35604,7 @@
         this.select(row, cell);
     },
 
-    
+
     select : function(rowIndex, colIndex, preventViewNotify, preventFocus,  r){
         if(this.fireEvent("beforecellselect", this, rowIndex, colIndex) !== false){
             this.clearSelections();
@@ -35474,12 +35625,12 @@
         }
     },
 
-	//private
+  //private
     isSelectable : function(rowIndex, colIndex, cm){
         return !cm.isHidden(colIndex);
     },
 
-    
+
     handleKeyDown : function(e){
         if(!e.isNavKeyPress()){
             return;
@@ -35551,7 +35702,7 @@
             ed.completeEdit();
             e.stopEvent();
         }else if(k == e.ESC){
-        	e.stopEvent();
+          e.stopEvent();
             ed.cancelEdit();
         }
         if(newCell){
@@ -35561,7 +35712,7 @@
 });
 
 Ext.grid.EditorGridPanel = Ext.extend(Ext.grid.GridPanel, {
-    
+
     clicksToEdit: 2,
 
     // private
@@ -35569,10 +35720,10 @@
     // private
     detectEdit: false,
 
-	
-	autoEncode : false,
 
-	
+  autoEncode : false,
+
+
     // private
     trackMouseOver: false, // causes very odd FF errors
 
@@ -35581,18 +35732,18 @@
         Ext.grid.EditorGridPanel.superclass.initComponent.call(this);
 
         if(!this.selModel){
-            
+
             this.selModel = new Ext.grid.CellSelectionModel();
         }
 
         this.activeEditor = null;
 
-	    this.addEvents(
-            
+      this.addEvents(
+
             "beforeedit",
-            
+
             "afteredit",
-            
+
             "validateedit"
         );
     },
@@ -35646,7 +35797,7 @@
         this.editing = false;
         this.activeEditor = null;
         ed.un("specialkey", this.selModel.onEditorKey, this.selModel);
-		var r = ed.record;
+    var r = ed.record;
         var field = this.colModel.getDataIndex(ed.col);
         value = this.postEditValue(value, startValue, r, field);
         if(String(value) !== String(startValue)){
@@ -35669,7 +35820,7 @@
         this.view.focusCell(ed.row, ed.col);
     },
 
-    
+
     startEditing : function(row, col){
         this.stopEditing();
         if(this.colModel.isCellEditable(col, row)){
@@ -35697,7 +35848,7 @@
                     ed.record = r;
                     ed.on("complete", this.onEditComplete, this, {single: true});
                     ed.on("specialkey", this.selModel.onEditorKey, this.selModel);
-                    
+
                     this.activeEditor = ed;
                     var v = this.preEditValue(r, field);
                     ed.startEdit(this.view.getCell(row, col).firstChild, v === undefined ? '' : v);
@@ -35707,17 +35858,17 @@
     },
 
     // private
-	preEditValue : function(r, field){
+  preEditValue : function(r, field){
         var value = r.data[field];
-		return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlDecode(value) : value;
-	},
+    return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlDecode(value) : value;
+  },
 
     // private
-	postEditValue : function(value, originalValue, r, field){
-		return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlEncode(value) : value;
-	},
+  postEditValue : function(value, originalValue, r, field){
+    return this.autoEncode && typeof value == 'string' ? Ext.util.Format.htmlEncode(value) : value;
+  },
+
 
-    
     stopEditing : function(cancel){
         if(this.activeEditor){
             this.activeEditor[cancel === true ? 'cancelEdit' : 'completeEdit']();
@@ -35931,9 +36082,9 @@
 
 
 Ext.grid.PropertyGrid = Ext.extend(Ext.grid.EditorGridPanel, {
-    
-    
-    
+
+
+
 
     // private config overrides
     enableColumnMove:false,
@@ -35954,9 +36105,9 @@
         var cm = new Ext.grid.PropertyColumnModel(this, store);
         store.store.sort('name', 'ASC');
         this.addEvents(
-            
+
             'beforepropertychange',
-            
+
             'propertychange'
         );
         this.cm = cm;
@@ -35986,12 +36137,12 @@
         }
     },
 
-    
+
     setSource : function(source){
         this.propStore.setSource(source);
     },
 
-    
+
     getSource : function(){
         return this.propStore.getSource();
     }
@@ -36007,11 +36158,11 @@
 };
 
 Ext.grid.RowNumberer.prototype = {
-    
+
     header: "",
-    
+
     width: 23,
-    
+
     sortable: false,
 
     // private
@@ -36031,11 +36182,11 @@
 };
 
 Ext.grid.CheckboxSelectionModel = Ext.extend(Ext.grid.RowSelectionModel, {
-    
+
     header: '<div class="x-grid3-hd-checker">&#160;</div>',
-    
+
     width: 20,
-    
+
     sortable: false,
 
     // private
@@ -36112,22 +36263,22 @@
 };
 
 Ext.LoadMask.prototype = {
-    
-    
-    
+
+
+
     msg : 'Loading...',
-    
+
     msgCls : 'x-mask-loading',
 
-    
+
     disabled: false,
 
-    
+
     disable : function(){
        this.disabled = true;
     },
 
-    
+
     enable : function(){
         this.disabled = false;
     },
@@ -36144,14 +36295,14 @@
         }
     },
 
-    
+
     show: function(){
         this.onBeforeLoad();
     },
 
-    
+
     hide: function(){
-        this.onLoad();    
+        this.onLoad();
     },
 
     // private
@@ -36170,10 +36321,10 @@
 };
 
 Ext.ProgressBar = Ext.extend(Ext.BoxComponent, {
-   
+
     baseCls : 'x-progress',
-    
-    
+
+
     animate : false,
 
     // private
@@ -36183,7 +36334,7 @@
     initComponent : function(){
         Ext.ProgressBar.superclass.initComponent.call(this);
         this.addEvents(
-            
+
             "update"
         );
     },
@@ -36232,36 +36383,36 @@
         }
         this.progressBar.setHeight(inner.offsetHeight);
     },
-    
+
     // private
-	afterRender : function(){
-		Ext.ProgressBar.superclass.afterRender.call(this);
-		if(this.value){
-			this.updateProgress(this.value, this.text);
-		}else{
-			this.updateText(this.text);
-		}
-	},
+  afterRender : function(){
+    Ext.ProgressBar.superclass.afterRender.call(this);
+    if(this.value){
+      this.updateProgress(this.value, this.text);
+    }else{
+      this.updateText(this.text);
+    }
+  },
+
 
-    
     updateProgress : function(value, text, animate){
         this.value = value || 0;
         if(text){
             this.updateText(text);
         }
         if(this.rendered){
-	        var w = Math.floor(value*this.el.dom.firstChild.offsetWidth);
-	        this.progressBar.setWidth(w, animate === true || (animate !== false && this.animate));
-	        if(this.textTopEl){
-	            //textTopEl should be the same width as the bar so overflow will clip as the bar moves
-	            this.textTopEl.removeClass('x-hidden').setWidth(w);
-	        }
+          var w = Math.floor(value*this.el.dom.firstChild.offsetWidth);
+          this.progressBar.setWidth(w, animate === true || (animate !== false && this.animate));
+          if(this.textTopEl){
+              //textTopEl should be the same width as the bar so overflow will clip as the bar moves
+              this.textTopEl.removeClass('x-hidden').setWidth(w);
+          }
         }
         this.fireEvent('update', this, value, text);
         return this;
     },
 
-    
+
     wait : function(o){
         if(!this.waitTimer){
             var scope = this;
@@ -36286,12 +36437,12 @@
         return this;
     },
 
-    
+
     isWaiting : function(){
         return this.waitTimer != null;
     },
 
-    
+
     updateText : function(text){
         this.text = text || '&#160;';
         if(this.rendered){
@@ -36299,8 +36450,8 @@
         }
         return this;
     },
-    
-    
+
+
     syncProgressBar : function(){
         if(this.value){
             this.updateProgress(this.value, this.text);
@@ -36308,7 +36459,7 @@
         return this;
     },
 
-    
+
     setSize : function(w, h){
         Ext.ProgressBar.superclass.setSize.call(this, w, h);
         if(this.textTopEl){
@@ -36319,7 +36470,7 @@
         return this;
     },
 
-    
+
     reset : function(hide){
         this.updateProgress(0);
         if(this.textTopEl){
@@ -36339,25 +36490,25 @@
 Ext.reg('progress', Ext.ProgressBar);
 
 Ext.Slider = Ext.extend(Ext.BoxComponent, {
-	
-	
+
+
     vertical: false,
-	
+
     minValue: 0,
-		
+
     maxValue: 100,
-	
+
     keyIncrement: 1,
-	
+
     increment: 0,
-	// private
+  // private
     clickRange: [5,15],
-	
+
     clickToChange : true,
-	
+
     animate: true,
 
-    
+
     dragging: false,
 
     // private override
@@ -36366,28 +36517,28 @@
             this.value = this.minValue;
         }
         Ext.Slider.superclass.initComponent.call(this);
-        this.keyIncrement = Math.max(this.increment, this.keyIncrement); 
+        this.keyIncrement = Math.max(this.increment, this.keyIncrement);
         this.addEvents(
-            		
-			'beforechange', 
-			
-			'change',
-			
-			'changecomplete',
-			
-			'dragstart', 
-			
-			'drag', 
-			
-			'dragend'
-		);
+
+      'beforechange',
+
+      'change',
+
+      'changecomplete',
+
+      'dragstart',
+
+      'drag',
+
+      'dragend'
+    );
 
         if(this.vertical){
             Ext.apply(this, Ext.Slider.Vertical);
         }
     },
 
-	// private override
+  // private override
     onRender : function(){
         this.autoEl = {
             cls: 'x-slider ' + (this.vertical ? 'x-slider-vert' : 'x-slider-horz'),
@@ -36402,7 +36553,7 @@
         this.initEvents();
     },
 
-	// private override
+  // private override
     initEvents : function(){
         this.thumb.addClassOnOver('x-slider-thumb-over');
         this.mon(this.el, 'mousedown', this.onMouseDown, this);
@@ -36422,7 +36573,7 @@
         this.on('beforedestroy', this.tracker.destroy, this.tracker);
     },
 
-	// private override
+  // private override
     onMouseDown : function(e){
         if(this.disabled) {return;}
         if(this.clickToChange && e.target != this.thumb.dom){
@@ -36432,14 +36583,14 @@
         this.focus();
     },
 
-	// private
+  // private
     onClickChange : function(local){
         if(local.top > this.clickRange[0] && local.top < this.clickRange[1]){
             this.setValue(Math.round(this.reverseValue(local.left)), undefined, true);
         }
     },
-	
-	// private
+
+  // private
     onKeyDown : function(e){
         if(this.disabled){e.preventDefault();return;}
         var k = e.getKey();
@@ -36466,8 +36617,8 @@
                 e.preventDefault();
         }
     },
-	
-	// private
+
+  // private
     doSnap : function(value){
         if(!this.increment || this.increment == 1 || !value) {
             return value;
@@ -36483,8 +36634,8 @@
         }
         return newValue.constrain(this.minValue,  this.maxValue);
     },
-	
-	// private
+
+  // private
     afterRender : function(){
         Ext.Slider.superclass.afterRender.apply(this, arguments);
         if(this.value !== undefined){
@@ -36498,14 +36649,14 @@
         }
     },
 
-	// private
+  // private
     getRatio : function(){
         var w = this.innerEl.getWidth();
         var v = this.maxValue - this.minValue;
         return v == 0 ? w : (w/v);
     },
 
-	// private
+  // private
     normalizeValue : function(v){
        if(typeof v != 'number'){
             v = parseInt(v);
@@ -36516,7 +36667,7 @@
         return v;
     },
 
-	
+
     setValue : function(v, animate, changeComplete){
         v = this.normalizeValue(v);
         if(v !== this.value && this.fireEvent('beforechange', this, v, this.value) !== false){
@@ -36529,18 +36680,18 @@
         }
     },
 
-	// private
+  // private
     translateValue : function(v){
         var ratio = this.getRatio();
         return (v * ratio)-(this.minValue * ratio)-this.halfThumb;
     },
 
-	reverseValue : function(pos){
+  reverseValue : function(pos){
         var ratio = this.getRatio();
         return (pos+this.halfThumb+(this.minValue * ratio))/ratio;
     },
 
-	// private
+  // private
     moveThumb: function(v, animate){
         if(!animate || this.animate === false){
             this.thumb.setLeft(v);
@@ -36549,17 +36700,17 @@
         }
     },
 
-	// private
+  // private
     focus : function(){
         this.focusEl.focus(10);
     },
 
-	// private
+  // private
     onBeforeDragStart : function(e){
         return !this.disabled;
     },
 
-	// private
+  // private
     onDragStart: function(e){
         this.thumb.addClass('x-slider-thumb-drag');
         this.dragging = true;
@@ -36567,14 +36718,14 @@
         this.fireEvent('dragstart', this, e);
     },
 
-	// private
+  // private
     onDrag: function(e){
         var pos = this.innerEl.translatePoints(this.tracker.getXY());
         this.setValue(Math.round(this.reverseValue(pos.left)), false);
         this.fireEvent('drag', this, e);
     },
-	
-	// private
+
+  // private
     onDragEnd: function(e){
         this.thumb.removeClass('x-slider-thumb-drag');
         this.dragging = false;
@@ -36583,7 +36734,7 @@
             this.fireEvent('changecomplete', this, this.value);
         }
     },
-    
+
     //private
     onDisable: function(){
         Ext.Slider.superclass.onDisable.call(this);
@@ -36595,12 +36746,12 @@
             this.thumb.hide();
             this.innerEl.addClass(this.disabledClass).dom.disabled = true;
             if (!this.thumbHolder){
-                this.thumbHolder = this.endEl.createChild({cls: 'x-slider-thumb ' + this.disabledClass});    
+                this.thumbHolder = this.endEl.createChild({cls: 'x-slider-thumb ' + this.disabledClass});
             }
             this.thumbHolder.show().setXY(xy);
         }
     },
-    
+
     //private
     onEnable: function(){
         Ext.Slider.superclass.onEnable.call(this);
@@ -36620,15 +36771,15 @@
         this.innerEl.setWidth(w - (this.el.getPadding('l') + this.endEl.getPadding('r')));
         this.syncThumb();
     },
-    
-    
+
+
     syncThumb : function(){
         if(this.rendered){
             this.moveThumb(this.translateValue(this.value));
         }
     },
-	
-	
+
+
     getValue : function(){
         return this.value;
     }
@@ -36672,24 +36823,24 @@
 };
 
 Ext.StatusBar = Ext.extend(Ext.Toolbar, {
-    
-    
-    
-    
-    
-    
-    
+
+
+
+
+
+
+
     cls : 'x-statusbar',
-    
+
     busyIconCls : 'x-status-busy',
-    
+
     busyText : 'Loading...',
-    
+
     autoClear : 5000,
-    
+
     // private
     activeThreadId : 0,
-    
+
     // private
     initComponent : function(){
         if(this.statusAlign=='right'){
@@ -36697,26 +36848,26 @@
         }
         Ext.StatusBar.superclass.initComponent.call(this);
     },
-    
+
     // private
     afterRender : function(){
         Ext.StatusBar.superclass.afterRender.call(this);
-        
+
         var right = this.statusAlign=='right',
             td = Ext.get(this.nextBlock());
-        
+
         if(right){
             this.tr.appendChild(td.dom);
         }else{
             td.insertBefore(this.tr.firstChild);
         }
-        
+
         this.statusEl = td.createChild({
             cls: 'x-status-text ' + (this.iconCls || this.defaultIconCls || ''),
             html: this.text || this.defaultText || ''
         });
         this.statusEl.unselectable();
-        
+
         this.spacerEl = td.insertSibling({
             tag: 'td',
             style: 'width:100%',
@@ -36724,10 +36875,10 @@
         }, right ? 'before' : 'after');
     },
 
-    
+
     setStatus : function(o){
         o = o || {};
-        
+
         if(typeof o == 'string'){
             o = {text:o};
         }
@@ -36737,12 +36888,12 @@
         if(o.iconCls !== undefined){
             this.setIcon(o.iconCls);
         }
-        
+
         if(o.clear){
             var c = o.clear,
                 wait = this.autoClear,
                 defaults = {useDefaults: true, anim: true};
-            
+
             if(typeof c == 'object'){
                 c = Ext.applyIf(c, defaults);
                 if(c.wait){
@@ -36754,27 +36905,27 @@
             }else if(typeof c == 'boolean'){
                 c = defaults;
             }
-            
+
             c.threadId = this.activeThreadId;
             this.clearStatus.defer(wait, this, [c]);
         }
         return this;
     },
-     
-    
+
+
     clearStatus : function(o){
         o = o || {};
-        
+
         if(o.threadId && o.threadId !== this.activeThreadId){
             // this means the current call was made internally, but a newer
             // thread has set a message since this call was deferred.  Since
             // we don't want to overwrite a newer message just ignore.
             return this;
         }
-        
+
         var text = o.useDefaults ? this.defaultText : '',
             iconCls = o.useDefaults ? (this.defaultIconCls ? this.defaultIconCls : '') : '';
-            
+
         if(o.anim){
             this.statusEl.fadeOut({
                 remove: false,
@@ -36782,25 +36933,25 @@
                 scope: this,
                 callback: function(){
                     this.setStatus({
-	                    text: text, 
-	                    iconCls: iconCls
-	                });
+                      text: text,
+                      iconCls: iconCls
+                  });
                     this.statusEl.show();
                 }
             });
         }else{
             // hide/show the el to avoid jumpy text or icon
             this.statusEl.hide();
-	        this.setStatus({
-	            text: text,
-	            iconCls: iconCls
-	        });
+          this.setStatus({
+              text: text,
+              iconCls: iconCls
+          });
             this.statusEl.show();
         }
         return this;
     },
-    
-    
+
+
     setText : function(text){
         this.activeThreadId++;
         this.text = text || '';
@@ -36809,33 +36960,33 @@
         }
         return this;
     },
-    
-    
+
+
     getText : function(){
         return this.text;
     },
 
-    
+
     setIcon : function(cls){
         this.activeThreadId++;
         cls = cls || '';
-        
+
         if(this.rendered){
-	        if(this.currIconCls){
-	            this.statusEl.removeClass(this.currIconCls);
-	            this.currIconCls = null;
-	        }
-	        if(cls.length > 0){
-	            this.statusEl.addClass(cls);
-	            this.currIconCls = cls;
-	        }
+          if(this.currIconCls){
+              this.statusEl.removeClass(this.currIconCls);
+              this.currIconCls = null;
+          }
+          if(cls.length > 0){
+              this.statusEl.addClass(cls);
+              this.currIconCls = cls;
+          }
         }else{
             this.currIconCls = cls;
         }
         return this;
     },
-    
-    
+
+
     showBusy : function(o){
         if(typeof o == 'string'){
             o = {text:o};
@@ -36923,7 +37074,7 @@
 
     function startUp() {
         currentToken = hiddenField.value ? hiddenField.value : getHash();
-        
+
         if (Ext.isIE) {
             checkIFrame();
         } else {
@@ -36942,14 +37093,14 @@
     }
 
     return {
-        
+
         fieldId: 'x-history-field',
-        
+
         iframeId: 'x-history-frame',
-        
+
         events:{},
 
-        
+
         init: function (onReady, scope) {
             if(ready) {
                 Ext.callback(onReady, scope, [this]);
@@ -36962,7 +37113,7 @@
                 return;
             }
             hiddenField = Ext.getDom(Ext.History.fieldId);
-			if (Ext.isIE) {
+      if (Ext.isIE) {
                 iframe = Ext.getDom(Ext.History.iframeId);
             }
             this.addEvents('ready', 'change');
@@ -36972,7 +37123,7 @@
             startUp();
         },
 
-        
+
         add: function (token, preventDup) {
             if(preventDup !== false){
                 if(this.getToken() == token){
@@ -36987,17 +37138,17 @@
             }
         },
 
-        
+
         back: function(){
             history.go(-1);
         },
 
-        
+
         forward: function(){
             history.go(1);
         },
 
-        
+
         getToken: function() {
             return ready ? currentToken : getHash();
         }
@@ -37040,7 +37191,7 @@
         height:200,
         logView: logView,
         layout: 'fit',
-        
+
         tools:[{
             id: 'close',
             handler: function(){
@@ -37235,7 +37386,7 @@
 
 
         Ext.debug.DomTree.superclass.initComponent.call(this);
-        
+
         // tree related stuff
         var styles = false, hnode;
         var nonSpace = /^\s*$/;
