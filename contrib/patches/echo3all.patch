diff -urb src/client/echo/Render.js /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/client/echo/Render.js
--- src/client/echo/Render.js	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/client/echo/Render.js	2008-11-06 15:42:57.000000000 +0000
@@ -36,6 +36,23 @@
      */
     _disposedComponents: null,
     
+        
+    /**
+     * Listeners to be notified of rendering phase events.
+     * @type Core.ListenerList
+     */
+    _listenerList: new Core.ListenerList(),
+
+    /**
+     * Adds a listener to be notified when the renderDisplay
+     * phase of an update has been completed.
+     * 
+     * @param {Function} l the listener to add
+     */
+    addRenderDisplayCompleteListener: function(l) {
+        Echo.Render._listenerList.addListener("renderDisplayComplete", l);
+    },
+    
     //FIXME.  Scrollbar position tracking code in SplitPane appears to suggest that
     // disposed states are not in good shape....SplitPane is being disposed when
     // parent contentPane is redrawn.
@@ -272,6 +289,11 @@
             }
         }
     
+	// call any listeners that want to know when when the render display phase is finished
+        if (Echo.Render._listenerList.hasListeners("renderDisplayComplete")) {
+            Echo.Render._listenerList.fireEvent({type: "renderDisplayComplete"});
+        }
+    
         // Profiling: Mark completion of display phase.
         if (Echo.Client.profilingTimer) {
             Echo.Client.profilingTimer.mark("disp");
@@ -309,6 +331,15 @@
     },
     
     /**
+     * Removes a renderDisplayCompleteListener.
+     * 
+     * @param {Function} l the listener to remove
+     */
+    removeRenderDisplayCompleteListener: function(l) {
+        this._listenerList.removeListener("renderDisplayComplete", l);
+    },
+    
+    /**
      * Renders a new component inside of a DOM element.
      * This method should be called by container components in order to render their children.
      * 
diff -urb src/server-java/app/META-INF/nextapp/echo/XmlPeers.properties /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/app/META-INF/nextapp/echo/XmlPeers.properties
--- src/server-java/app/META-INF/nextapp/echo/XmlPeers.properties	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/app/META-INF/nextapp/echo/XmlPeers.properties	2008-11-06 15:42:57.000000000 +0000
@@ -16,6 +16,7 @@
 nextapp.echo.app.Insets                      nextapp.echo.app.serial.property.InsetsPeer
 nextapp.echo.app.LayoutData                  nextapp.echo.app.serial.property.LayoutDataPeer
 nextapp.echo.app.ResourceImageReference      nextapp.echo.app.serial.property.ResourceImageReferencePeer
+nextapp.echo.app.HttpImageReference          nextapp.echo.webcontainer.sync.property.HttpImageReferencePeer
 
 nextapp.echo.app.layout.CellLayoutData       nextapp.echo.app.serial.property.CellLayoutDataPeer
 nextapp.echo.app.layout.ColumnLayoutData     nextapp.echo.app.serial.property.ColumnLayoutDataPeer
diff -urb src/server-java/app/nextapp/echo/app/serial/StyleSheetLoader.java /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/app/nextapp/echo/app/serial/StyleSheetLoader.java
--- src/server-java/app/nextapp/echo/app/serial/StyleSheetLoader.java	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/app/nextapp/echo/app/serial/StyleSheetLoader.java	2008-11-06 15:43:48.000000000 +0000
@@ -122,6 +122,9 @@
         // First pass, load style information.
         for (int i = 0; i < styleElements.length; ++i) {
             String name = styleElements[i].getAttribute("n");
+            if ("".equals(name))
+            	name = null;
+            
             if (!styleElements[i].hasAttribute("t")) {
                 throw new SerialException("Component type not specified in style: " + name, null);
             }
diff -urb src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java
--- src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java	2008-11-06 15:43:48.000000000 +0000
@@ -668,7 +668,7 @@
         StyleSheet styleSheet = c.getApplicationInstance().getStyleSheet();
         String styleName = c.getStyleName();
         
-        if (!required && (styleSheet == null || styleName == null)) {
+        if (!required && (styleSheet == null)) {
             return;
         }
         
diff -urb src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js
--- src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js	2008-10-09 12:35:59.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js	2008-11-06 15:42:57.000000000 +0000
@@ -132,6 +132,7 @@
         Echo.Client.call(this);
         
         this._serverUrl = serverUrl;
+        this._listenerList = new Core.ListenerList();
         this._processClientUpdateRef = Core.method(this, this._processClientUpdate);
         this._processClientEventRef = Core.method(this, this._processClientEvent);
         this._urlMappings = {};
@@ -158,6 +159,17 @@
     },
     
     /**
+     * Adds a listener to be notified when a server update has been
+     * completely processed, that is, all component and rendering
+     * updates have been completed.
+     * 
+     * @param {Function} l the listener to add
+     */
+    addServerUpdateCompleteListener: function(l) {
+        this._listenerList.addListener("serverUpdateComplete", l);
+    },
+    
+    /**
      * Decompresses a shorthand URL into a valid full-length URL.
      * A shorthand URL is expressed as "!A!xxxx" where
      * "A" is a key whose value contains the first portion of the URL
@@ -369,6 +381,10 @@
             this._waitIndicatorActive = false;
             this._waitIndicator.deactivate();
         }
+        
+        if (this._listenerList.hasListeners("serverUpdateComplete")) {
+            this._listenerList.fireEvent({type: "serverUpdateComplete"});
+        }
     },
     
     /**
@@ -426,6 +442,15 @@
     },
     
     /**
+     * Removes a ServerUpdateCompleteListener.
+     * 
+     * @param {Function} l the listener to remove
+     */
+    removeServerUpdateCompleteListener: function(l) {
+        this._listenerList.removeListener("serverUpdateComplete", l);
+    },
+
+    /**
      * Sets the wait indicator that will be displayed when a client-server action takes longer than
      * a specified period of time.
      * 
diff -urb src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java
--- src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java	2008-11-06 15:42:57.000000000 +0000
@@ -105,6 +105,21 @@
         styleElement.appendChild(document.createTextNode(" "));
         headElement.appendChild(styleElement);
 
+        WebContainerServlet servlet = conn.getServlet();
+        
+        Iterator cssIt = servlet.getCssFileNames();
+        if (cssIt != null) {
+            while(cssIt.hasNext()) {
+                String cssFileName = (String) cssIt.next();
+                Element additionalStyleElement = document.createElement("link");
+                additionalStyleElement.setAttribute("href", cssFileName);
+                additionalStyleElement.setAttribute("type", "text/css");
+                additionalStyleElement.setAttribute("rel", "stylesheet");
+                additionalStyleElement.appendChild(document.createTextNode(" "));
+                headElement.appendChild(additionalStyleElement);
+            }
+        }
+
         Element scriptElement = document.createElement("script");
         Text textNode = document.createTextNode(" ");
         scriptElement.appendChild(textNode);
@@ -112,7 +127,7 @@
         scriptElement.setAttribute("src", userInstance.getServiceUri(BootService.SERVICE));
         headElement.appendChild(scriptElement);
         
-        WebContainerServlet servlet = conn.getServlet();
+        
         Iterator scriptIt = servlet.getStartupScripts();
         if (scriptIt != null) {
             while (scriptIt.hasNext()) {
@@ -130,7 +145,7 @@
         bodyElement.setAttribute("id", "body");
         bodyElement.setAttribute("onload", "Echo.Boot.boot('" + userInstance.getServletUri() + "', " + debug + ");");
         bodyElement.setAttribute("style",
-                "height:100%;width:100%;margin:0px;padding: 0px;" +
+                "height:100%;width:100%;overflow:hidden;margin:0px;padding: 0px;" +
                 "font-family:verdana, arial, helvetica, sans-serif;font-size:10pt");
         htmlElement.appendChild(bodyElement);
 
diff -urb src/server-java/webcontainer/nextapp/echo/webcontainer/util/IdTable.java /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/util/IdTable.java
--- src/server-java/webcontainer/nextapp/echo/webcontainer/util/IdTable.java	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/util/IdTable.java	2008-11-06 15:42:57.000000000 +0000
@@ -101,6 +101,15 @@
      * <code>IdTable</code>.
      */
     private void purge() {
+        /*
+         * Due to clustering, our transient fields may be null.
+         */
+        if (referenceQueue == null) {
+            referenceQueue = new ReferenceQueue();
+        }
+        if (idToReferenceMap == null) {
+            idToReferenceMap = new HashMap();
+        }
         // Convert any hard references to weak references.
         if (hasHardReferences) {
             synchronized (idToReferenceMap) {
diff -urb src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java
--- src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java	2008-10-09 12:36:00.000000000 +0100
+++ /home/llcolling/workspace/NextApp_Echo3_b2/SourceCode/src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java	2008-11-13 15:21:31.000000000 +0000
@@ -41,9 +41,11 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 
+import java.util.Set;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
@@ -389,4 +391,21 @@
         }
     }
     
+    private Set cssFileNames = new HashSet();
+    
+    /**
+     * Adds a css file name to be added to the window html.
+     */
+    public void addCssFileName(String cssFileName) {
+        cssFileNames.add(cssFileName);
+    }
+    
+    /**
+     * Returns an iterator over the CSS file names.
+     * @return the iterator.
+     */
+    public Iterator getCssFileNames() {
+        return cssFileNames.iterator();
+    }
+    
 }
