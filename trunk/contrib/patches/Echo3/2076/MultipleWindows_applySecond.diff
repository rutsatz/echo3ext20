diff -r 9e3ce0692488 .hgignore
--- a/.hgignore	Wed Apr 22 12:20:12 2009 +0100
+++ b/.hgignore	Mon Apr 27 16:51:56 2009 +0100
@@ -1,1 +1,3 @@
 bin
+build
+dist
diff -r 9e3ce0692488 resource/maven/echo3-app-pom.xml
--- a/resource/maven/echo3-app-pom.xml	Wed Apr 22 12:20:12 2009 +0100
+++ b/resource/maven/echo3-app-pom.xml	Mon Apr 27 16:51:56 2009 +0100
@@ -5,7 +5,7 @@
 	<artifactId>echo3-app</artifactId>
 	<packaging>jar</packaging>
 	<name>Echo3</name>
-	<version>3.0.0-SNAPSHOT</version>
+	<version>1.0-SNAPSHOT</version>
 	<description>Echo3 AJAX Framework</description>
 	<issueManagement>
 		<url>http://bugs.nextapp.com/mantis</url>
diff -r 9e3ce0692488 resource/maven/echo3-webcontainer-pom.xml
--- a/resource/maven/echo3-webcontainer-pom.xml	Wed Apr 22 12:20:12 2009 +0100
+++ b/resource/maven/echo3-webcontainer-pom.xml	Mon Apr 27 16:51:56 2009 +0100
@@ -5,7 +5,7 @@
 	<artifactId>echo3-webcontainer</artifactId>
 	<packaging>jar</packaging>
 	<name>Echo3</name>
-	<version>3.0.0-SNAPSHOT</version>
+	<version>1.0-SNAPSHOT</version>
 	<description>Echo3 AJAX Framework</description>
 	<issueManagement>
 		<url>http://bugs.nextapp.com/mantis</url>
diff -r 9e3ce0692488 src/client/echo/Serial.js
--- a/src/client/echo/Serial.js	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/client/echo/Serial.js	Mon Apr 27 16:51:56 2009 +0100
@@ -532,9 +532,9 @@
     
         /** @see Echo.Serial.PropertyTranslator#toProperty */
         toProperty: function(client, pElement) {
-    	    if (pElement.firstChild.nodeType == 3) { // Text content
-    	        return pElement.firstChild.data;
-    	    } else if (pElement.getAttribute("v")) {
+            if (pElement.firstChild.nodeType == 3) { // Text content
+                return pElement.firstChild.data;
+            } else if (pElement.getAttribute("v")) {
                 return pElement.getAttribute("v");
             } else {
                 var element = Core.Web.DOM.getChildElementByTagName(pElement, "b");
@@ -728,26 +728,26 @@
         /** @see Echo.Serial.PropertyTranslator#toProperty */
         toProperty: function(client, pElement) {
             var url;
-    	    if (pElement.firstChild.nodeType == 1) {
-    	    	var iElement = pElement.firstChild;
-    	        url = iElement.firstChild.data;
-    	        if (client.decompressUrl) {
-    	            url = client.decompressUrl(url);
-    	        }
-    	        var width = iElement.getAttribute("w");
-    	        width = width ? width : null;
-    	        var height = iElement.getAttribute("h");
-    	        height = height ? height : null;
-    	        
-    	        if (width || height) {
-    	            return { url: url, width: width, height: height };
-    	        } else {
-    	            return url;
-    	        }
-    	    } else {
-    	     url = pElement.firstChild.data;
-    	    	return client.decompressUrl ? client.decompressUrl(url) : url;
-    	    }
+            if (pElement.firstChild.nodeType == 1) {
+                var iElement = pElement.firstChild;
+                url = iElement.firstChild.data;
+                if (client.decompressUrl) {
+                    url = client.decompressUrl(url);
+                }
+                var width = iElement.getAttribute("w");
+                width = width ? width : null;
+                var height = iElement.getAttribute("h");
+                height = height ? height : null;
+                
+                if (width || height) {
+                    return { url: url, width: width, height: height };
+                } else {
+                    return url;
+                }
+            } else {
+             url = pElement.firstChild.data;
+                return client.decompressUrl ? client.decompressUrl(url) : url;
+            }
         }
     },
     
diff -r 9e3ce0692488 src/server-java-examples/chatclient/src/java/chatclient/ChatApp.java
--- a/src/server-java-examples/chatclient/src/java/chatclient/ChatApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java-examples/chatclient/src/java/chatclient/ChatApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -30,6 +30,7 @@
 package chatclient;
 
 import java.io.IOException;
+import java.util.Map;
 
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.TaskQueueHandle;
@@ -113,11 +114,11 @@
             if (incomingMessageQueue != null) {
                 throw new IllegalStateException();
             }
-            incomingMessageQueue = createTaskQueue();
+            incomingMessageQueue = Window.getActive().createTaskQueue();
             updatePollingInterval(true);
             lastPostTime = System.currentTimeMillis();
             
-            getDefaultWindow().setContent(new ChatScreen());
+            Window.getActive().setContent(new ChatScreen());
             return true;
         }
     }
@@ -131,11 +132,11 @@
             chatSession.dispose();
             chatSession = null;
             if (incomingMessageQueue != null) {
-                removeTaskQueue(incomingMessageQueue);
+                Window.getActive().removeTaskQueue(incomingMessageQueue);
                 incomingMessageQueue = null;
             }
             logoutWarningDialog = null;
-            getDefaultWindow().setContent(new LoginScreen());
+            Window.getActive().setContent(new LoginScreen());
         } catch (IOException ex) {
             throw new RuntimeException(ex);
         }
@@ -175,8 +176,8 @@
         // Poll server and determine if any new messages have been posted.
         if (pollServer()) {
             // Add new messages to ChatScreen.
-            final ChatScreen chatScreen = (ChatScreen) getDefaultWindow().getContent();
-            enqueueTask(incomingMessageQueue, new Runnable(){
+            final ChatScreen chatScreen = (ChatScreen) Window.getActive().getContent();
+            Window.getActive().enqueueTask(incomingMessageQueue, new Runnable(){
                 public void run() {
                     chatScreen.updateMessageList();
                     updatePollingInterval(true);
@@ -187,7 +188,7 @@
         // Determine if the polling interval should be updated, and if 
         // necessary, queue a task to update it.
         if (pollingInterval != calculatePollingInterval()) {
-            enqueueTask(incomingMessageQueue, new Runnable() {
+            Window.getActive().enqueueTask(incomingMessageQueue, new Runnable() {
                 public void run() {
                     updatePollingInterval(false);
                 }
@@ -197,7 +198,7 @@
         if (System.currentTimeMillis() - lastPostTime > POST_INTERVAL_AUTO_LOGOUT) {
             // If the user has not posted any messages in a period of
             // time, automatically log the user out.
-            enqueueTask(incomingMessageQueue, new Runnable() {
+            Window.getActive().enqueueTask(incomingMessageQueue, new Runnable() {
                 public void run() {
                     disconnect();
                 }
@@ -206,13 +207,13 @@
             // If the user has not posted any messages in a period of
             // time, raise a dialog box to warn him/her that s/he may
             // soon be automatically logged out.
-            enqueueTask(incomingMessageQueue, new Runnable() {
+            Window.getActive().enqueueTask(incomingMessageQueue, new Runnable() {
                 public void run() {
                     if (logoutWarningDialog == null) {
                         logoutWarningDialog = new MessageDialog(Messages.getString("AutoLogoutWarningDialog.Title"),
                                 Messages.getString("AutoLogoutWarningDialog.Message"), MessageDialog.TYPE_CONFIRM, 
                                 MessageDialog.CONTROLS_OK);
-                        getDefaultWindow().getContent().add(logoutWarningDialog);
+                        Window.getActive().getContent().add(logoutWarningDialog);
                         logoutWarningDialog.addActionListener(new ActionListener() {
                         
                             /**
@@ -230,15 +231,15 @@
             });
         }
         
-        return super.hasQueuedTasks();
+        return Window.getActive().hasQueuedTasks();
     }
     
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
+    public Window init(Map parameters) {
         setStyleSheet(Styles.DEFAULT_STYLE_SHEET);
-        Window window = new Window();
+        Window window = new Window(this);
         window.setTitle(Messages.getString("Application.Title.Window"));
         window.setContent(new LoginScreen());
         return window;
diff -r 9e3ce0692488 src/server-java-examples/chatclient/src/java/chatclient/ChatScreen.java
--- a/src/server-java-examples/chatclient/src/java/chatclient/ChatScreen.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java-examples/chatclient/src/java/chatclient/ChatScreen.java	Mon Apr 27 16:51:56 2009 +0100
@@ -37,6 +37,7 @@
 import nextapp.echo.app.Row;
 import nextapp.echo.app.SplitPane;
 import nextapp.echo.app.TextArea;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
 
@@ -111,7 +112,7 @@
         mainSplitPane.add(messagePane);
         
         ChatApp app = ChatApp.getApp();
-        app.setFocusedComponent(postField);
+        Window.getActive().setFocusedComponent(postField);
     }
     
     /**
@@ -130,7 +131,7 @@
             app.postMessage(postField.getText());
         }
         postField.setText("");
-        app.setFocusedComponent(postField);
+        Window.getActive().setFocusedComponent(postField);
         messagePane.update();
     }
 }
diff -r 9e3ce0692488 src/server-java-examples/chatclient/src/java/chatclient/LoginScreen.java
--- a/src/server-java-examples/chatclient/src/java/chatclient/LoginScreen.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java-examples/chatclient/src/java/chatclient/LoginScreen.java	Mon Apr 27 16:51:56 2009 +0100
@@ -38,6 +38,7 @@
 import nextapp.echo.app.Row;
 import nextapp.echo.app.SplitPane;
 import nextapp.echo.app.TextField;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
@@ -128,7 +129,7 @@
         });
         layoutGrid.add(nameField);
         
-        ChatApp.getActive().setFocusedComponent(nameField);
+        Window.getActive().setFocusedComponent(nameField);
     }
     
     /**
@@ -138,7 +139,7 @@
         if (!ChatApp.getApp().connect(nameField.getText())) {
             MessageDialog messageDialog = new MessageDialog(Messages.getString("LoginScreen.InvalidLogin.Title"),
                     Messages.getString("LoginScreen.InvalidLogin.Message"), MessageDialog.TYPE_ERROR, MessageDialog.CONTROLS_OK);
-            getApplicationInstance().getDefaultWindow().getContent().add(messageDialog);
+            Window.getActive().getContent().add(messageDialog);
         }
     }
 }
diff -r 9e3ce0692488 src/server-java-examples/helloworld/src/java/helloworld/HelloWorldApp.java
--- a/src/server-java-examples/helloworld/src/java/helloworld/HelloWorldApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java-examples/helloworld/src/java/helloworld/HelloWorldApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -1,5 +1,7 @@
 package helloworld;
 
+import java.util.Map;
+
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.ContentPane;
 import nextapp.echo.app.Label;
@@ -13,8 +15,8 @@
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
-        Window window = new Window();
+    public Window init(Map parameters) {
+        Window window = new Window(this);
 
         ContentPane contentPane = new ContentPane();
         window.setContent(contentPane);
diff -r 9e3ce0692488 src/server-java-examples/numberguess/src/java/numberguess/NumberGuessApp.java
--- a/src/server-java-examples/numberguess/src/java/numberguess/NumberGuessApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java-examples/numberguess/src/java/numberguess/NumberGuessApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,8 @@
 
 package numberguess;
 
+import java.util.Map;
+
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Button;
 import nextapp.echo.app.Color;
@@ -65,8 +67,8 @@
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
-        window = new Window();
+    public Window init(Map parameters) {
+        window = new Window(this);
         window.setTitle("Echo Guess-A-Number");
         startNewGame();
         return window;
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/ApplicationInstanceTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/ApplicationInstanceTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/ApplicationInstanceTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,8 @@
 
 package nextapp.echo.app.test;
 
+import java.util.Map;
+
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Column;
 import nextapp.echo.app.Component;
@@ -103,7 +105,7 @@
         ColumnApp columnApp = new ColumnApp();
         ApplicationInstance.setActive(columnApp);
         
-        Window window = columnApp.doInit();
+        Window window = columnApp.doInit(null, true);
         assertTrue(window.isRegistered());
         assertTrue(columnApp.getColumn().isRegistered());
         Label label = new Label();
@@ -127,7 +129,7 @@
     public void testRegistrationLifecycle() {
         ColumnApp columnApp = new ColumnApp();
         ApplicationInstance.setActive(columnApp);
-        columnApp.doInit();
+        columnApp.doInit(null, true);
         Column column = columnApp.getColumn();
 
         RegistrationTestComponent rtc = new RegistrationTestComponent();
@@ -161,14 +163,14 @@
         
         ColumnApp columnApp = new ColumnApp(){
         
-            public Window init() {
-                Window window = super.init();
+            public Window init(Map parameters) {
+                Window window = super.init(parameters);
                 getColumn().add(rtc);
                 return window;
             }
         };
         ApplicationInstance.setActive(columnApp);
-        columnApp.doInit();
+        columnApp.doInit(null, true);
 
         assertEquals(1, rtc.initCount);
         assertEquals(0, rtc.disposeCount);
@@ -183,8 +185,8 @@
     public void testValidation() {
         final ValidatingLabel validatingLabel = new ValidatingLabel();
         ColumnApp app = new ColumnApp() {
-            public Window init() {
-                Window window = super.init();
+            public Window init(Map parameters) {
+                Window window = super.init(parameters);
                 getColumn().add(validatingLabel);
                 return window;
             }
@@ -194,7 +196,7 @@
         
         ApplicationInstance.setActive(app);
         
-        app.doInit();
+        app.doInit(null, true);
         
         // Test for initial validation.
         assertTrue(validatingLabel.valid);
@@ -203,7 +205,8 @@
         assertFalse(validatingLabel.valid);
         
         // test validation after client update processing.
-        app.getUpdateManager().processClientUpdates();
+        
+        app.getWindow(0).getUpdateManager().processClientUpdates();
         assertTrue(validatingLabel.valid);
         
         ApplicationInstance.setActive(null);
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/ApplicationStyleTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/ApplicationStyleTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/ApplicationStyleTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -46,7 +46,7 @@
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
         
-        app.doInit();
+        app.doInit(null, true);
         assertTrue(app.getLabel().isRegistered());
         
         MutableStyleSheet styleSheet = new MutableStyleSheet();
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/ColumnApp.java
--- a/src/server-java/app-test/nextapp/echo/app/test/ColumnApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/ColumnApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,8 @@
 
 package nextapp.echo.app.test;
 
+import java.util.Map;
+
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Column;
 import nextapp.echo.app.ContentPane;
@@ -51,8 +53,8 @@
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
-        window = new Window();
+    public Window init(Map parameters) {
+        window = new Window(this);
         contentPane = window.getContent();
         column = new Column();
         label = new Label("Label");
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/ComponentTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/ComponentTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/ComponentTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -327,7 +327,7 @@
     public void testLifecycleSingleComponent() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         
         LifecycleTestComponent ltc1 = new LifecycleTestComponent();
         assertEquals(0, ltc1.getInitCount());
@@ -361,7 +361,7 @@
     public void testLifecycleComponentHierarchy() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         
         LifecycleTestComponent ltc1 = new LifecycleTestComponent();
         LifecycleTestComponent ltc2 = new LifecycleTestComponent();
@@ -431,7 +431,7 @@
     public void testLifecycleRemoveDuringInit() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         
         LifecycleTestComponent special = new LifecycleTestComponent(){
         
@@ -459,7 +459,7 @@
     public void testLifecycleAddDuringDispose() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         
         LifecycleTestComponent special = new LifecycleTestComponent(){
         
@@ -566,7 +566,7 @@
     public void testRenderId() {
         ColumnApp app1 = new ColumnApp();
         ApplicationInstance.setActive(app1);
-        app1.doInit();
+        app1.doInit(null, true);
         NullComponent component1 = new NullComponent();
         assertNull(component1.getRenderId());
         app1.getColumn().add(component1);
@@ -576,7 +576,7 @@
 
         ColumnApp app2 = new ColumnApp();
         ApplicationInstance.setActive(app2);
-        app2.doInit();
+        app2.doInit(null, true);
         NullComponent component2 = new NullComponent();
         assertNull(component2.getRenderId());
         app2.getColumn().add(component2);
@@ -604,7 +604,7 @@
     public void testRenderEnabled() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         assertTrue(app.getContentPane().isRenderEnabled());
         assertTrue(app.getColumn().isRenderEnabled());
         assertTrue(app.getLabel().isRenderEnabled());
@@ -633,7 +633,7 @@
     public void testRenderVisible() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         assertTrue(app.getContentPane().isRenderVisible());
         assertTrue(app.getColumn().isRenderVisible());
         assertTrue(app.getLabel().isRenderVisible());
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/FocusTraversalTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/FocusTraversalTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/FocusTraversalTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -38,7 +38,7 @@
     public void test1() {
         ColumnApp app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
         Button a = new Button();
         a.setRenderId("a");
         app.getColumn().add(a);
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/HelloWorldApp.java
--- a/src/server-java/app-test/nextapp/echo/app/test/HelloWorldApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/HelloWorldApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,8 @@
 
 package nextapp.echo.app.test;
 
+import java.util.Map;
+
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.ContentPane;
 import nextapp.echo.app.Label;
@@ -46,8 +48,8 @@
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
-        window = new Window();
+    public Window init(Map parameters) {
+        window = new Window(this);
         content = window.getContent();
         label = new Label("Hello, world!");
         content.add(label);
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/LayoutDirectionTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/LayoutDirectionTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/LayoutDirectionTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -54,7 +54,7 @@
     public void setUp() {
         app = new ColumnApp();
         ApplicationInstance.setActive(app);        
-        app.doInit();
+        app.doInit(null, true);
     }
     
     /**
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/ModalTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/ModalTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/ModalTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -31,6 +31,7 @@
 
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.ContentPane;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import junit.framework.TestCase;
 
@@ -48,7 +49,7 @@
     public void setUp() {
         app = new ColumnApp();
         ApplicationInstance.setActive(app);
-        app.doInit();
+        app.doInit(null, true);
     }
     
     /**
@@ -66,23 +67,23 @@
         WindowPane windowPane = new WindowPane();
         windowPane.setModal(true);
 
-        assertNull(app.getModalContextRoot());
+        assertNull(Window.getActive().getModalContextRoot());
 
-        app.getDefaultWindow().getContent().add(windowPane);
-        assertEquals(windowPane, app.getModalContextRoot());
+        Window.getActive().getContent().add(windowPane);
+        assertEquals(windowPane, Window.getActive().getModalContextRoot());
 
-        app.getDefaultWindow().getContent().remove(windowPane);
-        assertNull(app.getModalContextRoot());
+        Window.getActive().getContent().remove(windowPane);
+        assertNull(Window.getActive().getModalContextRoot());
         
         windowPane.setModal(false);
-        app.getDefaultWindow().getContent().add(windowPane);
-        assertNull(app.getModalContextRoot());
+        Window.getActive().getContent().add(windowPane);
+        assertNull(Window.getActive().getModalContextRoot());
         
         windowPane.setModal(true);
-        assertEquals(windowPane, app.getModalContextRoot());
+        assertEquals(windowPane, Window.getActive().getModalContextRoot());
 
         windowPane.setModal(false);
-        assertNull(app.getModalContextRoot());
+        assertNull(Window.getActive().getModalContextRoot());
     }
     
     /**
@@ -91,23 +92,23 @@
     public void testInvisibleModal() {
         WindowPane windowPane = new WindowPane();
         windowPane.setModal(true);
-        app.getDefaultWindow().getContent().add(windowPane);
-        assertEquals(windowPane, app.getModalContextRoot());
+        Window.getActive().getContent().add(windowPane);
+        assertEquals(windowPane, Window.getActive().getModalContextRoot());
         
         windowPane.setVisible(false);
-        assertEquals(null, app.getModalContextRoot());
+        assertEquals(null, Window.getActive().getModalContextRoot());
         
         windowPane.setVisible(true);
-        assertEquals(windowPane, app.getModalContextRoot());
+        assertEquals(windowPane, Window.getActive().getModalContextRoot());
         
-        app.getDefaultWindow().getContent().remove(windowPane);
+        Window.getActive().getContent().remove(windowPane);
         windowPane.setVisible(false);
-        app.getDefaultWindow().getContent().add(windowPane);
-        assertEquals(null, app.getModalContextRoot());
+        Window.getActive().getContent().add(windowPane);
+        assertEquals(null, Window.getActive().getModalContextRoot());
     }
     
     public void testMultipleModals() {
-        ContentPane rootContent = app.getDefaultWindow().getContent();
+        ContentPane rootContent = Window.getActive().getContent();
         
         WindowPane a = new WindowPane();
         a.setModal(true);
@@ -121,15 +122,15 @@
         rootContent.add(a);
         rootContent.add(b);
         
-        assertEquals(b, app.getModalContextRoot());
+        assertEquals(b, Window.getActive().getModalContextRoot());
         
         rootContent.add(c);
 
-        assertEquals(c, app.getModalContextRoot());
+        assertEquals(c, Window.getActive().getModalContextRoot());
         
         c.setModal(false);
         
-        assertEquals(b, app.getModalContextRoot());
+        assertEquals(b, Window.getActive().getModalContextRoot());
         
         ContentPane cContent = new ContentPane();
         c.add(cContent);
@@ -138,7 +139,7 @@
         c1.setModal(true);
         cContent.add(c1);
         
-        assertEquals(c1, app.getModalContextRoot());
+        assertEquals(c1, Window.getActive().getModalContextRoot());
         
         ContentPane bContent = new ContentPane();
         b.add(bContent);
@@ -146,26 +147,26 @@
         WindowPane b1 = new WindowPane();
         bContent.add(b1);
         
-        assertEquals(c1, app.getModalContextRoot());
+        assertEquals(c1, Window.getActive().getModalContextRoot());
         
         b1.setModal(true);
 
-        assertEquals(c1, app.getModalContextRoot());
+        assertEquals(c1, Window.getActive().getModalContextRoot());
         
         c.setModal(true);
 
-        assertEquals(c1, app.getModalContextRoot());
+        assertEquals(c1, Window.getActive().getModalContextRoot());
         
         c.setModal(true);
 
-        assertEquals(c1, app.getModalContextRoot());
+        assertEquals(c1, Window.getActive().getModalContextRoot());
         
         c1.setModal(false);
         
-        assertEquals(c, app.getModalContextRoot());
+        assertEquals(c, Window.getActive().getModalContextRoot());
 
         c.setVisible(false);
         
-        assertEquals(b1, app.getModalContextRoot());
+        assertEquals(b1, Window.getActive().getModalContextRoot());
     }
 }
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/UpdateManagerTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/UpdateManagerTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/UpdateManagerTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -40,6 +40,7 @@
 import nextapp.echo.app.Component;
 import nextapp.echo.app.Label;
 import nextapp.echo.app.TextField;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.layout.ColumnLayoutData;
 import nextapp.echo.app.update.PropertyUpdate;
 import nextapp.echo.app.update.ServerComponentUpdate;
@@ -72,8 +73,8 @@
     public void setUp() {
         columnApp = new ColumnApp();
         ApplicationInstance.setActive(columnApp);        
-        columnApp.doInit();
-        manager = columnApp.getUpdateManager();
+        columnApp.doInit(null, true);
+        manager = columnApp.getWindow(0).getUpdateManager();
     }
     
     /**
@@ -87,7 +88,7 @@
      * Test adding children to an parent that is being added in current 
      * transaction.
      */
-    public void testAddChlidToAddedParent() {
+    public void testAddChildToAddedParent() {
         ServerComponentUpdate[] componentUpdates;
         Component[] addedChildren;
         manager.purge();
@@ -155,9 +156,9 @@
      */
     public void testApplicationPropertyUpdate() {
         manager.purge();
-        columnApp.setFocusedComponent(columnApp.getLabel());
+        columnApp.getActiveWindows()[0].setFocusedComponent(columnApp.getLabel());
         PropertyUpdate propertyUpdate = manager.getServerUpdateManager().getApplicationPropertyUpdate(
-                ApplicationInstance.FOCUSED_COMPONENT_CHANGED_PROPERTY);
+                Window.FOCUSED_COMPONENT_CHANGED_PROPERTY);
         assertNotNull(propertyUpdate);
         assertNull(propertyUpdate.getOldValue());
         assertEquals(columnApp.getLabel(), propertyUpdate.getNewValue());
@@ -171,14 +172,14 @@
      */
     public void testApplicationPropertyUpdateWithDifferentClientUpdate() {
         manager.purge();
-        manager.getClientUpdateManager().setApplicationProperty(ApplicationInstance.FOCUSED_COMPONENT_CHANGED_PROPERTY, 
+        manager.getClientUpdateManager().setApplicationProperty(Window.FOCUSED_COMPONENT_CHANGED_PROPERTY, 
                 columnApp.getColumn());
         manager.processClientUpdates();
-        assertEquals(columnApp.getColumn(), columnApp.getFocusedComponent());
+        assertEquals(columnApp.getColumn(), columnApp.getActiveWindows()[0].getFocusedComponent());
         
-        columnApp.setFocusedComponent(columnApp.getLabel());
+        columnApp.getActiveWindows()[0].setFocusedComponent(columnApp.getLabel());
         PropertyUpdate propertyUpdate = manager.getServerUpdateManager().getApplicationPropertyUpdate(
-                ApplicationInstance.FOCUSED_COMPONENT_CHANGED_PROPERTY);
+                Window.FOCUSED_COMPONENT_CHANGED_PROPERTY);
         assertNotNull(propertyUpdate);
         assertEquals(columnApp.getColumn(), propertyUpdate.getOldValue());
         assertEquals(columnApp.getLabel(), propertyUpdate.getNewValue());
@@ -191,12 +192,12 @@
      */
     public void testApplicationPropertyUpdateWithEquivalentClientUpdate() {
         manager.purge();
-        manager.getClientUpdateManager().setApplicationProperty(ApplicationInstance.FOCUSED_COMPONENT_CHANGED_PROPERTY, 
+        manager.getClientUpdateManager().setApplicationProperty(Window.FOCUSED_COMPONENT_CHANGED_PROPERTY, 
                 columnApp.getLabel());
         manager.processClientUpdates();
-        assertEquals(columnApp.getLabel(), columnApp.getFocusedComponent());
+        assertEquals(columnApp.getLabel(), columnApp.getActiveWindows()[0].getFocusedComponent());
         PropertyUpdate propertyUpdate = manager.getServerUpdateManager().getApplicationPropertyUpdate(
-                ApplicationInstance.FOCUSED_COMPONENT_CHANGED_PROPERTY);
+                Window.FOCUSED_COMPONENT_CHANGED_PROPERTY);
         assertNull(propertyUpdate);
     }
 
@@ -207,7 +208,7 @@
         Command command = new ExampleCommand();
 
         manager.purge();
-        columnApp.enqueueCommand(command);
+        columnApp.getActiveWindows()[0].enqueueCommand(command);
 
         // Test basic command queuing.
         assertEquals(1, manager.getServerUpdateManager().getCommands().length);
@@ -225,7 +226,7 @@
         assertEquals(0, manager.getServerUpdateManager().getCommands().length);
 
         manager.getServerUpdateManager().processFullRefresh();
-        columnApp.enqueueCommand(command);
+        columnApp.getActiveWindows()[0].enqueueCommand(command);
         
         // Ensure commands can be enqueued even if a full refresh is present.
         assertEquals(1, manager.getServerUpdateManager().getCommands().length);
diff -r 9e3ce0692488 src/server-java/app-test/nextapp/echo/app/test/WindowTest.java
--- a/src/server-java/app-test/nextapp/echo/app/test/WindowTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app-test/nextapp/echo/app/test/WindowTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -44,7 +44,7 @@
      * Tests changing content of window.
      */
     public void testChangeContent() {
-        Window window = new Window();
+        Window window = new Window(null);
         window.setContent(new ContentPane());
         ContentPane content = new ContentPane();
         window.setContent(content);
@@ -56,7 +56,7 @@
      * <code>Window</code>, tests for failure.
      */
     public void testOverload() {
-        Window window = new Window();
+        Window window = new Window(null);
         window.removeAll();
         window.add(new ContentPane());
         boolean exceptionThrown = false;
@@ -73,7 +73,7 @@
      * <code>Window</code>, tests for failure.
      */
     public void testInvalidChild() {
-        Window window = new Window();
+        Window window = new Window(null);
         window.removeAll();
         boolean exceptionThrown = false;
         try {
@@ -88,7 +88,7 @@
      * Tests property accessors and mutators.
      */
     public void testProperties() {
-        Window window = new Window();
+        Window window = new Window(null);
         window.setTitle("Title!!!");
         assertEquals("Title!!!", window.getTitle());
     }
diff -r 9e3ce0692488 src/server-java/app/META-INF/nextapp/echo/SerialPeers.properties
--- a/src/server-java/app/META-INF/nextapp/echo/SerialPeers.properties	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/META-INF/nextapp/echo/SerialPeers.properties	Mon Apr 27 16:51:56 2009 +0100
@@ -18,7 +18,7 @@
 nextapp.echo.app.Insets                      nextapp.echo.app.serial.property.InsetsPeer
 nextapp.echo.app.LayoutData                  nextapp.echo.app.serial.property.LayoutDataPeer
 nextapp.echo.app.ResourceImageReference      nextapp.echo.app.serial.property.ResourceImageReferencePeer
-nextapp.echo.app.HttpImageReference          nextapp.echo.webcontainer.sync.property.HttpImageReferencePeer
+nextapp.echo.app.HttpImageReference          nextapp.echo.app.serial.property.HttpImageReferencePeer
 
 nextapp.echo.app.layout.CellLayoutData       nextapp.echo.app.serial.property.CellLayoutDataPeer
 nextapp.echo.app.layout.ColumnLayoutData     nextapp.echo.app.serial.property.ColumnLayoutDataPeer
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/ApplicationInstance.java
--- a/src/server-java/app/nextapp/echo/app/ApplicationInstance.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/ApplicationInstance.java	Mon Apr 27 16:51:56 2009 +0100
@@ -32,18 +32,12 @@
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.Serializable;
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Set;
 
-import nextapp.echo.app.update.ServerUpdateManager;
-import nextapp.echo.app.update.UpdateManager;
+import nextapp.echo.app.command.BrowserCloseWindowCommand;
+import nextapp.echo.app.command.OpenEcho3WindowCommand;
 import nextapp.echo.app.util.Uid;
 
 /**
@@ -58,9 +52,7 @@
     /** The name and version of the Echo API in use. */
     public static final String ID_STRING = "NextApp Echo v3.0.b7";
 
-    public static final String FOCUSED_COMPONENT_CHANGED_PROPERTY = "focusedComponent";
     public static final String LOCALE_CHANGED_PROPERTY = "locale";
-    public static final String MODAL_COMPONENTS_CHANGED_PROPERTY = "modalComponents";
     public static final String STYLE_SHEET_CHANGED_PROPERTY = "styleSheet";
     public static final String WINDOWS_CHANGED_PROPERTY = "windows";
     
@@ -71,31 +63,6 @@
     private static final ThreadLocal activeInstance = new ThreadLocal();
     
     /**
-     * Determines the current modal component by searching the entire hierarchy for modal components.
-     * This operation is only performed when multiple visibly rendered components are registered as modal.
-     * 
-     * @param searchComponent the root <code>Component</code> at which to start the search.
-     * @param visibleModalComponents the set of visible modal components
-     * @return the current modal component
-     */
-    private static Component findCurrentModalComponent(Component searchComponent, Set visibleModalComponents) {
-        int count = searchComponent.getComponentCount();
-        for (int i = count - 1; i >= 0; --i) {
-            Component foundComponent = findCurrentModalComponent(searchComponent.getComponent(i), visibleModalComponents);
-            if (foundComponent != null) {
-                return foundComponent;
-            }
-        }
-
-        if (searchComponent instanceof ModalSupport && ((ModalSupport) searchComponent).isModal()
-                 && visibleModalComponents.contains(searchComponent)) {
-            return searchComponent;
-        }
-        
-        return null;
-    }
-    
-    /**
      * Generates a system-level identifier (an identifier which is unique to all
      * <code>ApplicationInstance</code>s).
      * 
@@ -131,11 +98,6 @@
     }
 
     /**
-     * The presently focused component.
-     */
-    private transient WeakReference focusedComponent;
-
-    /** 
      * The default <code>Locale</code> of the application.
      * This <code>Locale</code> will be inherited by <code>Component</code>s. 
      */
@@ -156,54 +118,37 @@
     private Map context;
     
     /**
-     * Mapping from the render ids of all registered components to the 
-     * <code>Component</code> instances themselves.
-     */
-    private Map renderIdToComponentMap;
-    
-    /**
-     * Mapping between <code>TaskQueueHandle</code>s and <code>List</code>s
-     * of <code>Runnable</code> tasks.  Values may be null if a particular 
-     * <code>TaskQueue</code> does not contain any tasks. 
-     */
-    private HashMap taskQueueMap;
-    
-    /**
      * Fires property change events for the instance object.
      */
     private PropertyChangeSupport propertyChangeSupport;
-
-    /**
-     * The <code>UpdateManager</code> handling updates to/from this application.
-     */
-    private UpdateManager updateManager;
     
     /**
-     * The top-level <code>Window</code>.
-     * Currently only one top-level is supported per 
-     * <code>ApplicationInstance</code>.
+     * The active top-level <code>Window</code> instances.
      */
-    private Window defaultWindow;
+    private Window[] activeWindows;
+    
+    /**
+     * The top-level windows that will close on the next interaction
+     */
+    private Window[] closingWindows;
     
     /**
      * The <code>StyleSheet</code> used by the application.
      */
     private StyleSheet styleSheet;
+    
+    /**
+     * Whether the application automatically copes with asynchronous window updates
+     * as default in a multi-window application
+     */
+    private boolean allowAsyncWindowUpdates = true;
+    
+    /**
+     * The system-generated id of the default window
+     */
+    private String defaultWindowId = null;
 
     /**
-     * Collection of modal components, the last index representing the current
-     * modal context.
-     */
-    private List modalComponents;
-    
-    /**
-     * The next available sequentially generated 
-     * <code>ApplicationInstance</code>-unique identifier value.
-     * @see #generateId()
-     */
-    private long nextId;
-    
-    /** 
      * Creates an <code>ApplicationInstance</code>. 
      */
     public ApplicationInstance() {
@@ -213,9 +158,6 @@
         layoutDirection = LayoutDirection.forLocale(locale);
         
         propertyChangeSupport = new PropertyChangeSupport(this);
-        updateManager = new UpdateManager(this);
-        renderIdToComponentMap = new HashMap();
-        taskQueueMap = new HashMap();
     }
     
     /**
@@ -227,6 +169,15 @@
     }
 
     /**
+     * Processes client input specific to the <code>ApplicationInstance</code> 
+     * received from the <code>UpdateManager</code>.
+     * Derivative implementations should take care to invoke 
+     * <code>super.processInput()</code>.
+     */
+    public void processInput(String propertyName, Object propertyValue) {
+    }
+
+    /**
      * Adds a <code>PropertyChangeListener</code> to receive notification of
      * application-level property changes.
      * 
@@ -237,38 +188,15 @@
     }
     
     /**
-     * Creates a new task queue.  A handle object representing the created task
-     * queue is returned.  The created task queue will remain active until it is
-     * provided to the <code>removeTaskQueue()</code> method.  Developers must
-     * take care to invoke <code>removeTaskQueue()</code> on any created
-     * task queues.
-     * 
-     * @return a <code>TaskQueueHandler</code> representing the created task 
-     *         queue
-     * @see #removeTaskQueue(TaskQueueHandle)
-     */
-    public TaskQueueHandle createTaskQueue() {
-        TaskQueueHandle taskQueue = new TaskQueueHandle() { 
-            /** Serial Version UID. */
-            private static final long serialVersionUID = 20070101L;
-        };
-        synchronized (taskQueueMap) {
-            taskQueueMap.put(taskQueue, null);
-        }
-        return taskQueue;
-    }
-    
-    /**
      * Invoked when the application is disposed and will not be used again.
      * Implementations must invoke <code>super.dispose()</code>.
      */
     public void dispose() {
-        if (defaultWindow != null) {
-            defaultWindow.doDispose();
-            defaultWindow.register(null);
-        }
-        synchronized (taskQueueMap) {
-            taskQueueMap.clear();
+        if (activeWindows == null)
+            return;
+        for (int i = 0; i < activeWindows.length; i++) {
+            activeWindows[i].doDispose();
+            activeWindows[i].register(null, null);
         }
     }
 
@@ -276,26 +204,33 @@
      * Initializes the <code>ApplicationInstance</code>. This method is
      * invoked by the application container.
      * 
+     * @param parameters The parameters initially passed to the application
+     * @param allowAsyncWindowUpdates Whether asynchronous updates will be 
+     *                                automatically handled in a multiple window 
+     *                                situation
      * @return the default <code>Window</code> of the application
      * @throws IllegalStateException in the event that the current thread is not
      *         permitted to update the state of the user interface
      */
-    public final Window doInit() {
+    public final Window doInit(Map parameters, boolean allowAsyncWindowUpdates) {
         if (this != activeInstance.get()) {
             throw new IllegalStateException(
                     "Attempt to update state of application user interface outside of user interface thread.");
         }
-        Window window = init();
-        setDefaultWindow(window);
+        this.allowAsyncWindowUpdates = allowAsyncWindowUpdates;
+        Window window = init(parameters);
+        addWindow(window);
         doValidation();
         return window;
     }
-    
+
     /**
      * Validates all components registered with the application.
      */
     public final void doValidation() {
-        doValidation(defaultWindow);
+        for (int i = 0; i < activeWindows.length; i++) {
+            doValidation(activeWindows[i]);
+        }
     }
     
     /**
@@ -315,38 +250,6 @@
     }
 
     /**
-     * Queues the given stateless <code>Command</code> for execution on the 
-     * current client/server synchronization.
-     * 
-     * @param command the <code>Command</code> to execute
-     */
-    public void enqueueCommand(Command command) {
-        updateManager.getServerUpdateManager().enqueueCommand(command);
-    }
-    
-    /**
-     * Enqueues a task to be run during the next client/server 
-     * synchronization.  The task will be run 
-     * <b>synchronously</b> in the user interface update thread.
-     * Enqueuing a task in response to an external event will result 
-     * in changes being pushed to the client.
-     * 
-     * @param taskQueue the <code>TaskQueueHandle</code> representing the
-     *        queue into which this task should be placed
-     * @param task the task to run on client/server synchronization
-     */
-    public void enqueueTask(TaskQueueHandle taskQueue, Runnable task) {
-        synchronized (taskQueueMap) {
-            List taskList = (List) taskQueueMap.get(taskQueue);
-            if (taskList == null) {
-                taskList = new ArrayList();
-                taskQueueMap.put(taskQueue, taskList);
-            }
-            taskList.add(task);
-        }
-    }
-    
-    /**
      * Reports a bound property change.
      *
      * @param propertyName the name of the changed property
@@ -358,18 +261,6 @@
     }
     
     /**
-     * Generates an identifier which is unique within this 
-     * <code>ApplicationInstance</code>.  This identifier should not be
-     * used outside of the context of this  <code>ApplicationInstance</code>.
-     * 
-     * @return the unique identifier
-     * @see #generateSystemId()
-     */
-    public String generateId() {
-        return Long.toString(nextId++);
-    }
-    
-    /**
      * Returns the value of a contextual property.
      * Contextual properties are typically set by an application
      * container, e.g., the Web Container, in order to provide
@@ -385,37 +276,12 @@
     }
 
     /**
-     * Retrieves the component currently registered with the application 
-     * with the specified render id.
+     * Returns a window of the application.
      * 
-     * @param renderId the render id of the component
-     * @return the component (or null if no component with the specified
-     *         render id is registered)
+     * @return the <code>Window</code>
      */
-    public Component getComponentByRenderId(String renderId) {
-        return (Component) renderIdToComponentMap.get(renderId);
-    }
-
-    /**
-     * Returns the default window of the application.
-     * 
-     * @return the default <code>Window</code>
-     */
-    public Window getDefaultWindow() {
-        return defaultWindow;
-    }
-    
-    /**
-     * Returns the presently focused component, if known.
-     * 
-     * @return the focused component
-     */
-    public Component getFocusedComponent() {
-        if (focusedComponent == null) {
-            return null;
-        } else {
-            return (Component) focusedComponent.get();
-        }
+    public Window getWindow(int index) {
+        return activeWindows[index];
     }
     
     /**
@@ -438,36 +304,6 @@
     }
     
     /**
-     * Retrieves the root component of the current modal context, or null
-     * if no modal context exists.  Components which are not within the 
-     * descendant hierarchy of the modal context are barred from receiving
-     * user input.
-     * 
-     * @return the root component of the modal context
-     */
-    public Component getModalContextRoot() {
-        if (modalComponents == null || modalComponents.size() == 0) {
-            // No components marked as modal.
-            return null;
-        } else if (modalComponents.size() == 1) {
-            // One component marked as modal, return it if visible, null otherwise.
-            Component component = (Component) modalComponents.get(0);
-            return component.isRenderVisible() ? component : null;
-        }
-
-        // Multiple modal components.
-        Set visibleModalComponents = new HashSet();
-        for (int i = modalComponents.size() - 1; i >= 0; --i) {
-            Component component = (Component) modalComponents.get(i);
-            if (component.isRenderVisible()) {
-                visibleModalComponents.add(component);
-            }
-        }
-        
-        return findCurrentModalComponent(getDefaultWindow(), visibleModalComponents);  
-    }
-    
-    /**
      * Retrieves the style for the specified specified class of 
      * component / style name.
      * 
@@ -494,123 +330,13 @@
     }
     
     /**
-     * Retrieves the <code>UpdateManager</code> being used to manage the
-     * client/server synchronization of this <code>ApplicationInstance</code>
-     * 
-     * @return the <code>UpdateManager</code>
-     */
-    public UpdateManager getUpdateManager() {
-        return updateManager;
-    }
-    
-    /**
-     * Determines if this <code>ApplicationInstance</code> currently has any 
-     * active tasks queues, which might be monitoring external events.
-     * 
-     * @return true if the instance has any task queues
-     */
-    public final boolean hasTaskQueues() {
-        return taskQueueMap.size() > 0;
-    }
-    
-    /**
-     * Determines if there are any queued tasks in any of the task
-     * queues associated with this <code>ApplicationInstance</code>.
-     * <p>
-     * This method may be overridden by an application in order to check
-     * on the status of long-running operations and enqueue tasks 
-     * just-in-time.  In such cases tasks should be <strong>enqueued</strong>
-     * and the value of <code>super.hasQueuedTasks()</code> should be 
-     * returned.  This method is not invoked by a user-interface thread and
-     * thus the component hierarchy may not be modified in
-     * overriding implementations.
-     * 
-     * @return true if any tasks are queued
-     */
-    public boolean hasQueuedTasks() {
-        if (taskQueueMap.size() == 0) {
-            return false;
-        }
-        Iterator it = taskQueueMap.values().iterator();
-        while (it.hasNext()) {
-            List taskList = (List) it.next();
-            if (taskList != null && taskList.size() > 0) {
-                return true;
-            }
-        }
-        return false;
-    }
-    
-    /**
-     * Determines if the given component is modal (i.e., that only components
-     * below it in the hierarchy should be enabled).
-     * 
-     * @param component the <code>Component</code>
-     * @return true if the <code>Component</code> is modal 
-     */
-    private boolean isModal(Component component) {
-        return modalComponents != null && modalComponents.contains(component);
-    }
-    
-    /**
-     * Invoked to initialize the application, returning the default window.
+     * Invoked to initialize the default top-level window of the application.
      * The returned window must be visible.
      *
-     * @return the default window of the application
+     * @param parameters The initial parameters passed via the connection url
+     * @return the default top-level window of the application
      */
-    public abstract Window init();
-    
-    /**
-     * Notifies the <code>UpdateManager</code> in response to a component 
-     * property change or child addition/removal.
-     * <p>
-     * This method is invoked directly from <code>Component</code>s
-     * (rather than using a <code>PropertyChangeListener</code>) in the interest
-     * of memory efficiency. 
-     * 
-     * @param parent the parent/updated component
-     * @param propertyName the name of the property changed
-     * @param oldValue the previous value of the property 
-     *        (or the removed component in the case of a
-     *        <code>CHILDREN_CHANGED_PROPERTY</code>)
-     * @param newValue the new value of the property 
-     *        (or the added component in the case of a
-     *        <code>CHILDREN_CHANGED_PROPERTY</code>)
-     * @throws IllegalStateException in the event that the current thread is not
-     *         permitted to update the state of the user interface
-     */
-    void notifyComponentPropertyChange(Component parent, String propertyName, Object oldValue, Object newValue) {
-        // Ensure current thread is a user interface thread.
-        if (this != activeInstance.get()) {
-            throw new IllegalStateException(
-                    "Attempt to update state of application user interface outside of user interface thread.");
-        }
-
-        ServerUpdateManager serverUpdateManager = updateManager.getServerUpdateManager();
-        if (Component.CHILDREN_CHANGED_PROPERTY.equals(propertyName)) {
-            if (newValue == null) {
-                serverUpdateManager.processComponentRemove(parent, (Component) oldValue);
-            } else {
-                serverUpdateManager.processComponentAdd(parent, (Component) newValue);
-            }
-        } else if (Component.PROPERTY_LAYOUT_DATA.equals(propertyName)) {
-            serverUpdateManager.processComponentLayoutDataUpdate(parent);
-        } else if (Component.VISIBLE_CHANGED_PROPERTY.equals(propertyName)) {
-            if (oldValue != null && newValue != null && oldValue.equals(newValue)) {
-                return;
-            }
-            serverUpdateManager.processComponentVisibilityUpdate(parent);
-        } else {
-            if ((oldValue == null && newValue == null) 
-                || (oldValue != null && newValue != null && !parent.isComplexProperty(propertyName) && oldValue.equals(newValue))) {
-                return;
-            }
-            if (parent instanceof ModalSupport && ModalSupport.MODAL_CHANGED_PROPERTY.equals(propertyName)) {
-                setModal(parent, ((Boolean) newValue).booleanValue());
-            }
-            serverUpdateManager.processComponentPropertyUpdate(parent, propertyName, oldValue, newValue);
-        }
-    }
+    public abstract Window init(Map parameters);
     
     /**
      * Invoked before the application is passivated (such that its state may
@@ -621,68 +347,6 @@
     }
     
     /**
-     * Processes client input specific to the <code>ApplicationInstance</code> 
-     * received from the <code>UpdateManager</code>.
-     * Derivative implementations should take care to invoke 
-     * <code>super.processInput()</code>.
-     */
-    public void processInput(String propertyName, Object propertyValue) {
-        if (FOCUSED_COMPONENT_CHANGED_PROPERTY.equals(propertyName)) {
-            setFocusedComponent((Component) propertyValue);
-        }
-    }
-
-    /**
-     * Processes all queued tasks. This method may only be invoked from within a
-     * UI thread by the <code>UpdateManager</code>. Tasks are removed from queues
-     * once they have been processed.
-     */
-    public void processQueuedTasks() {
-        if (taskQueueMap.size() == 0) {
-            return;
-        }
-        
-        List currentTasks = new ArrayList();
-        synchronized (taskQueueMap) {
-            Iterator taskListsIt = taskQueueMap.values().iterator();
-            while (taskListsIt.hasNext()) {
-                List tasks = (List) taskListsIt.next();
-                if (tasks != null) {
-                    currentTasks.addAll(tasks);
-                    tasks.clear();
-                }
-            }
-        }
-        Iterator it = currentTasks.iterator();
-        while (it.hasNext()) {
-            ((Runnable) it.next()).run();
-        }
-    }
-    
-    /**
-     * Registers a component with the <code>ApplicationInstance</code>.
-     * The component will be assigned a unique render id in the event that
-     * it does not currently have one.
-     * <p>
-     * This method is invoked by <code>Component.setApplicationInstance()</code>
-     * 
-     * @param component the component to register
-     * @see Component#register(ApplicationInstance)
-     */
-    void registerComponent(Component component) {
-        String renderId = component.getRenderId();
-        if (renderId == null || renderIdToComponentMap.containsKey(renderId)) {
-            // Note that the render id is reassigned if it currently exists renderIdToComponentMap.  This could be the case
-            // in the event a Component was being used in a pool.
-            component.assignRenderId(generateId());
-        }
-        renderIdToComponentMap.put(component.getRenderId(), component);
-        if (component instanceof ModalSupport && ((ModalSupport) component).isModal()) {
-            setModal(component, true);
-        }
-    }
-    
-    /**
      * Removes a <code>PropertyChangeListener</code> from receiving 
      * notification of application-level property changes.
      * 
@@ -693,20 +357,6 @@
     }
     
     /**
-     * Removes the task queue described the specified 
-     * <code>TaskQueueHandle</code>.
-     * 
-     * @param taskQueueHandle the <code>TaskQueueHandle</code> specifying the
-     *        task queue to remove
-     * @see #createTaskQueue()
-     */
-    public void removeTaskQueue(TaskQueueHandle taskQueueHandle) {
-        synchronized(taskQueueMap) {
-            taskQueueMap.remove(taskQueueHandle);
-        }
-    }
-    
-    /**
      * Sets a contextual property.
      * 
      * @param propertyName the property name
@@ -725,41 +375,79 @@
         }
     }
     
+    private void removeWindow(Window window) {
+        // remove the window from the list of windows
+        Window[] old = activeWindows;
+        activeWindows = new Window[old.length - 1];
+        for (int i  = 0, oldIndex = 0; i < activeWindows.length; i++) {
+            if (old[oldIndex] == window)
+                oldIndex++;
+            activeWindows[i] = old[oldIndex++];
+        }
+        
+        if (closingWindows == null) {
+            closingWindows = new Window[] {window};
+        } else {
+            old = closingWindows;
+            closingWindows = new Window[old.length + 1];
+            for (int i  = 0; i <old.length; i++) {
+                closingWindows[i] = old[i];
+            }
+            closingWindows[old.length] = window;
+        }
+        window.enqueueCommand(new BrowserCloseWindowCommand());
+    }
+    
     /**
-     * Sets the default top-level window.
+     * Adds a top-level window.
      * 
-     * @param window the default top-level window
+     * @param window the top-level window
      */
-    private void setDefaultWindow(Window window) {
-        if (defaultWindow != null) {
-            throw new UnsupportedOperationException("Default window already set.");
+    private void addWindow(Window window) {
+        if (activeWindows == null) {
+            activeWindows = new Window[] {window};
+            window.register(this, window);
+        } else {
+            // add the window to the list of windows
+            Window[] old = activeWindows;
+            activeWindows = new Window[old.length + 1];
+            for (int i  = 0; i <old.length; i++) {
+                activeWindows[i] = old[i];
+            }
+            activeWindows[old.length] = window;
+            // enqueue a command in the current window to open the new window
+            Window.getActive().enqueueCommand(
+                    new OpenEcho3WindowCommand(
+                            window
+                    )
+            );
+            
+            // if we're doing async updates, create update task queues if needed
+            if (allowAsyncWindowUpdates) {
+                if (old.length == 1) {
+                    activeWindows[0].getUpdateManager().createAsyncUpdateQueue();
+                }
+                window.getUpdateManager().createAsyncUpdateQueue();
+            }
+            window.register(this, window);
         }
-
-        defaultWindow = window;
-        window.register(this);
         firePropertyChange(WINDOWS_CHANGED_PROPERTY, null, window);
         window.doInit();
     }
     
     /**
-     * Sets the presently focused component.
-     * 
-     * @param newValue the component to be focused
+     * Whether the specified window has been added to this ApplicationInstance
+     * @param w The window to determine if it's been added
+     * @return True if the given window has been added to the application, false otherwise
      */
-    public void setFocusedComponent(Component newValue) {
-        if (newValue instanceof DelegateFocusSupport) {
-            newValue = ((DelegateFocusSupport) newValue).getFocusComponent(); 
+    public boolean isWindowActive(Window w) {
+        if (activeWindows == null)
+            return false;
+        for (int i = 0; i < activeWindows.length; i++) {
+            if (activeWindows[i].getId().equals(w.getId()))
+                return true;
         }
-        
-        Component oldValue = getFocusedComponent();
-        if (newValue == null) {
-            focusedComponent = null;
-        } else {
-            focusedComponent = new WeakReference(newValue);
-        }
-        propertyChangeSupport.firePropertyChange(FOCUSED_COMPONENT_CHANGED_PROPERTY, oldValue, newValue);
-        updateManager.getServerUpdateManager().processApplicationPropertyUpdate(FOCUSED_COMPONENT_CHANGED_PROPERTY, 
-                oldValue, newValue);
+        return false;
     }
     
     /**
@@ -776,35 +464,15 @@
         layoutDirection = LayoutDirection.forLocale(locale);
         propertyChangeSupport.firePropertyChange(LOCALE_CHANGED_PROPERTY, oldValue, newValue);
         
-        // Perform full refresh: container's synchronization peers may need to provide new localization resources to client. 
-        updateManager.getServerUpdateManager().processFullRefresh();
+        if (activeWindows == null)
+            return;
+        // Perform full refresh: container's synchronization peers may need to provide new localization resources to client.
+        for (int i = 0; i < activeWindows.length; i++) {
+            activeWindows[i].getUpdateManager().getServerUpdateManager().processFullRefresh();
+        }
     }
     
     /**
-     * Sets the modal state of a component (i.e, whether only it and 
-     * components below it in the hierarchy should be enabled).
-     * 
-     * @param component the <code>Component</code>
-     * @param newValue the new modal state
-     */
-    private void setModal(Component component, boolean newValue) {
-        boolean oldValue = isModal(component);
-        if (newValue) {
-            if (modalComponents == null) {
-                modalComponents = new ArrayList();
-            }
-            if (!modalComponents.contains(component)) {
-                modalComponents.add(component);
-            }
-        } else {
-            if (modalComponents != null) {
-                modalComponents.remove(component);
-            }
-        }
-        firePropertyChange(MODAL_COMPONENTS_CHANGED_PROPERTY, new Boolean(oldValue), new Boolean(newValue));
-    }
-
-    /**
      * Sets the <code>StyleSheet</code> of this 
      * <code>ApplicationInstance</code>.  <code>Component</code>s 
      * registered with this instance will retrieve
@@ -827,32 +495,110 @@
     }
 
     /**
-     * Unregisters a component from the <code>ApplicationInstance</code>.
-     * <p>
-     * This method is invoked by <code>Component.setApplicationInstance()</code>.
-     * 
-     * @param component the component to unregister
-     * @see Component#register(ApplicationInstance)
+     * Returns the top-level window whose id property matches the given value
+     * @param windowId The id of the top-level window to find
+     * @return The top-level window with the given id, or null if no matching window is found
      */
-    void unregisterComponent(Component component) {
-        renderIdToComponentMap.remove(component.getRenderId());
-        if (component instanceof ModalSupport && ((ModalSupport) component).isModal()) {
-            setModal(component, false);
+    public Window getWindow(String windowId) {
+        for (int i = 0; i < activeWindows.length; i++) {
+            if (activeWindows[i].getId().equals(windowId))
+                return activeWindows[i];
         }
+        for (int i = 0; i < closingWindows.length; i++) {
+            if (closingWindows[i].getId().equals(windowId))
+                return closingWindows[i];
+        }
+        return null;
     }
     
     /**
-     * Verifies that a <code>Component</code> is within the modal context, 
-     * i.e., that if a modal <code>Component</code> is present, that it either 
-     * is or is a child of that <code>Component</code>.
-     * 
-     * @param component the <code>Component</code> to evaluate
-     * @return true if the <code>Component</code> is within the current 
-     *         modal context
-     * @see Component#verifyInput(java.lang.String, java.lang.Object)
+     * Used to open a new top-level window instance.
+     * @param w The window to open
      */
-    boolean verifyModalContext(Component component) {
-        Component modalContextRoot = getModalContextRoot();
-        return modalContextRoot == null || modalContextRoot.isAncestorOf(component);
+    public void openWindow(Window w) {
+        addWindow(w);
+        doValidation();
     }
+
+    /**
+     * Returns the currently active windows of an application
+     * @return
+     */
+    public Window[] getActiveWindows() {
+        Window[] ret = new Window[activeWindows.length];
+        for (int i = 0; i < ret.length; i++) {
+            ret[i] = activeWindows[i];
+        }
+        return ret;
+    }
+
+    /**
+     * Returns the both active and inactive windows of an application
+     * @return
+     */
+    public Window[] getWindows() {
+        Window[] ret = null;
+        if (closingWindows != null)
+            ret = new Window[activeWindows.length + closingWindows.length];
+        else
+            ret = new Window[activeWindows.length];
+        for (int i = 0; i < ret.length; i++) {
+            if (i < activeWindows.length)
+                ret[i] = activeWindows[i];
+            else
+                ret[i] = closingWindows[i - activeWindows.length];
+        }
+        return ret;
+    }
+    
+    /**
+     * Closes the given top-level window instance.
+     * @param w The window to close.
+     */
+    public void closeWindow(Window w) {
+        removeWindow(w);
+        doValidation();
+    }
+
+    /**
+     * De-references the given window if it is in the list of closing windows
+     * @param active The window to dereference
+     */
+    public void removeIfClosing(Window active) {
+        if (closingWindows == null)
+            return;
+        if (closingWindows.length == 1) {
+            if (closingWindows[0] == active) {
+                closingWindows = new Window[0];
+            }
+        } else if (closingWindows.length > 1) {
+            Window[] old = closingWindows;
+            closingWindows = new Window[old.length - 1];
+            int oldIndex = 0;
+            for (int i = 0; i < closingWindows.length; i++) {
+                if (old[oldIndex] == active) {
+                    oldIndex++;
+                }
+                closingWindows[i] = old[oldIndex++];
+            }
+        }
+    }
+
+	public String getDefaultWindowId() {
+		if (defaultWindowId == null) {
+			if (activeWindows != null) {
+				defaultWindowId = activeWindows[0].getId();
+			} else {
+				defaultWindowId = generateSystemId();
+			}
+		}
+		return defaultWindowId;
+	}
+
+	public String generateWindowId() {
+		if (activeWindows == null || activeWindows.length == 0) {
+			return getDefaultWindowId();
+		}
+		return generateSystemId();
+	}
 }
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/Component.java
--- a/src/server-java/app/nextapp/echo/app/Component.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/Component.java	Mon Apr 27 16:51:56 2009 +0100
@@ -289,6 +289,9 @@
     /** Render id of next focus traversal component. */
     private String focusNextId;
 
+    /** The window containing this component */
+    private Window window;
+
     /**
      * Creates a new <code>Component</code>.
      */
@@ -361,9 +364,12 @@
         
         // Flag child as registered.
         if (applicationInstance != null) {
-            c.register(applicationInstance);
+            c.register(applicationInstance, getContainingWindow());
         }
 
+        // update the child so that it has the correct window reference
+        c.setContainingWindow(getContainingWindow());
+
         // Notify PropertyChangeListeners of change.
         firePropertyChange(CHILDREN_CHANGED_PROPERTY, null, c);
 
@@ -502,8 +508,8 @@
         // per-Component-instance memory requirements, i.e., it enables the 
         // PropertyChangeSupport object to only be instantiated on Components 
         // that have ProperyChangeListeners registered by a third party.
-        if (applicationInstance != null) {
-            applicationInstance.notifyComponentPropertyChange(this, propertyName, oldValue, newValue);
+        if (getContainingWindow() != null) {
+            getContainingWindow().notifyComponentPropertyChange(this, propertyName, oldValue, newValue);
         }
     }
     
@@ -1223,7 +1229,7 @@
      *         remove a <code>Component</code> during an <code>init()</code>
      *         operation.
      */
-    void register(ApplicationInstance newValue) {
+    void register(ApplicationInstance newValue, Window window) {
         // Verifying 'registering' flag is not set.
         if ((flags & FLAG_REGISTERING) != 0) {
             throw new IllegalStateException(
@@ -1248,22 +1254,22 @@
                 if (children != null) {
                     Iterator it = children.iterator();
                     while (it.hasNext()) {
-                        ((Component) it.next()).register(null); // Recursively unregister children.
+                        ((Component) it.next()).register(null, null); // Recursively unregister children.
                     }
                 }
                 
-                applicationInstance.unregisterComponent(this);
+                getContainingWindow().unregisterComponent(this);
             }
             
             applicationInstance = newValue;
             
             if (newValue != null) { // registering
-                applicationInstance.registerComponent(this);
-    
+                window.registerComponent(this);
+                
                 if (children != null) {
                     Iterator it = children.iterator();
                     while (it.hasNext()) {
-                        ((Component) it.next()).register(newValue); // Recursively register children.
+                        ((Component) it.next()).register(newValue, window); // Recursively register children.
                     }
                 }
             }
@@ -1296,7 +1302,7 @@
         
         // Deregister child.
         if (applicationInstance != null) {
-            c.register(null);
+            c.register(null, null);
         }
         
         // Dissolve references between parent and child.
@@ -1622,7 +1628,7 @@
      *         in its current state
      */
     public boolean verifyInput(String inputName, Object inputValue) {
-        if (applicationInstance != null && !applicationInstance.verifyModalContext(this)) {
+        if (getContainingWindow() != null && !getContainingWindow().verifyModalContext(this)) {
             return false;
         }
         return isVisible() && isEnabled();
@@ -1667,4 +1673,17 @@
     public void setComplexProperty(String propertyName, boolean isComplex) {
         localStyle.setComplexProperty(propertyName, isComplex);
     }
+    
+    public Window getContainingWindow() {
+        return window;
+    }
+    
+    public void setContainingWindow(Window w) {
+        this.window = w;
+        if (this.children != null) {
+            for (int i = 0; i < children.size(); i++) {
+                ((Component)children.get(i)).setContainingWindow(w);
+            }
+        }
+    }
 }
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/ContentPane.java
--- a/src/server-java/app/nextapp/echo/app/ContentPane.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/ContentPane.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,7 @@
 
 package nextapp.echo.app;
 
+
 /**
  * <code>ContentPane</code> component: a high-level container/layout object which fills a region and optionally provides the
  * capability to add <code>FloatingPane</code>s (e.g. <code>WindowPane</code>s) above that content. A <code>ContentPane</code> is
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/MutableStyle.java
--- a/src/server-java/app/nextapp/echo/app/MutableStyle.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/MutableStyle.java	Mon Apr 27 16:51:56 2009 +0100
@@ -214,7 +214,7 @@
      * @deprecated Use {@link #getIndex(String, int)} instead.
      */
     public Object getIndexedProperty(String propertyName, int propertyIndex) {
-    	return getIndex(propertyName, propertyIndex);
+        return getIndex(propertyName, propertyIndex);
     }
     
     /**
@@ -391,7 +391,7 @@
      * @deprecated use {@link #setIndex(String, int, Object)} instead.
      */
     public void setIndexedProperty(String propertyName, int propertyIndex, Object propertyValue) {
-    	setIndex(propertyName, propertyIndex, propertyValue);
+        setIndex(propertyName, propertyIndex, propertyValue);
     }
    
     /**
@@ -405,7 +405,7 @@
      * @deprecated use {@link #set(String, Object)} instead.
      */
     public void setProperty(String propertyName, Object propertyValue) {
-    	set(propertyName, propertyValue);
+        set(propertyName, propertyValue);
     }
     
     /**
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/RenderState.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/app/nextapp/echo/app/RenderState.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,40 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.app;
+
+import java.io.Serializable;
+
+/**
+ * Describes the last rendered state of a component on the client browser.
+ * A <code>RenderState</code> is set when rendering is complete.
+ * This is a marker interface.
+ */
+public interface RenderState 
+extends Serializable { }
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/Window.java
--- a/src/server-java/app/nextapp/echo/app/Window.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/Window.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,20 @@
 
 package nextapp.echo.app;
 
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Stack;
+
+import nextapp.echo.app.update.ServerComponentUpdate;
+import nextapp.echo.app.update.ServerUpdateManager;
+import nextapp.echo.app.update.UpdateManager;
+
 /**
  * A top-level window.
  */
@@ -38,15 +52,188 @@
     private static final long serialVersionUID = 20070101L;
 
     public static final String PROPERTY_TITLE = "title";
+    public static final String FOCUSED_COMPONENT_CHANGED_PROPERTY = "focusedComponent";
+    public static final String MODAL_COMPONENTS_CHANGED_PROPERTY = "modalComponents";
+    
+    /** 
+     * A <code>ThreadLocal</code> reference to the 
+     * <code>Window</code> relevant to the current thread.
+     */ 
+    private static final ThreadLocal activeWindow = new ThreadLocal();
+    
+    /**
+     * A <code>ThreadLocal</code> reference to a stack of the windows that
+     * have been switched out of context for the current thread.
+     */
+    private static final ThreadLocal contextStackLocal = new ThreadLocal();
+    
+    /**
+     * Determines the current modal component by searching the entire hierarchy for modal components.
+     * This operation is only performed when multiple visibly rendered components are registered as modal.
+     * 
+     * @param searchComponent the root <code>Component</code> at which to start the search.
+     * @param visibleModalComponents the set of visible modal components
+     * @return the current modal component
+     */
+    private static Component findCurrentModalComponent(Component searchComponent, Set visibleModalComponents) {
+        int count = searchComponent.getComponentCount();
+        for (int i = count - 1; i >= 0; --i) {
+            Component foundComponent = findCurrentModalComponent(searchComponent.getComponent(i), visibleModalComponents);
+            if (foundComponent != null) {
+                return foundComponent;
+            }
+        }
+
+        if (searchComponent instanceof ModalSupport && ((ModalSupport) searchComponent).isModal()
+                 && visibleModalComponents.contains(searchComponent)) {
+            return searchComponent;
+        }
+        
+        return null;
+    }
+
+    /**
+     * Collection of modal components, the last index representing the current
+     * modal context.
+     */
+    private List modalComponents;
+
+    /**
+     * The presently focused component.
+     */
+    transient WeakReference focusedComponent;
+
+    /**
+     * Mapping between <code>TaskQueueHandle</code>s and <code>List</code>s
+     * of <code>Runnable</code> tasks.  Values may be null if a particular 
+     * <code>TaskQueue</code> does not contain any tasks. 
+     */
+    HashMap taskQueueMap;
+    
+    /**
+     * Mapping from the render ids of all registered components to the 
+     * <code>Component</code> instances themselves.
+     */
+    private Map renderIdToComponentMap;
+    
+    /**
+     * The next available sequentially generated 
+     * <code>Window</code>-unique identifier value.
+     * @see #generateId()
+     */
+    private long nextId;
+    
+    /**
+     * The current transactionId.  Used to ensure incoming ClientMessages reflect
+     * changes made by user against current server-side state of user interface.
+     * This is used to eliminate issues that could be encountered with two
+     * browser windows pointing at the same application instance.
+     */
+    private int transactionId = 0;
+    
+    /**
+     * The last time the window was involved in a synchronisation with a client
+     */
+    private long lastUpdateTime = System.currentTimeMillis();
+    
+    /**
+     * Mapping between component instances and <code>RenderState</code> objects.
+     */
+    private Map componentToRenderStateMap = new HashMap();
+
+  /**
+   * The <code>UpdateManager</code> handling updates to/from this window.
+   */
+  private UpdateManager updateManager;
     
     /**
      * Creates a new window.
      */
-    public Window() {
+    public Window(ApplicationInstance appInstance) {
         super();
+        taskQueueMap = new HashMap();
+        renderIdToComponentMap = new HashMap();
+        // set ourselves as the current context window
+        if (Window.getActive() == null)
+            Window.setActive(this);
+        // ensure we know that we're the containing window
+        setContainingWindow(this);
+        // ensure we have a reference to the application instance we're associated with
+        this.register(appInstance, this);
+        super.setId(appInstance.generateWindowId());
+        updateManager = new UpdateManager(this);
         add(new ContentPane());
     }
     
+    public final void setId(String id) {
+        throw new UnsupportedOperationException("Window ids cannot be changed");
+    }
+    
+    /**
+     * Retrieves the <code>UpdateManager</code> being used to manage the
+     * client/server synchronization of this <code>ApplicationInstance</code>
+     * 
+     * @return the <code>UpdateManager</code>
+     */
+    public UpdateManager getUpdateManager() {
+        return updateManager;
+    }
+    
+    /**
+     * Generates an identifier which is unique within this 
+     * <code>ApplicationInstance</code>.  This identifier should not be
+     * used outside of the context of this  <code>ApplicationInstance</code>.
+     * 
+     * @return the unique identifier
+     * @see #generateSystemId()
+     */
+    public String generateId() {
+        return Long.toString(nextId++);
+    }
+    
+    /**
+     * Returns a reference to the <code>Window</code> that is 
+     * relevant to the current thread, or null if no instance is relevant.
+     * 
+     * @return the relevant <code>Window</code>
+     */
+    public static final Window getActive() {
+        return (Window) activeWindow.get();
+    }
+
+    /**
+     * Sets the <code>Window</code> that is relevant to the 
+     * current thread.  This method should be invoked with a null
+     * argument when the previously set <code>Window</code> is 
+     * no longer relevant.
+     * <p>
+     * <b>This method should not be invoked by application code.</b>  
+     * 
+     * @param w the relevant <code>Window</code>
+     */
+    public static final void setActive(Window w) {
+        activeWindow.set(w);
+    }
+
+    /**
+     * Returns the current transaction id.
+     * 
+     * @return the current transaction id
+     */
+    public int getCurrentTransactionId() {
+        return transactionId;
+    }
+    
+    /**
+     * Increments the current transaction id and returns it.
+     * 
+     * @return the current transaction id, after an increment
+     */
+    public int getNextTransactionId() {
+        ++transactionId;
+        return transactionId;
+    }
+    
     /**
      * Returns the content of the window.
      * 
@@ -104,4 +291,483 @@
     public void setTitle(String newValue) {
         set(PROPERTY_TITLE, newValue);
     }
+
+    /**
+     * Returns the presently focused component, if known.
+     * 
+     * @param applicationInstance TODO
+     * @return the focused component
+     */
+    public Component getFocusedComponent() {
+        if (focusedComponent == null) {
+            return null;
+        } else {
+            return (Component) focusedComponent.get();
+        }
+    }
+    
+    /**
+     * Sets the presently focused component.
+     * 
+     * @param newValue the component to be focused
+     */
+    public void setFocusedComponent(Component newValue) {
+        if (newValue instanceof DelegateFocusSupport) {
+            newValue = ((DelegateFocusSupport) newValue).getFocusComponent(); 
+        }
+        
+        Component oldValue = getFocusedComponent();
+        if (newValue == null) {
+            focusedComponent = null;
+        } else {
+            focusedComponent = new WeakReference(newValue);
+        }
+        firePropertyChange(FOCUSED_COMPONENT_CHANGED_PROPERTY, oldValue, newValue);
+        getUpdateManager().getServerUpdateManager().processApplicationPropertyUpdate(FOCUSED_COMPONENT_CHANGED_PROPERTY, 
+                oldValue, newValue);
+    }
+    
+    /**
+     * Processes client input specific to the <code>Window</code> 
+     * received from the <code>UpdateManager</code>.
+     * Derivative implementations should take care to invoke 
+     * <code>super.processInput()</code>.
+     */
+    public void processInput(String propertyName, Object propertyValue) {
+        if (FOCUSED_COMPONENT_CHANGED_PROPERTY.equals(propertyName)) {
+            setFocusedComponent((Component) propertyValue);
+        }
+    }
+
+    /**
+     * Creates a new task queue.  A handle object representing the created task
+     * queue is returned.  The created task queue will remain active until it is
+     * provided to the <code>removeTaskQueue()</code> method.  Developers must
+     * take care to invoke <code>removeTaskQueue()</code> on any created
+     * task queues.
+     * 
+     * @return a <code>TaskQueueHandler</code> representing the created task 
+     *         queue
+     * @param applicationInstance TODO
+     * @see #removeTaskQueue(TaskQueueHandle)
+     */
+    public TaskQueueHandle createTaskQueue() {
+        TaskQueueHandle taskQueue = new TaskQueueHandle() { 
+            /** Serial Version UID. */
+            private static final long serialVersionUID = 20070101L;
+        };
+        synchronized (taskQueueMap) {
+            taskQueueMap.put(taskQueue, null);
+        }
+        return taskQueue;
+    }
+    
+    public void doDispose() {
+        super.doDispose();
+        synchronized (taskQueueMap) {
+            taskQueueMap.clear();
+        }
+    }
+    
+    /**
+     * Enqueues a task to be run during the next client/server 
+     * synchronization.  The task will be run 
+     * <b>synchronously</b> in the user interface update thread.
+     * Enqueuing a task in response to an external event will result 
+     * in changes being pushed to the client.
+     * 
+     * @param taskQueue the <code>TaskQueueHandle</code> representing the
+     *        queue into which this task should be placed
+     * @param task the task to run on client/server synchronization
+     */
+    public void enqueueTask(TaskQueueHandle taskQueue, Runnable task) {
+        synchronized (taskQueueMap) {
+            List taskList = (List) taskQueueMap.get(taskQueue);
+            if (taskList == null) {
+                taskList = new ArrayList();
+                taskQueueMap.put(taskQueue, taskList);
+            }
+            taskList.add(task);
+        }
+    }
+    
+    /**
+     * Determines if this <code>ApplicationInstance</code> currently has any 
+     * active tasks queues, which might be monitoring external events.
+     * 
+     * @return true if the instance has any task queues
+     */
+    public final boolean hasTaskQueues() {
+        return taskQueueMap.size() > 0;
+    }
+    
+    /**
+     * Determines if there are any queued tasks in any of the task
+     * queues associated with this <code>ApplicationInstance</code>.
+     * <p>
+     * This method may be overridden by an application in order to check
+     * on the status of long-running operations and enqueue tasks 
+     * just-in-time.  In such cases tasks should be <strong>enqueued</strong>
+     * and the value of <code>super.hasQueuedTasks()</code> should be 
+     * returned.  This method is not invoked by a user-interface thread and
+     * thus the component hierarchy may not be modified in
+     * overriding implementations.
+     * 
+     * @return true if any tasks are queued
+     */
+    public boolean hasQueuedTasks() {
+        if (taskQueueMap.size() == 0) {
+            return false;
+        }
+        Iterator it = taskQueueMap.values().iterator();
+        while (it.hasNext()) {
+            List taskList = (List) it.next();
+            if (taskList != null && taskList.size() > 0) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Processes all queued tasks. This method may only be invoked from within a
+     * UI thread by the <code>UpdateManager</code>. Tasks are removed from queues
+     * once they have been processed.
+     */
+    public void processQueuedTasks() {
+        if (taskQueueMap.size() == 0) {
+            return;
+        }
+        
+        List currentTasks = new ArrayList();
+        synchronized (taskQueueMap) {
+            Iterator taskListsIt = taskQueueMap.values().iterator();
+            while (taskListsIt.hasNext()) {
+                List tasks = (List) taskListsIt.next();
+                if (tasks != null) {
+                    currentTasks.addAll(tasks);
+                    tasks.clear();
+                }
+            }
+        }
+        Iterator it = currentTasks.iterator();
+        while (it.hasNext()) {
+            ((Runnable) it.next()).run();
+        }
+    }
+    
+    /**
+     * Removes the task queue described the specified 
+     * <code>TaskQueueHandle</code>.
+     * 
+     * @param taskQueueHandle the <code>TaskQueueHandle</code> specifying the
+     *        task queue to remove
+     * @see #MISSING()
+     */
+    public void removeTaskQueue(TaskQueueHandle taskQueueHandle) {
+        synchronized(taskQueueMap) {
+            taskQueueMap.remove(taskQueueHandle);
+        }
+    }
+
+    /**
+     * Queues the given stateless <code>Command</code> for execution on the 
+     * current client/server synchronization.
+     * 
+     * @param command the <code>Command</code> to execute
+     */
+    public void enqueueCommand(Command command) {
+        getUpdateManager().getServerUpdateManager().enqueueCommand(command);
+    }
+    
+    /**
+     * Retrieves the root component of the current modal context, or null
+     * if no modal context exists.  Components which are not within the 
+     * descendant hierarchy of the modal context are barred from receiving
+     * user input.
+     * 
+     * @return the root component of the modal context
+     */
+    public Component getModalContextRoot() {
+        if (modalComponents == null || modalComponents.size() == 0) {
+            // No components marked as modal.
+            return null;
+        } else if (modalComponents.size() == 1) {
+            // One component marked as modal, return it if visible, null otherwise.
+            Component component = (Component) modalComponents.get(0);
+            return component.isRenderVisible() ? component : null;
+        }
+
+        // Multiple modal components.
+        Set visibleModalComponents = new HashSet();
+        for (int i = modalComponents.size() - 1; i >= 0; --i) {
+            Component component = (Component) modalComponents.get(i);
+            if (component.isRenderVisible()) {
+                visibleModalComponents.add(component);
+            }
+        }
+        
+        return findCurrentModalComponent(Window.getActive(), visibleModalComponents);  
+    }
+    
+    /**
+     * Determines if the given component is modal (i.e., that only components
+     * below it in the hierarchy should be enabled).
+     * 
+     * @param component the <code>Component</code>
+     * @return true if the <code>Component</code> is modal 
+     */
+    private boolean isModal(Component component) {
+        return modalComponents != null && modalComponents.contains(component);
+    }
+    
+    /**
+     * Sets the modal state of a component (i.e, whether only it and 
+     * components below it in the hierarchy should be enabled).
+     * 
+     * @param component the <code>Component</code>
+     * @param newValue the new modal state
+     */
+    private void setModal(Component component, boolean newValue) {
+        boolean oldValue = isModal(component);
+        if (newValue) {
+            if (modalComponents == null) {
+                modalComponents = new ArrayList();
+            }
+            if (!modalComponents.contains(component)) {
+                modalComponents.add(component);
+            }
+        } else {
+            if (modalComponents != null) {
+                modalComponents.remove(component);
+            }
+        }
+        firePropertyChange(MODAL_COMPONENTS_CHANGED_PROPERTY, new Boolean(oldValue), new Boolean(newValue));
+    }
+    
+    /**
+     * Verifies that a <code>Component</code> is within the modal context, 
+     * i.e., that if a modal <code>Component</code> is present, that it either 
+     * is or is a child of that <code>Component</code>.
+     * 
+     * @param component the <code>Component</code> to evaluate
+     * @return true if the <code>Component</code> is within the current 
+     *         modal context
+     * @see Component#verifyInput(java.lang.String, java.lang.Object)
+     */
+    boolean verifyModalContext(Component component) {
+        Component modalContextRoot = getModalContextRoot();
+        return modalContextRoot == null || modalContextRoot.isAncestorOf(component);
+    }
+    
+    /**
+     * Notifies the <code>UpdateManager</code> in response to a component 
+     * property change or child addition/removal.
+     * <p>
+     * This method is invoked directly from <code>Component</code>s
+     * (rather than using a <code>PropertyChangeListener</code>) in the interest
+     * of memory efficiency. 
+     * 
+     * @param parent the parent/updated component
+     * @param propertyName the name of the property changed
+     * @param oldValue the previous value of the property 
+     *        (or the removed component in the case of a
+     *        <code>CHILDREN_CHANGED_PROPERTY</code>)
+     * @param newValue the new value of the property 
+     *        (or the added component in the case of a
+     *        <code>CHILDREN_CHANGED_PROPERTY</code>)
+     * @throws IllegalStateException in the event that the current thread is not
+     *         permitted to update the state of the user interface
+     */
+    void notifyComponentPropertyChange(Component parent, String propertyName, Object oldValue, Object newValue) {
+        // Ensure current thread is a user interface thread.
+        if (Window.getActive() == null) {
+            throw new IllegalStateException(
+                    "Attempt to update state of application user interface outside of user interface thread.");
+        // if the application instance is null, we're in weird territory (or unit tests)
+        } else if (getApplicationInstance() == null) {
+            return;
+        // If the window isn't active yet, don't worry about any updates as it will get a full render after being added
+        } else if (!getApplicationInstance().isWindowActive(this)) {
+            return;
+        }
+
+        ServerUpdateManager serverUpdateManager = getUpdateManager().getServerUpdateManager();
+        if (Component.CHILDREN_CHANGED_PROPERTY.equals(propertyName)) {
+            if (newValue == null) {
+                serverUpdateManager.processComponentRemove(parent, (Component) oldValue);
+            } else {
+                serverUpdateManager.processComponentAdd(parent, (Component) newValue);
+            }
+        } else if (Component.PROPERTY_LAYOUT_DATA.equals(propertyName)) {
+            serverUpdateManager.processComponentLayoutDataUpdate(parent);
+        } else if (Component.VISIBLE_CHANGED_PROPERTY.equals(propertyName)) {
+            if (oldValue != null && newValue != null && oldValue.equals(newValue)) {
+                return;
+            }
+            serverUpdateManager.processComponentVisibilityUpdate(parent);
+        } else {
+            if ((oldValue == null && newValue == null) 
+                || (oldValue != null && newValue != null && !parent.isComplexProperty(propertyName) && oldValue.equals(newValue))) {
+                return;
+            }
+            if (parent instanceof ModalSupport && ModalSupport.MODAL_CHANGED_PROPERTY.equals(propertyName)) {
+                setModal(parent, ((Boolean) newValue).booleanValue());
+            }
+            serverUpdateManager.processComponentPropertyUpdate(parent, propertyName, oldValue, newValue);
+        }
+    }
+    
+    /**
+     * Registers a component with the <code>Window</code>.
+     * The component will be assigned a unique render id in the event that
+     * it does not currently have one.
+     * <p>
+     * This method is invoked by <code>Component.setApplicationInstance()</code>
+     * 
+     * @param component the component to register
+     * @see Component#register(ApplicationInstance)
+     */
+    void registerComponent(Component component) {
+        if (component == this)
+            return;
+        String renderId = component.getRenderId();
+        if (renderId == null || renderIdToComponentMap.containsKey(renderId)) {
+            // Note that the render id is reassigned if it currently exists renderIdToComponentMap.  This could be the case
+            // in the event a Component was being used in a pool.
+            component.assignRenderId(generateId());
+        }
+        renderIdToComponentMap.put(component.getRenderId(), component);
+        if (component instanceof ModalSupport && ((ModalSupport) component).isModal()) {
+            setModal(component, true);
+        }
+    }
+
+    /**
+     * Unregisters a component from the <code>ApplicationInstance</code>.
+     * <p>
+     * This method is invoked by <code>Component.setApplicationInstance()</code>.
+     * 
+     * @param component the component to unregister
+     * @see Component#register(ApplicationInstance)
+     */
+    void unregisterComponent(Component component) {
+        renderIdToComponentMap.remove(component.getRenderId());
+        if (component instanceof ModalSupport && ((ModalSupport) component).isModal()) {
+            setModal(component, false);
+        }
+    }
+
+    /**
+     * Retrieves the component currently registered with the application 
+     * with the specified render id.
+     * 
+     * @param renderId the render id of the component
+     * @return the component (or null if no component with the specified
+     *         render id is registered)
+     */
+    public Component getComponentByRenderId(String renderId) {
+        return (Component) renderIdToComponentMap.get(renderId);
+    }
+    
+    /**
+     * Removes all <code>RenderState</code>s whose components are not
+     * registered.
+     */
+    public void purgeRenderStates() {
+        ServerComponentUpdate[] updates = getUpdateManager().getServerUpdateManager().getComponentUpdates();
+
+        Iterator it = componentToRenderStateMap.keySet().iterator();
+        while (it.hasNext()) {
+            Component component = (Component) it.next();
+            if (!component.isRegistered() || !component.isRenderVisible()) {
+                it.remove();
+                continue;
+            }
+
+            for (int i = 0; i < updates.length; ++i) {
+                if (updates[i].hasRemovedDescendant(component)) {
+                    it.remove();
+                    continue;
+                }
+            }
+        }
+    }
+
+    /**
+     * Clears all <code>RenderState</code> information.
+     */
+    public void clearRenderStates() {
+        componentToRenderStateMap.clear();
+    }
+
+    /**
+     * Retrieves the <code>RenderState</code> of the specified
+     * <code>Component</code>.
+     * 
+     * @param component the component
+     * @return the rendering state
+     */
+    public RenderState getRenderState(Component component) {
+        return (RenderState) componentToRenderStateMap.get(component);
+    }
+
+    /**
+     * Removes the <code>RenderState</code> of the specified
+     * <code>Component</code>.
+     * 
+     * @param component the component
+     */
+    public void removeRenderState(Component component) {
+        componentToRenderStateMap.remove(component);
+    }
+
+    /**
+     * Sets the <code>RenderState</code> of the specified 
+     * <code>Component</code>.
+     * 
+     * @param component the component
+     * @param renderState the render state
+     */
+    public void setRenderState(Component component, RenderState renderState) {
+        componentToRenderStateMap.put(component, renderState);
+    }
+    
+    /**
+     * This method activates this window instance as the active window.
+     * Any calls to this method <b>must</b> be accompanied by a call to
+     * switchOutOfContext.
+     */
+    public void switchIntoContext() {
+        Stack contextStack = (Stack)contextStackLocal.get();
+        if (contextStack == null) {
+            contextStack = new Stack();
+            contextStackLocal.set(contextStack);
+        }
+        contextStack.push(Window.getActive());
+        Window.setActive(this);
+    }
+    
+    /**
+     * This method re-activates the previously active window instance.
+     * If there was no previous call to switchIntoContext, then a call
+     * to this will result in Window.getActive() returning null.
+     */
+    public void switchOutOfContext() {
+        Window.setActive(null);
+        Stack contextStack = (Stack)contextStackLocal.get();
+        if (contextStack == null) {
+            return;
+        }
+        Window w = (Window)contextStack.pop();
+        Window.setActive(w);
+    }
+    
+    public long getLastUpdateTime() {
+        return lastUpdateTime;
+    }
+    
+    public void updateLastUpdateTime() {
+        lastUpdateTime = System.currentTimeMillis();
+    }
 }
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/command/BrowserCloseWindowCommand.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/app/nextapp/echo/app/command/BrowserCloseWindowCommand.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,40 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.app.command;
+
+import nextapp.echo.app.Command;
+
+/**
+ * A Web Application Container-specific <code>Command</code> to 
+ * close the current browser window.
+ */  
+public class BrowserCloseWindowCommand 
+implements Command {
+}
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/command/BrowserOpenWindowCommand.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/app/nextapp/echo/app/command/BrowserOpenWindowCommand.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,171 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.app.command;
+
+import nextapp.echo.app.Command;
+import nextapp.echo.app.Extent;
+
+/**
+ * A Web Application Container-specific <code>Command</code> to 
+ * open a new browser window displaying a specific URI.
+ * This action may not propagate to a client if the client has 
+ * pop-up blocking algorithm enabled.
+ */  
+public class BrowserOpenWindowCommand 
+implements Command {
+    
+    /** 
+     * Flag to replace entry in browser's navigation history with new window content.  
+     * Note that some browsers may ignore this flag. 
+     */
+    public static final int FLAG_REPLACE = 0x1;
+    
+    /** Flag to enable the browser's menu bar. */
+    public static final int FLAG_MENUBAR = 0x2;
+    
+    /** Flag to enable the browser's tool bar. */
+    public static final int FLAG_TOOLBAR = 0x4;
+    
+    /** Flag to enable the browser's location input field. */
+    public static final int FLAG_LOCATION = 0x8;
+    
+    /** Flag to enable the browser's status field. */
+    public static final int FLAG_STATUS = 0x10;
+    
+    /** 
+     * Flag to recommend that the browser allow resizing of the window.  
+     * Some environments may always allow the window to be resized.
+     */
+    public static final int FLAG_RESIZABLE = 0x20;
+    
+    /** The URI to display. */
+    private String uri;
+    
+    /** The window name. */
+    private String name;
+    
+    /** The width of the window. */
+    private Extent width;
+    
+    /** The height of the window. */
+    private Extent height;
+    
+    /** Bitwise settings for the window. */
+    private int flags;
+    
+    /**
+     * Creates a new <code>BrowserOpenWindowCommand</code>.
+     * 
+     * @param uri the target URI
+     * @param name the window name (may be null)
+     */
+    public BrowserOpenWindowCommand(String uri, String name) {
+        this(uri, name, null, null, FLAG_MENUBAR | FLAG_TOOLBAR | FLAG_LOCATION | FLAG_RESIZABLE);
+    }
+    
+    /**
+     * Creates a new <code>BrowserOpenWindowCommand</code>.
+     * 
+     * @param uri the target URI
+     * @param name the window name (may be null)
+     * @param width the window width (may be null)
+     * @param height the window width (may be null)
+     * @param flags the configuration flags, zero or more of the following values ORed together:
+     *        <ul>
+     *         <li><code>FLAG_REPLACE</code></li>
+     *         <li><code>FLAG_MENUBAR</code></li>
+     *         <li><code>FLAG_TOOLBAR</code></li>
+     *         <li><code>FLAG_LOCATION</code></li>
+     *         <li><code>FLAG_STATUS</code></li>
+     *         <li><code>FLAG_RESIZABLE</code></li>
+     *        </ul>
+     */
+    public BrowserOpenWindowCommand(String uri, String name, Extent width, Extent height, int flags) {
+        super();
+        this.uri = uri;
+        this.name = name;
+        this.width = width;
+        this.height = height;
+        this.flags = flags;
+    }
+    
+    /**
+     * Returns the width of the window to be opened.
+     * 
+     * @return the width
+     */
+    public Extent getWidth() {
+        return width;
+    }
+    
+    /**
+     * Returns the height of the window to be opened.
+     * 
+     * @return the height
+     */
+    public Extent getHeight() {
+        return height;
+    }
+
+    /**
+     * Returns the window name.
+     * 
+     * @return the window name
+     */
+    public String getName() {
+        return name;
+    }
+    
+    /**
+     * Returns the target URI.
+     * 
+     * @return the target URI
+     */
+    public String getUri() {
+        return uri;
+    }
+    
+    /**
+     * Returns the configuration flags, zero or more of the following values ORed together:
+     * <ul>
+     *  <li><code>FLAG_REPLACE</code></li>
+     *  <li><code>FLAG_MENUBAR</code></li>
+     *  <li><code>FLAG_TOOLBAR</code></li>
+     *  <li><code>FLAG_LOCATION</code></li>
+     *  <li><code>FLAG_STATUS</code></li>
+     *  <li><code>FLAG_RESIZABLE</code></li>
+     * </ul>
+     * 
+     * @return the configuration flags
+     */
+    public int getFlags() {
+        return flags;
+    }
+}
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/command/OpenEcho3WindowCommand.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/app/nextapp/echo/app/command/OpenEcho3WindowCommand.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,58 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.app.command;
+
+import nextapp.echo.app.Command;
+import nextapp.echo.app.Window;
+
+/**
+ * A Web Application Container-specific <code>Command</code> to 
+ * open a new browser window displaying a specific URI.
+ * This action may not propagate to a client if the client has 
+ * pop-up blocking algorithm enabled.
+ */  
+public class OpenEcho3WindowCommand 
+implements Command {
+    
+    /** The window to show. */
+    private Window window;
+    
+    /**
+     * Creates a new <code>OpenEcho3WindowCommand</code>.
+     */
+    public OpenEcho3WindowCommand(Window window) {
+        super();
+        this.window = window;
+    }
+
+	public Window getWindow() {
+		return window;
+	}
+}
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/serial/property/HttpImageReferencePeer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/app/nextapp/echo/app/serial/property/HttpImageReferencePeer.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,111 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.app.serial.property;
+
+import org.w3c.dom.Element;
+import org.w3c.dom.Text;
+
+import nextapp.echo.app.Extent;
+import nextapp.echo.app.HttpImageReference;
+import nextapp.echo.app.ImageReference;
+import nextapp.echo.app.serial.SerialContext;
+import nextapp.echo.app.serial.SerialException;
+import nextapp.echo.app.serial.property.ExtentPeer;
+import nextapp.echo.app.serial.property.ImageReferencePeer;
+import nextapp.echo.app.util.Context;
+import nextapp.echo.app.util.DomUtil;
+
+/**
+ * <code>ImageReferencePeer</code> for <code>HttpImageReference</code> properties.
+ */
+public class HttpImageReferencePeer 
+implements ImageReferencePeer {
+
+    /**
+     * @see nextapp.echo.app.serial.property.ImageReferencePeer#getImageUrl(
+     *      nextapp.echo.app.util.Context, nextapp.echo.app.ImageReference)
+     */
+    public String getImageUrl(Context context, ImageReference imageReference) 
+    throws SerialException {
+        HttpImageReference httpImageReference = (HttpImageReference) imageReference;
+        return httpImageReference.getUri();
+    }
+
+    /**
+     * @see nextapp.echo.app.serial.SerialPropertyPeer#toProperty(nextapp.echo.app.util.Context, 
+     *      java.lang.Class, org.w3c.dom.Element)
+     */
+    public Object toProperty(Context context, Class objectClass, Element propertyElement) 
+    throws SerialException {
+        Element iElement = DomUtil.getChildElementByTagName(propertyElement, "i");
+        if (iElement == null) {
+            return new HttpImageReference(DomUtil.getElementText(propertyElement));
+        } else {
+            String url = DomUtil.getElementText(iElement);
+            if (url == null) {
+                // "u" attribute provided for backward compatibility, but should be considered deprecated.
+                url = iElement.getAttribute("u");
+            }
+            Extent width = iElement.hasAttribute("w") ? ExtentPeer.fromString(iElement.getAttribute("w")) : null;
+            Extent height = iElement.hasAttribute("h") ? ExtentPeer.fromString(iElement.getAttribute("h")) : null;
+            HttpImageReference httpImage = new HttpImageReference(url, width, height);
+            return httpImage;
+        }
+    }
+
+    /**
+     * @see nextapp.echo.app.serial.SerialPropertyPeer#toXml(nextapp.echo.app.util.Context, 
+     *      java.lang.Class, org.w3c.dom.Element, java.lang.Object)
+     */
+    public void toXml(Context context, Class objectClass, Element propertyElement, Object propertyValue) 
+    throws SerialException {
+        SerialContext serialContext = (SerialContext) context.get(SerialContext.class);
+        HttpImageReference httpImage = (HttpImageReference) propertyValue;
+        propertyElement.setAttribute("t", 
+                (serialContext.getFlags() & SerialContext.FLAG_RENDER_SHORT_NAMES) == 0 ? "ImageReference" : "I");
+        Text urlText = serialContext.getDocument().createTextNode(httpImage.getUri());
+
+        Extent width = httpImage.getWidth();
+        Extent height = httpImage.getHeight();
+        if (width == null && height == null) {
+            propertyElement.appendChild(urlText);
+        } else {
+            Element iElement = serialContext.getDocument().createElement("i");
+            iElement.appendChild(urlText);
+            if (width != null ) {
+                iElement.setAttribute("w", ExtentPeer.toString(width));
+            }
+            if (height != null) {
+                iElement.setAttribute("h", ExtentPeer.toString(height));
+            }
+            propertyElement.appendChild(iElement);
+        }
+    }
+}
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/update/ClientUpdateManager.java
--- a/src/server-java/app/nextapp/echo/app/update/ClientUpdateManager.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/update/ClientUpdateManager.java	Mon Apr 27 16:51:56 2009 +0100
@@ -34,8 +34,8 @@
 import java.util.Iterator;
 import java.util.Map;
 
-import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Component;
+import nextapp.echo.app.Window;
 
 /**
  * Stores inputs received from the application container and notifies
@@ -64,16 +64,16 @@
     /** The action value. */
     private Object actionValue;
     
-    /** The relevant <code>ApplicationInstance</code>. */ 
-    private ApplicationInstance applicationInstance;
+    /** The relevant <code>Window</code>. */ 
+    private Window window;
     
     /**
      * Creates a new <Code>ClientUpdateManager</code>.
      * 
      * @param applicationInstance the <code>ApplicationInstance</code> being supported
      */
-    ClientUpdateManager(ApplicationInstance applicationInstance) {
-        this.applicationInstance = applicationInstance;
+    ClientUpdateManager(Window window) {
+        this.window = window;
     }
     
     /**
@@ -111,7 +111,8 @@
         while (applicationUpdateIt.hasNext()) {
             String propertyName = (String) applicationUpdateIt.next();
             Object propertyValue = applicationUpdateMap.get(propertyName);
-            applicationInstance.processInput(propertyName, propertyValue);
+            window.getApplicationInstance().processInput(propertyName, propertyValue);
+            window.processInput(propertyName, propertyValue);
         }
         
         // Process property updates. 
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/update/ServerUpdateManager.java
--- a/src/server-java/app/nextapp/echo/app/update/ServerUpdateManager.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/update/ServerUpdateManager.java	Mon Apr 27 16:51:56 2009 +0100
@@ -39,9 +39,9 @@
 import java.util.List;
 import java.util.Map;
 
-import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Command;
 import nextapp.echo.app.Component;
+import nextapp.echo.app.Window;
 
 /**
  * Monitors updates to component hierarchy and records deltas between 
@@ -110,9 +110,6 @@
     /** The <code>ClientUpdateManager</code> that will be used to process input from the client. */
     private ClientUpdateManager clientUpdateManager;
     
-    /** The updating <code>ApplicationInstance</code>. */
-    private ApplicationInstance applicationInstance;
-    
     /** Cache of <code>ServerComponentUpdate</code>s (returned by multiple invocations of <code>getComponentUpdates()</code>.) */
     private ServerComponentUpdate[] cachedComponentUpdates;
     
@@ -125,9 +122,8 @@
      * @param applicationInstance the relevant <code>ApplicationInstance</code>
      * @see #init(nextapp.echo.app.update.ClientUpdateManager)
      */
-    public ServerUpdateManager(ApplicationInstance applicationInstance) {
+    public ServerUpdateManager() {
         super();
-        this.applicationInstance = applicationInstance;
         applicationUpdateMap = new HashMap();
         componentUpdateMap = new HashMap();
         fullRefreshUpdate = new ServerComponentUpdate(null);
@@ -446,10 +442,10 @@
 
         fullRefreshUpdate = new ServerComponentUpdate(null);
 
-        if (applicationInstance.getDefaultWindow() != null) {
+        if (Window.getActive() != null) {
             // Default window may be null if an operation is invoked from within the
             // ApplicationInstsance.init() implementation that causes a full refresh.
-            fullRefreshUpdate.removeDescendant(applicationInstance.getDefaultWindow());
+            fullRefreshUpdate.removeDescendant(Window.getActive());
         }
 
         Iterator it = componentUpdateMap.keySet().iterator();
diff -r 9e3ce0692488 src/server-java/app/nextapp/echo/app/update/UpdateManager.java
--- a/src/server-java/app/nextapp/echo/app/update/UpdateManager.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/app/nextapp/echo/app/update/UpdateManager.java	Mon Apr 27 16:51:56 2009 +0100
@@ -31,7 +31,8 @@
 
 import java.io.Serializable;
 
-import nextapp.echo.app.ApplicationInstance;
+import nextapp.echo.app.TaskQueueHandle;
+import nextapp.echo.app.Window;
 
 /**
  * Primary interface to update management architecture.
@@ -44,7 +45,8 @@
 
     private ClientUpdateManager clientUpdateManager;
     private ServerUpdateManager serverUpdateManager;
-    private ApplicationInstance applicationInstance;
+    private Window window;
+    private TaskQueueHandle asyncUpdateQueue;
     
     /**
      * Creates a new <code>UpdateManager</code>.
@@ -54,11 +56,11 @@
      * @param applicationInstance the <code>ApplicationInstance</code> which
      *        this manager will service
      */
-    public UpdateManager(ApplicationInstance applicationInstance) {
+    public UpdateManager(Window window) {
         super();
-        this.applicationInstance = applicationInstance;
-        clientUpdateManager = new ClientUpdateManager(applicationInstance);
-        serverUpdateManager = new ServerUpdateManager(applicationInstance);
+        this.window = window;
+        clientUpdateManager = new ClientUpdateManager(window);
+        serverUpdateManager = new ServerUpdateManager();
         serverUpdateManager.init(clientUpdateManager);
     }
     
@@ -92,10 +94,10 @@
         clientUpdateManager.process();
         
         // Processed queued asynchronous tasks.
-        applicationInstance.processQueuedTasks();
+        window.processQueuedTasks();
         
         // Validate the state of the hierarchy prior to rendering.
-        applicationInstance.doValidation();
+        window.getApplicationInstance().doValidation();
     }
     
     /**
@@ -105,4 +107,31 @@
         clientUpdateManager.purge();
         serverUpdateManager.purge();
     }
+
+    public void createAsyncUpdateQueue() {
+        if (this.asyncUpdateQueue != null)
+            return;
+        this.asyncUpdateQueue = window.createTaskQueue();
+    }
+
+    public void applyAsyncUpdates() {
+        createAsyncUpdateQueue();
+        window.enqueueTask(this.asyncUpdateQueue, new AsyncUpdateTask(window));
+    }
+    
+
+    /**
+     * A task used to send updates that have been made asynchronously
+     * to a window down to the client
+     * @author Lloyd Colling
+     *
+     */
+    public static class AsyncUpdateTask implements Runnable {
+        
+        public AsyncUpdateTask(Window w) {
+        }
+
+        public void run() {
+        }
+    }
 }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/GhostTask.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/GhostTask.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/GhostTask.java	Mon Apr 27 16:51:56 2009 +0100
@@ -30,6 +30,7 @@
 package nextapp.echo.testapp.interactive;
 
 import nextapp.echo.app.TaskQueueHandle;
+import nextapp.echo.app.Window;
 
 import nextapp.echo.app.Button;
 
@@ -65,13 +66,13 @@
             if (countOnly) {
                 ++iteration;
                 app.setGhostIterationWindowTitle(iteration);
-                app.enqueueTask(taskQueue, this);
+                Window.getActive().enqueueTask(taskQueue, this);
             } else {
                 for (int i = 0; i < clicksPerIteration; ++i) {
                     if (script == null) {
                         RandomClick.clickRandomButton();
                     } else {
-                        Button button = (Button) app.getDefaultWindow().getComponent(script[scriptIndex]);
+                        Button button = (Button) Window.getActive().getComponent(script[scriptIndex]);
                         button.doAction();
                         ++scriptIndex;
                         if (scriptIndex >= script.length) {
@@ -90,7 +91,7 @@
                 } else if (indefiniteAllowed) {
                     ++iteration;
                     app.setGhostIterationWindowTitle(iteration);
-                    app.enqueueTask(taskQueue, this);
+                    Window.getActive().enqueueTask(taskQueue, this);
                 }
             }
         }
@@ -164,6 +165,6 @@
         if (runTime != -1) {
             stopTime = System.currentTimeMillis() + runTime;
         }
-        app.enqueueTask(taskQueue, task);
+        Window.getActive().enqueueTask(taskQueue, task);
     }
 }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/InteractiveApp.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/InteractiveApp.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/InteractiveApp.java	Mon Apr 27 16:51:56 2009 +0100
@@ -29,6 +29,8 @@
 
 package nextapp.echo.testapp.interactive;
 
+import java.util.Map;
+
 import nextapp.echo.app.TaskQueueHandle;
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Window;
@@ -117,9 +119,9 @@
     public void consoleWrite(String message) {
         if (console == null) {
             console = new ConsoleWindowPane();
-            getDefaultWindow().getContent().add(console);
+            Window.getActive().getContent().add(console);
         } else if (console.getParent() == null) {
-            getDefaultWindow().getContent().add(console);
+            Window.getActive().getContent().add(console);
         }
         console.writeMessage(message);
     }
@@ -162,12 +164,12 @@
     /**
      * @see nextapp.echo.app.ApplicationInstance#init()
      */
-    public Window init() {
+    public Window init(Map parameters) {
         ContainerContext cc = (ContainerContext) getContextProperty(ContainerContext.CONTEXT_PROPERTY_NAME);
         clientPropertiesAvailableAtInit = cc != null && cc.getClientProperties() != null;
         
         setStyleSheet(Styles.DEFAULT_STYLE_SHEET);
-        mainWindow = new Window();
+        mainWindow = new Window(this);
         mainWindow.setTitle("NextApp Echo Test Application");
         mainWindow.setContent(new WelcomePane());
         
@@ -225,7 +227,7 @@
         if (ghostTaskQueue != null) {
             return;
         }
-        ghostTaskQueue = createTaskQueue();
+        ghostTaskQueue = Window.getActive().createTaskQueue();
         ContainerContext containerContext = 
                 (ContainerContext) getContextProperty(ContainerContext.CONTEXT_PROPERTY_NAME);
         containerContext.setTaskQueueCallbackInterval(ghostTaskQueue, interval);
@@ -236,7 +238,7 @@
      * Stops the currently running ghost test.
      */
     public void stopGhostTest() {
-        removeTaskQueue(ghostTaskQueue);
+        Window.getActive().removeTaskQueue(ghostTaskQueue);
         ghostTaskQueue = null;
     }
 }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/RandomClick.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/RandomClick.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/RandomClick.java	Mon Apr 27 16:51:56 2009 +0100
@@ -100,7 +100,7 @@
      * programmatically clicks one.
      */
     public static void clickRandomButton() {
-        Window window = ApplicationInstance.getActive().getDefaultWindow();
+        Window window = Window.getActive();
         List buttonList = new ArrayList();
         findButtons(buttonList, window);
         AbstractButton button = (AbstractButton) buttonList.get((int) (buttonList.size() * Math.random()));
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/TestPane.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/TestPane.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/TestPane.java	Mon Apr 27 16:51:56 2009 +0100
@@ -40,6 +40,7 @@
 import nextapp.echo.app.Extent;
 import nextapp.echo.app.Label;
 import nextapp.echo.app.SplitPane;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
 
@@ -217,6 +218,6 @@
      */
     public void init() {
         super.init();
-        getApplicationInstance().setFocusedComponent(testLaunchButtonsColumn.getComponent(0));
+        Window.getActive().setFocusedComponent(testLaunchButtonsColumn.getComponent(0));
     };
 }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/WelcomePane.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/WelcomePane.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/WelcomePane.java	Mon Apr 27 16:51:56 2009 +0100
@@ -38,6 +38,7 @@
 import nextapp.echo.app.Label;
 import nextapp.echo.app.Row;
 import nextapp.echo.app.SplitPane;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
@@ -125,6 +126,6 @@
      */
     public void init() {
         super.init();
-        getApplicationInstance().setFocusedComponent(continueButton);
+        Window.getActive().setFocusedComponent(continueButton);
     }
 }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/CommandTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/CommandTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/CommandTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -33,10 +33,10 @@
 import nextapp.echo.app.Column;
 import nextapp.echo.app.Extent;
 import nextapp.echo.app.Insets;
+import nextapp.echo.app.command.BrowserOpenWindowCommand;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
 import nextapp.echo.app.layout.SplitPaneLayoutData;
-import nextapp.echo.webcontainer.command.BrowserOpenWindowCommand;
 import nextapp.echo.webcontainer.command.BrowserRedirectCommand;
 
 /**
@@ -57,7 +57,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(new BrowserRedirectCommand("http://echo.nextapp.com"));
+                getContainingWindow().enqueueCommand(new BrowserRedirectCommand("http://echo.nextapp.com"));
             }
         });
         add(button);
@@ -66,7 +66,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(new BrowserRedirectCommand("mailto:info@nextapp.com"));
+                getContainingWindow().enqueueCommand(new BrowserRedirectCommand("mailto:info@nextapp.com"));
             }
         });
         add(button);
@@ -75,7 +75,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(
+                getContainingWindow().enqueueCommand(
                         new BrowserOpenWindowCommand("http://echo.nextapp.com", null));
             }
         });
@@ -85,7 +85,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(
+                getContainingWindow().enqueueCommand(
                         new BrowserOpenWindowCommand("http://echo.nextapp.com", 
                         "auxwindow", new Extent(640), new Extent(240), BrowserOpenWindowCommand.FLAG_REPLACE));
             }
@@ -96,7 +96,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(
+                getContainingWindow().enqueueCommand(
                         new BrowserOpenWindowCommand("http://echo.nextapp.com", 
                         "auxwindow", new Extent(40, Extent.PERCENT), new Extent(60, Extent.PERCENT),
                         BrowserOpenWindowCommand.FLAG_REPLACE));
@@ -107,7 +107,7 @@
         button.setStyleName("Default");
         button.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().enqueueCommand(
+                getContainingWindow().enqueueCommand(
                         new BrowserOpenWindowCommand("http://echo.nextapp.com", 
                         "auxwindow", new Extent(40, Extent.PERCENT), new Extent(60, Extent.PERCENT),
                         BrowserOpenWindowCommand.FLAG_REPLACE | BrowserOpenWindowCommand.FLAG_MENUBAR |
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ContentPaneTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ContentPaneTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ContentPaneTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -38,6 +38,7 @@
 import nextapp.echo.app.Insets;
 import nextapp.echo.app.Label;
 import nextapp.echo.app.SplitPane;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
@@ -56,7 +57,7 @@
         super();
         setStyleName("TestControls");
         
-        final ContentPane rootContentPane = InteractiveApp.getApp().getDefaultWindow().getContent();
+        final ContentPane rootContentPane = Window.getActive().getContent();
         
         ButtonColumn controlsColumn = new ButtonColumn();
         controlsColumn.setStyleName("TestControlsColumn");
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/FocusTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/FocusTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/FocusTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -84,7 +84,7 @@
             final int index = i;
             controlsColumn.addButton("Focus " + i, new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().setFocusedComponent(focusColumn.getComponent(index));
+                    getContainingWindow().setFocusedComponent(focusColumn.getComponent(index));
                 }
             });
         }
@@ -96,7 +96,7 @@
             final int index = i;
             controlsColumn.addButton("Focus " + i, new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().setFocusedComponent(focusColumn.getComponent(index));
+                    getContainingWindow().setFocusedComponent(focusColumn.getComponent(index));
                 }
             });
         }
@@ -106,7 +106,7 @@
         focusTextField = new TextField();
         controlsColumn.addButton("Focus TextField", new ActionListener(){
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(focusTextField);
+                getContainingWindow().setFocusedComponent(focusTextField);
             }
         });
         testColumn.add(focusTextField);
@@ -114,7 +114,7 @@
         focusTextArea = new TextArea();
         controlsColumn.addButton("Focus TextArea", new ActionListener(){
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(focusTextArea);
+                getContainingWindow().setFocusedComponent(focusTextArea);
             }
         });
         testColumn.add(focusTextArea);
@@ -122,7 +122,7 @@
         focusSelectField = new SelectField(new Object[]{ "One", "Two", "Three" });
         controlsColumn.addButton("Focus SelectField", new ActionListener(){
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(focusSelectField);
+                getContainingWindow().setFocusedComponent(focusSelectField);
             }
         });
         testColumn.add(focusSelectField);
@@ -130,7 +130,7 @@
         focusListBox = new ListBox(new Object[]{ "One", "Two", "Three" });
         controlsColumn.addButton("Focus ListBox", new ActionListener(){
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(focusListBox);
+                getContainingWindow().setFocusedComponent(focusListBox);
             }
         });
         testColumn.add(focusListBox);
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/GridTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/GridTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/GridTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -580,7 +580,7 @@
                 windowPane.setInsets(new Insets(10));
                 windowPane.setStyleName("Default");
                 windowPane.setDefaultCloseOperation(WindowPane.DISPOSE_ON_CLOSE);
-                InteractiveApp.getApp().getDefaultWindow().getContent().add(windowPane);
+                getContainingWindow().getContent().add(windowPane);
 
                 Grid grid0 = new Grid();
                 grid0.setBorder(new Border(1, Color.BLUE, Border.STYLE_SOLID));
@@ -609,7 +609,7 @@
                 windowPane.setInsets(new Insets(10));
                 windowPane.setStyleName("Default");
                 windowPane.setDefaultCloseOperation(WindowPane.DISPOSE_ON_CLOSE);
-                InteractiveApp.getApp().getDefaultWindow().getContent().add(windowPane);
+                getContainingWindow().getContent().add(windowPane);
                 
                 GridLayoutData gld;
                 ColumnLayoutData cld;
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ListBoxTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ListBoxTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/ListBoxTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -727,12 +727,12 @@
         });
         controlsColumn.addButton("Focus SelectField1", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(selectField1);
+                getContainingWindow().setFocusedComponent(selectField1);
             }
         });
         controlsColumn.addButton("Focus SelectField2", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(selectField2);
+                getContainingWindow().setFocusedComponent(selectField2);
             }
         });
         
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/PushTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/PushTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/PushTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -74,7 +74,7 @@
                 }
                 ApplicationInstance app = getApplicationInstance();
                 if (app != null) {
-                    app.enqueueTask(taskQueue, new ProgressUpdateTask(percentComplete, slow));
+                    getContainingWindow().enqueueTask(taskQueue, new ProgressUpdateTask(percentComplete, slow));
                     try {
                         Thread.sleep((long) (Math.random() * 1000));
                     } catch (InterruptedException ex) { }
@@ -108,7 +108,7 @@
                         + "% complete, text field value=" + textField.getText());
             } else {
                 statusLabel.setText("Asynchronous operation complete, text field value=" + textField.getText());
-                getApplicationInstance().removeTaskQueue(taskQueue);
+                getContainingWindow().removeTaskQueue(taskQueue);
                 taskQueue = null;
             }
         }
@@ -136,7 +136,7 @@
             public void actionPerformed(ActionEvent e) {
                 if (taskQueue == null) {
                     // Only start new operation if taskQueue is null, indicating that last operation has completed.
-                    taskQueue = getApplicationInstance().createTaskQueue();
+                    taskQueue = getContainingWindow().createTaskQueue();
                     new SimulatedServerOperation(false).start();
                 }
             }
@@ -149,7 +149,7 @@
             public void actionPerformed(ActionEvent e) {
                 if (taskQueue == null) {
                     // Only start new operation if taskQueue is null, indicating that last operation has completed.
-                    taskQueue = getApplicationInstance().createTaskQueue();
+                    taskQueue = getContainingWindow().createTaskQueue();
                     new SimulatedServerOperation(true).start();
                 }
             }
@@ -174,7 +174,7 @@
      */
     public void dispose() {
         if (taskQueue != null) {
-            getApplicationInstance().removeTaskQueue(taskQueue);
+            getContainingWindow().removeTaskQueue(taskQueue);
         }
         super.dispose();
     }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/StyleSheetTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/StyleSheetTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/StyleSheetTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -44,6 +44,7 @@
 import nextapp.echo.app.Column;
 import nextapp.echo.app.StyleSheet;
 import nextapp.echo.app.TextArea;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.serial.SerialException;
 import nextapp.echo.app.serial.StyleSheetLoader;
@@ -164,7 +165,7 @@
             windowPane.setStyleName("Default");
             windowPane.setTitle("Exception Setting Custom Style");
             windowPane.add(new Label(w.toString()));
-            InteractiveApp.getApp().getDefaultWindow().getContent().add(windowPane);
+            Window.getActive().getContent().add(windowPane);
         } catch (IOException ex) {
             throw new RuntimeException(ex);
         }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/TextComponentTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/TextComponentTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/TextComponentTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -527,17 +527,17 @@
         });
         controlsColumn.addButton("Focus TextField", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(textField);
+                getContainingWindow().setFocusedComponent(textField);
             }
         });
         controlsColumn.addButton("Focus PasswordField", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(passwordField);
+                getContainingWindow().setFocusedComponent(passwordField);
             }
         });
         controlsColumn.addButton("Focus TextArea", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().setFocusedComponent(textArea);
+                getContainingWindow().setFocusedComponent(textArea);
             }
         });
         controlsColumn.addButton("Sync Mode: On Action", new ActionListener() {
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneExamplesTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneExamplesTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneExamplesTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -48,6 +48,7 @@
 import nextapp.echo.app.Table;
 import nextapp.echo.app.TextArea;
 import nextapp.echo.app.TextField;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.button.ButtonGroup;
 import nextapp.echo.app.event.ActionEvent;
@@ -433,7 +434,7 @@
         contentPane.add(contentColumn);
         
         WindowTestControls windowTestControls;
-        windowTestControls = new WindowTestControls("Root Level", InteractiveApp.getApp().getDefaultWindow().getContent());
+        windowTestControls = new WindowTestControls("Root Level", Window.getActive().getContent());
         controlsColumn.add(windowTestControls);
         windowTestControls = new WindowTestControls("Embedded", contentPane);
         controlsColumn.add(windowTestControls);
@@ -490,7 +491,7 @@
             if (launchModals && i == 1) {
                 button.addActionListener(new ActionListener() {
                     public void actionPerformed(ActionEvent e) {
-                        getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                        getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                     }
                 });
             }
@@ -505,7 +506,7 @@
             if (launchModals && i == 1) {
                 radioButton.addActionListener(new ActionListener() {
                     public void actionPerformed(ActionEvent e) {
-                        getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                        getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                     }
                 });
             }
@@ -518,7 +519,7 @@
             if (launchModals && i == 1) {
                 checkBox.addActionListener(new ActionListener() {
                     public void actionPerformed(ActionEvent e) {
-                        getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                        getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                     }
                 });
             }
@@ -534,7 +535,7 @@
         if (launchModals) {
             table.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -545,7 +546,7 @@
         if (launchModals) {
             textField.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -556,7 +557,7 @@
         if (launchModals) {
             passwordField.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -567,7 +568,7 @@
         if (launchModals) {
             textArea.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -577,7 +578,7 @@
         if (launchModals) {
             listBox.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -588,7 +589,7 @@
         if (launchModals) {
             listBox.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
@@ -598,7 +599,7 @@
         if (launchModals) {
             selectField.addActionListener(new ActionListener() {
                 public void actionPerformed(ActionEvent e) {
-                    getApplicationInstance().getDefaultWindow().getContent().add(createComponentSamplerModalTestWindow());
+                    getContainingWindow().getContent().add(createComponentSamplerModalTestWindow());
                 }
             });
         }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowPaneTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -37,6 +37,7 @@
 import nextapp.echo.app.Insets;
 import nextapp.echo.app.Label;
 import nextapp.echo.app.SplitPane;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.WindowPane;
 import nextapp.echo.app.event.ActionEvent;
 import nextapp.echo.app.event.ActionListener;
@@ -525,7 +526,7 @@
                 WindowPane modalWindow = new WindowPane();
                 modalWindow.setTitle("Blocking Modal WindowPane");
                 modalWindow.setModal(true);
-                InteractiveApp.getApp().getDefaultWindow().getContent().add(modalWindow);
+                Window.getActive().getContent().add(modalWindow);
             }
         });
     }
diff -r 9e3ce0692488 src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowTest.java
--- a/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowTest.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/testapp-interactive/lib/nextapp/echo/testapp/interactive/testscreen/WindowTest.java	Mon Apr 27 16:51:56 2009 +0100
@@ -51,38 +51,38 @@
 
         controlsColumn.addButton("Set window title", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setTitle(
+                getContainingWindow().setTitle(
                         "Echo Test Application " + ((int) (Math.random() * Integer.MAX_VALUE)));
             }
         });
         controlsColumn.addButton("Set Foreground", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setForeground(StyleUtil.randomColor());
+                getContainingWindow().setForeground(StyleUtil.randomColor());
             }
         });
         controlsColumn.addButton("Clear Foreground", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setForeground(null);
+                getContainingWindow().setForeground(null);
             }
         });
         controlsColumn.addButton("Set Background", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setBackground(StyleUtil.randomColor());
+                getContainingWindow().setBackground(StyleUtil.randomColor());
             }
         });
         controlsColumn.addButton("Clear Background", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setBackground(null);
+                getContainingWindow().setBackground(null);
             }
         });
         controlsColumn.addButton("Set Font", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setFont(StyleUtil.randomFont());
+                getContainingWindow().setFont(StyleUtil.randomFont());
             }
         });
         controlsColumn.addButton("Clear Font", new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                getApplicationInstance().getDefaultWindow().setFont(null);
+                getContainingWindow().setFont(null);
             }
         });
         controlsColumn.addButton("Multiple Content Changes", new ActionListener() {
diff -r 9e3ce0692488 src/server-java/webcontainer/META-INF/nextapp/echo/SynchronizePeerBindings.properties
--- a/src/server-java/webcontainer/META-INF/nextapp/echo/SynchronizePeerBindings.properties	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/META-INF/nextapp/echo/SynchronizePeerBindings.properties	Mon Apr 27 16:51:56 2009 +0100
@@ -86,7 +86,11 @@
                                              nextapp.echo.webcontainer.sync.component.AbstractListComponentPeer$ListDataPeer
 
 # Command Synchronize Peers
-nextapp.echo.webcontainer.command.BrowserOpenWindowCommand \
+nextapp.echo.app.command.BrowserOpenWindowCommand \
                                              nextapp.echo.webcontainer.sync.command.BrowserOpenWindowCommandPeer
+nextapp.echo.app.command.BrowserCloseWindowCommand \
+                                             nextapp.echo.webcontainer.sync.command.BrowserCloseWindowCommandPeer
+nextapp.echo.app.command.OpenEcho3WindowCommand \
+                                             nextapp.echo.webcontainer.sync.command.OpenEcho3WindowCommandPeer
 nextapp.echo.webcontainer.command.BrowserRedirectCommand \
                                              nextapp.echo.webcontainer.sync.command.BrowserRedirectCommandPeer
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/ClientMessage.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/ClientMessage.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/ClientMessage.java	Mon Apr 27 16:51:56 2009 +0100
@@ -96,6 +96,9 @@
     /** The sequential transaction identifier, used for determining if the client has the current application state. */
     private int transactionId;
     
+    /** The identifier of the window for which the client message applies */
+    private String windowId;
+    
     /**
      * Creates a new <Code>ClientMessage</code>.
      * 
@@ -110,6 +113,9 @@
         // Retrieve message type, transaction id.
         type = document.getDocumentElement().getAttribute("t");
         transactionId = Integer.parseInt(document.getDocumentElement().getAttribute("i"));
+        
+        // Retrieve the windowId
+        windowId = document.getDocumentElement().getAttribute("w");
     }
     
     /**
@@ -140,6 +146,15 @@
     }
     
     /**
+     * Returns the identifier of the window this message applies to, if provided.
+     * 
+     * @return the window id
+     */
+    public String getWindowId() {
+        return windowId;
+    }
+    
+    /**
      * Processes the top-level directives of the <code>ClientMessage</code>, invoking the registered 
      * <code>ClientMesage.Processor</code>s associated with each top-level directive type.
      * 
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentFocusInputProcessor.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentFocusInputProcessor.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentFocusInputProcessor.java	Mon Apr 27 16:51:56 2009 +0100
@@ -33,6 +33,7 @@
 import org.w3c.dom.Element;
 
 import nextapp.echo.app.Component;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.util.Context;
 import nextapp.echo.app.util.DomUtil;
 
@@ -52,6 +53,6 @@
         Element focusElement = DomUtil.getChildElementByTagName(dirElement, "focus");
         String componentId = focusElement.getAttribute("i");
         Component component = userInstance.getComponentByClientRenderId(componentId);
-        userInstance.getApplicationInstance().setFocusedComponent(component);
+        Window.getActive().setFocusedComponent(component);
     }
 }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentInputProcessor.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentInputProcessor.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/ComponentInputProcessor.java	Mon Apr 27 16:51:56 2009 +0100
@@ -35,10 +35,10 @@
 import java.util.Map;
 
 import nextapp.echo.app.Component;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.serial.PropertyPeerFactory;
 import nextapp.echo.app.serial.SerialException;
 import nextapp.echo.app.serial.SerialPropertyPeer;
-import nextapp.echo.app.update.UpdateManager;
 import nextapp.echo.app.util.Context;
 import nextapp.echo.app.util.DomUtil;
 import nextapp.echo.app.util.Log;
@@ -160,7 +160,6 @@
         userInstance.prepareApplicationInstance();
         
         PropertyPeerFactory propertyPeerFactory = (PropertyPeerFactory) context.get(PropertyPeerFactory.class);
-        UpdateManager updateManager = userInstance.getApplicationInstance().getUpdateManager();
 
         Iterator updatedComponentIdIt  = getUpdatedComponentIds();
         while (updatedComponentIdIt.hasNext()) {
@@ -223,7 +222,7 @@
             }
         }
 
-        updateManager.processClientUpdates();
+        Window.getActive().getUpdateManager().processClientUpdates();
         
     }
 }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/InputProcessor.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/InputProcessor.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/InputProcessor.java	Mon Apr 27 16:51:56 2009 +0100
@@ -34,6 +34,8 @@
 import org.w3c.dom.Document;
 import org.xml.sax.SAXException;
 
+import nextapp.echo.app.ApplicationInstance;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.update.ClientUpdateManager;
 import nextapp.echo.app.update.UpdateManager;
 import nextapp.echo.app.util.Context;
@@ -73,7 +75,7 @@
             if (specificContextClass == ClientMessage.class) {
                 return clientMessage;
             } else if (specificContextClass == ClientUpdateManager.class) {
-                return conn.getUserInstance().getApplicationInstance().getUpdateManager().getClientUpdateManager();
+                return Window.getActive().getUpdateManager().getClientUpdateManager();
             } else {
                 return super.get(specificContextClass);
             }
@@ -111,27 +113,31 @@
     throws IOException {
         Document document = XmlRequestParser.parse(conn.getRequest(), conn.getUserInstance().getCharacterEncoding());        
         clientMessage = new ClientMessage(document);
-        UserInstance userInstance = conn.getUserInstance();
-        UpdateManager updateManager = userInstance.getUpdateManager();
+        ApplicationInstance appInstance = ApplicationInstance.getActive();
+        Window.setActive(appInstance.getWindow(clientMessage.getWindowId()));
+        if (Window.getActive() == null)
+            throw new RuntimeException("Request received for unknown window: " + clientMessage.getWindowId());
+        
+        UpdateManager updateManager = Window.getActive().getUpdateManager();
         Context context = new InputContext();
         
         if (ClientMessage.TYPE_INITIALIZE.equals(clientMessage.getType())) {
             // Flag full refresh if initializing.
             updateManager.getServerUpdateManager().processFullRefresh();
-        } else if (clientMessage.getTransactionId() != userInstance.getCurrentTransactionId()) {
+        } else if (clientMessage.getTransactionId() != Window.getActive().getCurrentTransactionId()) {
             // Flag full refresh for an out of sync client.
             updateManager.getServerUpdateManager().processFullRefresh();
             this.syncState.setOutOfSync();
             if (WebContainerServlet.DEBUG_PRINT_MESSAGES_TO_CONSOLE) {
                 Log.log("Client out of sync: client id = " + clientMessage.getTransactionId() + 
-                        ", server id = " + userInstance.getCurrentTransactionId());
+                        ", server id = " + Window.getActive().getCurrentTransactionId());
             }
         }
         
         if (WebContainerServlet.DEBUG_PRINT_MESSAGES_TO_CONSOLE) {
             // Print ClientMessage to console. 
             try {
-                System.err.println("======== Request: " + userInstance.getCurrentTransactionId() + " ========");
+                System.err.println("======== Request: " + Window.getActive().getCurrentTransactionId() + " ========");
                 DomUtil.save(clientMessage.getDocument(), System.err, DomUtil.OUTPUT_PROPERTIES_INDENT);
                 System.err.println();
             } catch (SAXException ex) {
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/OutputProcessor.java	Mon Apr 27 16:51:56 2009 +0100
@@ -143,7 +143,7 @@
         document = serverMessage.getDocument();
         context = new OutputContext();
         userInstance = conn.getUserInstance();
-        serverUpdateManager = userInstance.getUpdateManager().getServerUpdateManager();
+        serverUpdateManager = Window.getActive().getUpdateManager().getServerUpdateManager();
         propertyPeerFactory = PropertySerialPeerFactory.forClassLoader(classLoader);
     }
         
@@ -153,7 +153,7 @@
      */
     public void process() 
     throws IOException {
-        serverMessage.setTransactionId(userInstance.getNextTransactionId());
+        serverMessage.setTransactionId(Window.getActive().getNextTransactionId());
         if (syncState.isOutOfSync()) {
             serverMessage.setResync();
         }
@@ -182,7 +182,7 @@
         if (WebContainerServlet.DEBUG_PRINT_MESSAGES_TO_CONSOLE) {
             // Print ServerMessage DOM to console. 
             try {
-                System.err.println("======== Response: " + userInstance.getCurrentTransactionId() + " ========");
+                System.err.println("======== Response: " + Window.getActive().getCurrentTransactionId() + " ========");
                 DomUtil.save(document, System.err, DomUtil.OUTPUT_PROPERTIES_INDENT);
                 System.err.println();
             } catch (SAXException ex) {
@@ -196,7 +196,7 @@
      * Renders asynchronous callback settings to server message.
      */
     private void renderAsyncState() {
-        if (userInstance.getApplicationInstance().hasTaskQueues()) {
+        if (Window.getActive().hasTaskQueues()) {
             serverMessage.setAttribute("async-interval", Integer.toString(userInstance.getCallbackInterval()));
         }
     }
@@ -349,7 +349,7 @@
         // Special case: clear/full redraw.  Render entire component hierarchy by rendering an
         // add directive to add the Window's child ContentPane to the root.   
         // Render all properties of Window. 
-        Window window = userInstance.getApplicationInstance().getDefaultWindow();
+        Window window = Window.getActive();
         serverMessage.addDirective(ServerMessage.GROUP_ID_INIT, "CSyncIn", "cl");
         serverMessage.setAttribute("root", userInstance.getRootHtmlElementId());
         
@@ -403,7 +403,7 @@
             Set removedIdSet = new HashSet(); // Set containing removed ids, to avoid removing same id multiple times.
             StringBuffer out = new StringBuffer();
             for (int j = 0; j < removedChildren.length; ++j) {
-                String renderId = userInstance.getClientRenderId(removedChildren[j]);
+                String renderId = userInstance.getWindowClientRenderId(removedChildren[j], Window.getActive());
                 if (removedIdSet.contains(renderId)) {
                     continue;
                 }
@@ -622,13 +622,13 @@
         if (c.getFocusNextId() != null || c.getFocusPreviousId() != null) {
             Element fElement = document.createElement("f");
             if (c.getFocusNextId() != null) {
-                Component focusComponent = c.getApplicationInstance().getComponentByRenderId(c.getFocusNextId());
+                Component focusComponent = c.getContainingWindow().getComponentByRenderId(c.getFocusNextId());
                 if (focusComponent != null) {
                     fElement.setAttribute("n", userInstance.getClientRenderId(focusComponent));
                 }
             }
             if (c.getFocusPreviousId() != null) {
-                Component focusComponent = c.getApplicationInstance().getComponentByRenderId(c.getFocusPreviousId());
+                Component focusComponent = c.getContainingWindow().getComponentByRenderId(c.getFocusPreviousId());
                 if (focusComponent != null) {
                     fElement.setAttribute("p", userInstance.getClientRenderId(focusComponent));
                 }
@@ -855,7 +855,7 @@
      * Renders the focus state of the application, if necessary.
      */
     private void renderFocus() {
-        Component focusedComponent = userInstance.getApplicationInstance().getFocusedComponent();
+        Component focusedComponent = Window.getActive().getFocusedComponent();
         if (focusedComponent != null) {
             Element focusElement = serverMessage.addDirective(ServerMessage.GROUP_ID_UPDATE, "CFocus", "focus");
             focusElement.setAttribute("i", userInstance.getClientRenderId(focusedComponent));
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/RenderState.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/RenderState.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/RenderState.java	Mon Apr 27 16:51:56 2009 +0100
@@ -1,40 +1,10 @@
-/* 
- * This file is part of the Echo Web Application Framework (hereinafter "Echo").
- * Copyright (C) 2002-2009 NextApp, Inc.
- *
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- */
-
 package nextapp.echo.webcontainer;
 
-import java.io.Serializable;
-
 /**
  * Describes the last rendered state of a component on the client browser.
  * A <code>RenderState</code> is set when rendering is complete.
  * This is a marker interface.
  */
-public interface RenderState 
-extends Serializable { }
+public interface RenderState extends nextapp.echo.app.RenderState {
+
+}
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/ServerMessage.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/ServerMessage.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/ServerMessage.java	Mon Apr 27 16:51:56 2009 +0100
@@ -36,7 +36,6 @@
 import org.w3c.dom.Element;
 import org.w3c.dom.NodeList;
 
-import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.util.DomUtil;
 
 /**
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/Synchronization.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/Synchronization.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/Synchronization.java	Mon Apr 27 16:51:56 2009 +0100
@@ -31,6 +31,11 @@
 
 import java.io.IOException;
 
+import nextapp.echo.app.ApplicationInstance;
+import nextapp.echo.app.Command;
+import nextapp.echo.app.Window;
+import nextapp.echo.app.update.ServerUpdateManager;
+
 /**
  * The high-level object which encapsulates the core of the client-server synchronization process for 
  * server-side applications.
@@ -98,25 +103,44 @@
             }
 
             userInstance.setActive(true);
+            userInstance.prepareApplicationInstance();
             try {
                 // Process client input.
                 InputProcessor inputProcessor = new InputProcessor(this, conn);
                 inputProcessor.process();
                 
+                Window.getActive().updateLastUpdateTime();
+                
                 // Manage render states.
-                if (userInstance.getUpdateManager().getServerUpdateManager().isFullRefreshRequired()) {
-                    userInstance.clearRenderStates();
+                if (Window.getActive().getUpdateManager().getServerUpdateManager().isFullRefreshRequired()) {
+                    Window.getActive().clearRenderStates();
                 } else {
-                    userInstance.purgeRenderStates();
+                    Window.getActive().purgeRenderStates();
                 }
                 
                 // Render updates.
                 OutputProcessor outputProcessor = new OutputProcessor(this, conn);
                 outputProcessor.process();
+
+                Window [] ws = ApplicationInstance.getActive().getWindows();
+                for (int i = 0; i < ws.length; i++) {
+                    if (ws[i] != Window.getActive()) {
+                        ServerUpdateManager sum = ws[i].getUpdateManager().getServerUpdateManager();
+                        Command[] commands = sum.getCommands();
+                        if (!sum.isEmpty() 
+                              || (commands != null && commands.length > 0)) {
+                            ws[i].getUpdateManager().applyAsyncUpdates();
+                        }
+                    }
+                }
+
+                // if this window is closing, de-reference it so we don't leak memory
+                ApplicationInstance.getActive().removeIfClosing(Window.getActive());
                 
                 // Purge updates.
-                userInstance.getUpdateManager().purge();
+                Window.getActive().getUpdateManager().purge();
             } finally {
+                Window.setActive(null);
                 userInstance.setActive(false);
             }
         }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/UserInstance.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/UserInstance.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/UserInstance.java	Mon Apr 27 16:51:56 2009 +0100
@@ -49,8 +49,7 @@
 import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.app.Component;
 import nextapp.echo.app.TaskQueueHandle;
-import nextapp.echo.app.update.ServerComponentUpdate;
-import nextapp.echo.app.update.UpdateManager;
+import nextapp.echo.app.Window;
 import nextapp.echo.webcontainer.util.IdTable;
 
 /**
@@ -79,8 +78,8 @@
      * @param conn the client/server <code>Connection</code> for which the 
      *        instance is being instantiated
      */
-    public static void newInstance(Connection conn) {
-        new UserInstance(conn);
+    public static UserInstance newInstance(Connection conn) {
+        return new UserInstance(conn);
     }
 
     /**
@@ -106,11 +105,6 @@
     private ClientProperties clientProperties;
     
     /**
-     * Mapping between component instances and <code>RenderState</code> objects.
-     */
-    private Map componentToRenderStateMap = new HashMap();
-    
-    /**
      * <code>PropertyChangeListener</code> for supported <code>ApplicationInstance</code>.
      */
     private PropertyChangeListener applicationPropertyChangeListener = new SerializablePropertyChangeListener() {
@@ -167,14 +161,6 @@
      * Map of <code>TaskQueueHandle</code>s to callback intervals.
      */
     private transient Map taskQueueToCallbackIntervalMap;
-    
-    /**
-     * The current transactionId.  Used to ensure incoming ClientMessages reflect
-     * changes made by user against current server-side state of user interface.
-     * This is used to eliminate issues that could be encountered with two
-     * browser windows pointing at the same application instance.
-     */
-    private int transactionId = 0;
        
     /**
      * Creates a new <code>UserInstance</code>.
@@ -187,13 +173,6 @@
         conn.initUserInstance(this);
         initialRequestParameterMap = new HashMap(conn.getRequest().getParameterMap());
     }
-
-    /**
-     * Clears all <code>RenderState</code> information.
-     */
-    public void clearRenderStates() {
-        componentToRenderStateMap.clear();
-    }
     
     /**
      * Returns the corresponding <code>ApplicationInstance</code>
@@ -265,33 +244,39 @@
      * @return the client-side render id
      */
     public String getClientRenderId(Component component) {
-        return "C." + component.getRenderId();
+        return "C." + component.getContainingWindow().getId() + "." + component.getRenderId();
+    }
+    
+    /**
+     * Returns the client-side render id that should be used when rendering the
+     * specified <code>Component</code>.
+     * 
+     * @param component the component
+     * @param w the window the component is/was associated with
+     * @return the client-side render id
+     */
+    public String getWindowClientRenderId(Component component, Window w) {
+        return "C." + w.getId() + "." + component.getRenderId();
     }
     
     /**
      * Retrieves the <code>Component</code> with the specified client-side render id.
      * 
-     * @param clientRenderId client-side element render id, e.g., "C.42323"
+     * @param clientRenderId client-side element render id, e.g., "C.windowIdxyz.42323"
      * @return the component (e.g., the component whose id is "42323")
      */
     public Component getComponentByClientRenderId(String clientRenderId) {
         try {
-            return applicationInstance.getComponentByRenderId(clientRenderId.substring(2));
+            int dot = clientRenderId.indexOf(".", 2);
+            String windowId = clientRenderId.substring(2, dot);
+            String renderId = clientRenderId.substring(dot+1);
+            return applicationInstance.getWindow(windowId).getComponentByRenderId(renderId);
         } catch (IndexOutOfBoundsException ex) {
             throw new IllegalArgumentException("Invalid component element id: " + clientRenderId);
         }
     }
 
     /**
-     * Returns the current transaction id.
-     * 
-     * @return the current transaction id
-     */
-    public int getCurrentTransactionId() {
-        return transactionId;
-    }
-
-    /**
      * Retrieves the <code>IdTable</code> used by this 
      * <code>ContainerInstance</code> to assign weakly-referenced unique 
      * identifiers to arbitrary objects.
@@ -314,27 +299,6 @@
     public Map getInitialRequestParameterMap() {
         return initialRequestParameterMap;
     }
-    
-    /**
-     * Increments the current transaction id and returns it.
-     * 
-     * @return the current transaction id, after an increment
-     */
-    public int getNextTransactionId() {
-        ++transactionId;
-        return transactionId;
-    }
-
-    /**
-     * Retrieves the <code>RenderState</code> of the specified
-     * <code>Component</code>.
-     * 
-     * @param component the component
-     * @return the rendering state
-     */
-    public RenderState getRenderState(Component component) {
-        return (RenderState) componentToRenderStateMap.get(component);
-    }
 
     /**
      * Returns the id of the HTML element that will serve as the Root component.
@@ -423,19 +387,6 @@
         }
     }
     
-   /**
-     * Convenience method to retrieve the application's 
-     * <code>UpdateManager</code>, which is used to synchronize
-     * client and server states.
-     * This method is equivalent to invoking
-     * <code>getApplicationInstance().getUpdateManager()</code>.
-     * 
-     * @return the <code>UpdateManager</code>
-     */
-    public UpdateManager getUpdateManager() {
-        return applicationInstance.getUpdateManager();
-    }
-    
     /**
      * Disposes of the <code>UserInstance</code>.
      */
@@ -487,49 +438,18 @@
      * Prepares the <code>ApplicationInstance</code> for use, initializing the application if it has not been initialized 
      * previously.
      */
-    void prepareApplicationInstance() {
+    public void prepareApplicationInstance() {
         if (!applicationInitialized) {
             try {
-                applicationInstance.doInit();
+                applicationInstance.doInit(
+                    WebContainerServlet.getActiveConnection().getRequest().getParameterMap(), 
+                    WebContainerServlet.getActiveConnection().getServlet().getAllowAsyncWindowUpdates()
+                );
             } finally {
                 applicationInitialized = true;
             }
         }
     }
-    
-    /**
-     * Removes all <code>RenderState</code>s whose components are not
-     * registered.
-     */
-    public void purgeRenderStates() {
-        ServerComponentUpdate[] updates = getUpdateManager().getServerUpdateManager().getComponentUpdates();
-
-        Iterator it = componentToRenderStateMap.keySet().iterator();
-        while (it.hasNext()) {
-            Component component = (Component) it.next();
-            if (!component.isRegistered() || !component.isRenderVisible()) {
-                it.remove();
-                continue;
-            }
-
-            for (int i = 0; i < updates.length; ++i) {
-                if (updates[i].hasRemovedDescendant(component)) {
-                    it.remove();
-                    continue;
-                }
-            }
-        }
-    }
-
-    /**
-     * Removes the <code>RenderState</code> of the specified
-     * <code>Component</code>.
-     * 
-     * @param component the component
-     */
-    public void removeRenderState(Component component) {
-        componentToRenderStateMap.remove(component);
-    }
 
     /**
      * @see javax.servlet.http.HttpSessionActivationListener#sessionDidActivate(javax.servlet.http.HttpSessionEvent)
@@ -592,17 +512,6 @@
     }
 
     /**
-     * Sets the <code>RenderState</code> of the specified 
-     * <code>Component</code>.
-     * 
-     * @param component the component
-     * @param renderState the render state
-     */
-    public void setRenderState(Component component, RenderState renderState) {
-        componentToRenderStateMap.put(component, renderState);
-    }
-
-    /**
      * Sets the URI of the servlet managing this <code>UserInstance</code>.
      * 
      * @param servletUri the URI
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/WebContainerServlet.java	Mon Apr 27 16:51:56 2009 +0100
@@ -48,6 +48,7 @@
 import nextapp.echo.webcontainer.service.AsyncMonitorService;
 import nextapp.echo.webcontainer.service.BootService;
 import nextapp.echo.webcontainer.service.NewInstanceService;
+import nextapp.echo.webcontainer.service.NewWindowService;
 import nextapp.echo.webcontainer.service.ResourceService;
 import nextapp.echo.webcontainer.service.SessionExpiredService;
 import nextapp.echo.webcontainer.service.StaticTextService;
@@ -118,6 +119,13 @@
     public static final String SERVICE_ID_NEW_INSTANCE = "Echo.NewInstance";
     
     /**
+     * <code>Service</code> identifier of the 'new window' service. 
+     * The 'new window' service is rendered when a client makes a request
+     * with the service identifier <code>Echo.NewWindow</code> and a session DOES exist..
+     */
+    public static final String SERVICE_ID_NEW_WINDOW = "Echo.NewWindow";
+    
+    /**
      * <code>Service</code> identifier of the 'session expired' service.
      * The 'session expired' service is rendered when a client makes a
      * request that has an identifier and is intended for an active session, 
@@ -242,6 +250,8 @@
     
     /** Collection of CSS style sheet <code>Service</code>s which should be initially loaded. */
     private List initStyleSheets = null;
+    /** Whether to automatically handle asynchronous updates to windows in a multiple-window environment */
+    private boolean allowAsyncWindowUpdates = true;
     
     /**
      * Default constructor.
@@ -253,6 +263,18 @@
         services.add(SynchronizeService.INSTANCE);
         services.add(WindowHtmlService.INSTANCE);
         services.add(AsyncMonitorService.INSTANCE);
+        services.add(NewWindowService.INSTANCE);
+    }
+    
+    /**
+     * Called by GenericServlet.init(ServletConfig) to initialise
+     * the subclass. In our case, this retrieves configuration options from
+     * the web.xml descriptor.
+     */
+    public void init() throws ServletException {
+        if (getServletConfig().getInitParameter("allowAsyncWindowUpdates") != null) {
+            allowAsyncWindowUpdates = Boolean.parseBoolean(getServletConfig().getInitParameter("allowAsyncWindowUpdates"));
+        }
     }
     
     /**
@@ -453,4 +475,13 @@
     public Iterator getCssFileNames() {
         return cssFileNames.iterator();
     }
+
+    /**
+     * Returns whether this web container servlet instance is automatically
+     * allowing asynchronous updates when multiple windows are active.
+     * @return
+     */
+    public boolean getAllowAsyncWindowUpdates() {
+        return allowAsyncWindowUpdates;
+    }
 }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/command/BrowserOpenWindowCommand.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/command/BrowserOpenWindowCommand.java	Wed Apr 22 12:20:12 2009 +0100
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,171 +0,0 @@
-/* 
- * This file is part of the Echo Web Application Framework (hereinafter "Echo").
- * Copyright (C) 2002-2009 NextApp, Inc.
- *
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- */
-
-package nextapp.echo.webcontainer.command;
-
-import nextapp.echo.app.Command;
-import nextapp.echo.app.Extent;
-
-/**
- * A Web Application Container-specific <code>Command</code> to 
- * open a new browser window displaying a specific URI.
- * This action may not propagate to a client if the client has 
- * pop-up blocking algorithm enabled.
- */  
-public class BrowserOpenWindowCommand 
-implements Command {
-    
-    /** 
-     * Flag to replace entry in browser's navigation history with new window content.  
-     * Note that some browsers may ignore this flag. 
-     */
-    public static final int FLAG_REPLACE = 0x1;
-    
-    /** Flag to enable the browser's menu bar. */
-    public static final int FLAG_MENUBAR = 0x2;
-    
-    /** Flag to enable the browser's tool bar. */
-    public static final int FLAG_TOOLBAR = 0x4;
-    
-    /** Flag to enable the browser's location input field. */
-    public static final int FLAG_LOCATION = 0x8;
-    
-    /** Flag to enable the browser's status field. */
-    public static final int FLAG_STATUS = 0x10;
-    
-    /** 
-     * Flag to recommend that the browser allow resizing of the window.  
-     * Some environments may always allow the window to be resized.
-     */
-    public static final int FLAG_RESIZABLE = 0x20;
-    
-    /** The URI to display. */
-    private String uri;
-    
-    /** The window name. */
-    private String name;
-    
-    /** The width of the window. */
-    private Extent width;
-    
-    /** The height of the window. */
-    private Extent height;
-    
-    /** Bitwise settings for the window. */
-    private int flags;
-    
-    /**
-     * Creates a new <code>BrowserOpenWindowCommand</code>.
-     * 
-     * @param uri the target URI
-     * @param name the window name (may be null)
-     */
-    public BrowserOpenWindowCommand(String uri, String name) {
-        this(uri, name, null, null, FLAG_MENUBAR | FLAG_TOOLBAR | FLAG_LOCATION | FLAG_RESIZABLE);
-    }
-    
-    /**
-     * Creates a new <code>BrowserOpenWindowCommand</code>.
-     * 
-     * @param uri the target URI
-     * @param name the window name (may be null)
-     * @param width the window width (may be null)
-     * @param height the window width (may be null)
-     * @param flags the configuration flags, zero or more of the following values ORed together:
-     *        <ul>
-     *         <li><code>FLAG_REPLACE</code></li>
-     *         <li><code>FLAG_MENUBAR</code></li>
-     *         <li><code>FLAG_TOOLBAR</code></li>
-     *         <li><code>FLAG_LOCATION</code></li>
-     *         <li><code>FLAG_STATUS</code></li>
-     *         <li><code>FLAG_RESIZABLE</code></li>
-     *        </ul>
-     */
-    public BrowserOpenWindowCommand(String uri, String name, Extent width, Extent height, int flags) {
-        super();
-        this.uri = uri;
-        this.name = name;
-        this.width = width;
-        this.height = height;
-        this.flags = flags;
-    }
-    
-    /**
-     * Returns the width of the window to be opened.
-     * 
-     * @return the width
-     */
-    public Extent getWidth() {
-        return width;
-    }
-    
-    /**
-     * Returns the height of the window to be opened.
-     * 
-     * @return the height
-     */
-    public Extent getHeight() {
-        return height;
-    }
-
-    /**
-     * Returns the window name.
-     * 
-     * @return the window name
-     */
-    public String getName() {
-        return name;
-    }
-    
-    /**
-     * Returns the target URI.
-     * 
-     * @return the target URI
-     */
-    public String getUri() {
-        return uri;
-    }
-    
-    /**
-     * Returns the configuration flags, zero or more of the following values ORed together:
-     * <ul>
-     *  <li><code>FLAG_REPLACE</code></li>
-     *  <li><code>FLAG_MENUBAR</code></li>
-     *  <li><code>FLAG_TOOLBAR</code></li>
-     *  <li><code>FLAG_LOCATION</code></li>
-     *  <li><code>FLAG_STATUS</code></li>
-     *  <li><code>FLAG_RESIZABLE</code></li>
-     * </ul>
-     * 
-     * @return the configuration flags
-     */
-    public int getFlags() {
-        return flags;
-    }
-}
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/resource/Boot.js
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/Boot.js	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/Boot.js	Mon Apr 27 16:51:56 2009 +0100
@@ -30,15 +30,16 @@
      * 
      * @param {String} serverBaseUrl the servlet URL
      * @param {Boolean} debug flag indicating whether debug capabilities should be enabled
+     * @param {String} the id of the base window
      */
-    boot: function(serverBaseUrl, debug) {
+    boot: function(serverBaseUrl, debug, windowId) {
         Core.Web.init();
         
         if (debug && window.Echo.DebugConsole) {
             Echo.DebugConsole.install();
         }
     
-        var client = new Echo.RemoteClient(serverBaseUrl);
+        var client = new Echo.RemoteClient(serverBaseUrl, windowId);
         for (var i = 0; i < Echo.Boot._initMethods.length; ++i) {
             Echo.Boot._initMethods[i](client);
         }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.BrowserCloseWindow.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.BrowserCloseWindow.js	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,18 @@
+/**
+ * Command execution peer: Browser Close Window
+ */
+Echo.RemoteClient.CommandExec.BrowserCloseWindow = Core.extend(Echo.RemoteClient.CommandExec, {
+    
+    $static: {
+        
+        /** @see Echo.RemoteClient.CommandExecProcessor#execute */
+        execute: function(client, commandData) {
+            window.close();
+        }
+     },
+     
+     $load: function() {
+        Echo.RemoteClient.CommandExecProcessor.registerPeer("nextapp.echo.app.command.BrowserCloseWindowCommand", this);
+     }
+});
+
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.BrowserOpenWindow.js
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.BrowserOpenWindow.js	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.BrowserOpenWindow.js	Mon Apr 27 16:51:56 2009 +0100
@@ -77,7 +77,7 @@
      },
      
      $load: function() {
-        Echo.RemoteClient.CommandExecProcessor.registerPeer("nextapp.echo.webcontainer.command.BrowserOpenWindowCommand", this);
+        Echo.RemoteClient.CommandExecProcessor.registerPeer("nextapp.echo.app.command.BrowserOpenWindowCommand", this);
      }
 });
 
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.OpenEcho3Window.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.OpenEcho3Window.js	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,22 @@
+/**
+ * Command execution peer: Open Echo3 Window
+ */
+Echo.RemoteClient.CommandExec.OpenEcho3Window = Core.extend(Echo.RemoteClient.CommandExec, {
+    
+    $static: {
+        
+        /** @see Echo.RemoteClient.CommandExecProcessor#execute */
+        execute: function(client, commandData) {
+            if (!commandData.uri) {
+                throw new Error("URI not specified in OpenEcho3WindowCommand.");
+            }
+            
+            window.open(commandData.uri, "_blank");
+        }
+     },
+     
+     $load: function() {
+        Echo.RemoteClient.CommandExecProcessor.registerPeer("nextapp.echo.app.command.OpenEcho3WindowCommand", this);
+     }
+});
+
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/resource/RemoteClient.js	Mon Apr 27 16:51:56 2009 +0100
@@ -138,11 +138,18 @@
     transactionId: 0,
     
     /**
+     * The identifier of the window for which this client is operating in the current
+     * application
+     * @type String
+     */
+    _windowId: null,
+    
+    /**
      * Creates a new RemoteClient instance.
      * 
      * @param serverUrl the URL of the server
      */
-    $construct: function(serverUrl) {
+    $construct: function(serverUrl, windowId) {
         Echo.RemoteClient.init();
     
         Echo.Client.call(this);
@@ -153,6 +160,7 @@
         }
         
         this._serverUrl = serverUrl;
+        this._windowId = windowId;
         this._listenerList = new Core.ListenerList();
         this._processClientUpdateRef = Core.method(this, this._processClientUpdate);
         this._processClientEventRef = Core.method(this, this._processClientEvent);
@@ -271,7 +279,7 @@
      * @type String
      */
     _getServiceUrl: function(serviceId) {
-        return this._serverUrl + "?sid=" + serviceId;
+        return this._serverUrl + "?sid=" + serviceId + "&wid=" + this._windowId;
     },
 
     /**
@@ -413,6 +421,10 @@
         if (this._serverFocusedComponent) {
             this.application.setFocusedComponent(this._serverFocusedComponent);
         }
+        
+        if (this._listenerList.hasListeners("serverUpdateComplete")) {
+            this._listenerList.fireEvent({type: "serverUpdateComplete"});
+        }
     
         if (Echo.Client.profilingTimer) {
             Core.Debug.consoleWrite(Echo.Client.profilingTimer + " /pc:" + Echo.Render._loadedPeerCount);
@@ -423,10 +435,6 @@
             this.displayError(this.domainElement, this.configuration["Resync.Message"], null, 
                     this.configuration["Action.Continue"]);
         }
-        
-        if (this._listenerList.hasListeners("serverUpdateComplete")) {
-            this._listenerList.fireEvent({type: "serverUpdateComplete"});
-        }
     },
     
     /**
@@ -435,6 +443,9 @@
      * @param e the HttpConnection response event
      */
     _processSyncResponse: function(e) {
+        if (Echo.Client.profilingTimer) {
+            Echo.Client.profilingTimer.mark("syn");
+        }
         // Retrieve response document.
         var responseDocument = e.source.getResponseXml();
         
@@ -453,9 +464,6 @@
             initMessage = true;
         }
         
-        // Profiling Timer (Un-comment to enable, comment to disable).
-        Echo.Client.profilingTimer = new Echo.Client.Timer();
-        
         // Remove component update listener from application.  This listener is listening
         // for user input.  
         this.application.removeListener("componentUpdate", this._processClientUpdateRef);
@@ -531,6 +539,10 @@
         this._clientMessage = new Echo.RemoteClient.ClientMessage(this, false);
 
         conn.addResponseListener(Core.method(this, this._processSyncResponse));
+
+        // Profiling Timer (Un-comment to enable, comment to disable).
+        Echo.Client.profilingTimer = new Echo.Client.Timer();
+        
         conn.connect();
     }
 });
@@ -786,6 +798,7 @@
         this._componentIdToPropertyMap = {};
         
         this._document = Core.Web.DOM.createDocument("http://www.nextapp.com/products/echo/svrmsg/clientmessage.3.0", "cmsg");
+        this._document.documentElement.setAttribute("w", client._windowId);
         if (initialize) {
             this._document.documentElement.setAttribute("t", "init");
             this._renderClientProperties();
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/service/AsyncMonitorService.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/service/AsyncMonitorService.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/service/AsyncMonitorService.java	Mon Apr 27 16:51:56 2009 +0100
@@ -32,6 +32,7 @@
 
 import java.io.IOException;
 
+import nextapp.echo.app.Window;
 import nextapp.echo.webcontainer.Connection;
 import nextapp.echo.webcontainer.ContentType;
 import nextapp.echo.webcontainer.Service;
@@ -82,7 +83,11 @@
      */
     public void service(Connection conn) throws IOException {
         conn.setContentType(ContentType.TEXT_XML);
-        if (conn.getUserInstance().getApplicationInstance().hasQueuedTasks()) {
+        String windowId = conn.getRequest().getParameter("wid");
+        Window w = conn.getUserInstance().getApplicationInstance().getWindow(windowId);
+        if (w != null)
+            w.updateLastUpdateTime();
+        if (w != null && w.hasQueuedTasks()) {
             conn.getWriter().write("<async-monitor request-sync=\"true\"/>");
         } else {
             conn.getWriter().write("<async-monitor request-sync=\"false\"/>");
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/service/NewInstanceService.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/service/NewInstanceService.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/service/NewInstanceService.java	Mon Apr 27 16:51:56 2009 +0100
@@ -32,6 +32,7 @@
 
 import java.io.IOException;
 
+import nextapp.echo.app.ApplicationInstance;
 import nextapp.echo.webcontainer.Connection;
 import nextapp.echo.webcontainer.Service;
 import nextapp.echo.webcontainer.UserInstance;
@@ -75,7 +76,12 @@
      */
     public void service(Connection conn) 
     throws IOException {
-        UserInstance.newInstance(conn);
-        WindowHtmlService.INSTANCE.service(conn);
+        UserInstance.newInstance(conn).init(conn);
+        ApplicationInstance.setActive(conn.getUserInstance().getApplicationInstance());
+        try {
+            WindowHtmlService.INSTANCE.service(conn);
+        } finally {
+            ApplicationInstance.setActive(null);
+        }
     }
 }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/service/NewWindowService.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/service/NewWindowService.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,88 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.webcontainer.service;
+
+
+import java.io.IOException;
+
+import nextapp.echo.app.Window;
+import nextapp.echo.webcontainer.Connection;
+import nextapp.echo.webcontainer.Service;
+import nextapp.echo.webcontainer.WebContainerServlet;
+
+
+/**
+ * <code>Service</code> which launches a new instance of an Echo application.
+ */
+public class NewWindowService 
+implements Service {
+
+    /**
+     * Singleton instance.
+     */
+    public static final NewWindowService INSTANCE = new NewWindowService();
+    
+    /**
+     * Default constructor.
+     */
+    private NewWindowService() {
+        super();
+    }
+    
+    /**
+     * @see Service#getId()
+     */
+    public String getId() {
+        return WebContainerServlet.SERVICE_ID_NEW_WINDOW;
+    }
+    
+    /**
+     * @see Service#getVersion()
+     */
+    public int getVersion() {
+        return DO_NOT_CACHE;
+    }
+
+    /**
+     * @see Service#service(nextapp.echo.webcontainer.Connection)
+     */
+    public void service(Connection conn) 
+    throws IOException {
+        // creates the top-level window for the new browser window
+        String windowId = conn.getRequest().getParameter("wid");
+        Window w = conn.getUserInstance().getApplicationInstance().getWindow(windowId);
+        try {
+            Window.setActive(w);
+            WindowHtmlService.INSTANCE.service(conn);
+        } finally {
+            Window.setActive(null);
+        }
+    }
+}
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/service/WindowHtmlService.java	Mon Apr 27 16:51:56 2009 +0100
@@ -44,6 +44,7 @@
 import org.xml.sax.SAXException;
 
 import nextapp.echo.app.ApplicationInstance;
+import nextapp.echo.app.Window;
 import nextapp.echo.app.util.DomUtil;
 import nextapp.echo.webcontainer.Connection;
 import nextapp.echo.webcontainer.ContentType;
@@ -223,7 +224,10 @@
         }
         
         bodyElement.setAttribute("id", "body");
-        bodyElement.setAttribute("onload", "Echo.Boot.boot('" + userInstance.getServletUri() + "', " + debug + ");");
+        String windowId = conn.getRequest().getParameter("wid");
+        if (windowId == null)
+            windowId = userInstance.getApplicationInstance().getDefaultWindowId();
+        bodyElement.setAttribute("onload", "Echo.Boot.boot('" + userInstance.getServletUri() + "', " + debug + ", '" + windowId + "');");
         bodyElement.setAttribute("style",
                 "height:100%;width:100%;margin:0px;padding: 0px;" +
                 "font-family:verdana, arial, helvetica, sans-serif;font-size:10pt");
@@ -264,6 +268,8 @@
         } catch (SAXException ex) {
             throw new SynchronizationException(
                     "Failed to write HTML document.", ex);
+        } finally {
+            Window.setActive(null);
         }
     }
 }
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/BrowserCloseWindowCommandPeer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/BrowserCloseWindowCommandPeer.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,75 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.webcontainer.sync.command;
+
+import nextapp.echo.app.command.BrowserCloseWindowCommand;
+import nextapp.echo.app.util.Context;
+import nextapp.echo.webcontainer.AbstractCommandSynchronizePeer;
+import nextapp.echo.webcontainer.ServerMessage;
+import nextapp.echo.webcontainer.Service;
+import nextapp.echo.webcontainer.WebContainerServlet;
+import nextapp.echo.webcontainer.service.JavaScriptService;
+
+/**
+ * Synchronization peer for <code>BrowserCloseWindowCommand</code>.
+ */
+public class BrowserCloseWindowCommandPeer 
+extends AbstractCommandSynchronizePeer {
+    
+    /** The associated client-side JavaScript module <code>Service</code>. */
+    private static final Service BROWSER_CLOSE_WINDOW_SERVICE = JavaScriptService.forResource("Echo.BrowserCloseWindow", 
+            "nextapp/echo/webcontainer/resource/RemoteClient.BrowserCloseWindow.js");
+    
+    static {
+        WebContainerServlet.getServiceRegistry().add(BROWSER_CLOSE_WINDOW_SERVICE);
+    }
+
+    /**
+     * Default constructor.
+     */
+    public BrowserCloseWindowCommandPeer() {
+        super();
+    }
+    
+    /**
+     * @see nextapp.echo.webcontainer.CommandSynchronizePeer#getCommandClass()
+     */
+    public Class getCommandClass() {
+        return BrowserCloseWindowCommand.class;
+    }
+    
+    /**
+     * @see nextapp.echo.webcontainer.AbstractCommandSynchronizePeer#init(nextapp.echo.app.util.Context)
+     */
+    public void init(Context context) {
+        ServerMessage serverMessage = (ServerMessage) context.get(ServerMessage.class);
+        serverMessage.addLibrary(BROWSER_CLOSE_WINDOW_SERVICE.getId());
+    }
+}
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/BrowserOpenWindowCommandPeer.java
--- a/src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/BrowserOpenWindowCommandPeer.java	Wed Apr 22 12:20:12 2009 +0100
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/BrowserOpenWindowCommandPeer.java	Mon Apr 27 16:51:56 2009 +0100
@@ -30,12 +30,12 @@
 package nextapp.echo.webcontainer.sync.command;
 
 import nextapp.echo.app.Command;
+import nextapp.echo.app.command.BrowserOpenWindowCommand;
 import nextapp.echo.app.util.Context;
 import nextapp.echo.webcontainer.AbstractCommandSynchronizePeer;
 import nextapp.echo.webcontainer.ServerMessage;
 import nextapp.echo.webcontainer.Service;
 import nextapp.echo.webcontainer.WebContainerServlet;
-import nextapp.echo.webcontainer.command.BrowserOpenWindowCommand;
 import nextapp.echo.webcontainer.service.JavaScriptService;
 
 /**
diff -r 9e3ce0692488 src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/OpenEcho3WindowCommandPeer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/server-java/webcontainer/nextapp/echo/webcontainer/sync/command/OpenEcho3WindowCommandPeer.java	Mon Apr 27 16:51:56 2009 +0100
@@ -0,0 +1,90 @@
+/* 
+ * This file is part of the Echo Web Application Framework (hereinafter "Echo").
+ * Copyright (C) 2002-2009 NextApp, Inc.
+ *
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ */
+
+package nextapp.echo.webcontainer.sync.command;
+
+import nextapp.echo.app.Command;
+import nextapp.echo.app.command.OpenEcho3WindowCommand;
+import nextapp.echo.app.util.Context;
+import nextapp.echo.webcontainer.AbstractCommandSynchronizePeer;
+import nextapp.echo.webcontainer.ServerMessage;
+import nextapp.echo.webcontainer.Service;
+import nextapp.echo.webcontainer.WebContainerServlet;
+import nextapp.echo.webcontainer.service.JavaScriptService;
+
+/**
+ * Synchronization peer for <code>BrowserOpenWindowCommand</code>.
+ */
+public class OpenEcho3WindowCommandPeer 
+extends AbstractCommandSynchronizePeer {
+    
+    /** The associated client-side JavaScript module <code>Service</code>. */
+    private static final Service BROWSER_OPEN_WINDOW_SERVICE = JavaScriptService.forResource("Echo.OpenEcho3Window", 
+            "nextapp/echo/webcontainer/resource/RemoteClient.OpenEcho3Window.js");
+    
+    static {
+        WebContainerServlet.getServiceRegistry().add(BROWSER_OPEN_WINDOW_SERVICE);
+    }
+
+    /**
+     * Default constructor.
+     */
+    public OpenEcho3WindowCommandPeer() {
+        super();
+        addProperty("uri", new AbstractCommandSynchronizePeer.PropertyPeer() {
+            public Object getProperty(Context context, Command command) {
+                return WebContainerServlet.getActiveConnection().getRequest().getRequestURL() 
+                    + "?sid=" 
+                    + WebContainerServlet.SERVICE_ID_NEW_WINDOW 
+                    + "&wid=" 
+                    + ((OpenEcho3WindowCommand) command).getWindow().getId();
+            }
+        });
+        addProperty("name", new AbstractCommandSynchronizePeer.PropertyPeer() {
+            public Object getProperty(Context context, Command command) {
+                return ((OpenEcho3WindowCommand) command).getWindow().getId();
+            }
+        });
+    }
+    
+    /**
+     * @see nextapp.echo.webcontainer.CommandSynchronizePeer#getCommandClass()
+     */
+    public Class getCommandClass() {
+        return OpenEcho3WindowCommand.class;
+    }
+    
+    /**
+     * @see nextapp.echo.webcontainer.AbstractCommandSynchronizePeer#init(nextapp.echo.app.util.Context)
+     */
+    public void init(Context context) {
+        ServerMessage serverMessage = (ServerMessage) context.get(ServerMessage.class);
+        serverMessage.addLibrary(BROWSER_OPEN_WINDOW_SERVICE.getId());
+    }
+}
